{
  "root": "program",
  "rootAlias": "program",
  "children": [
    {
      "type": "joinpoint",
      "name": "joinpoint",
      "extends": "",
      "children": [
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "attributes"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "selects"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "actions"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "ancestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with a dump of the AST representation starting from this node. This representation corresponds to the internal Java representation of the ClavaAst, where the node names correspond to Java classes. To get an equivalent representation with join point names, use the attribute 'dump'",
          "children": [
            {
              "type": "String",
              "name": "ast"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor AST name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "astAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, considering null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "astChild"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, considering null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "astChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String that uniquely identifies this node",
          "children": [
            {
              "type": "String",
              "name": "astId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if this node is a Java instance of the given name, which corresponds to a simple Java class name of an AST node. For an equivalent function for join point names, use 'instanceOf(joinPointName)'",
          "children": [
            {
              "type": "boolean",
              "name": "astIsInstance"
            },
            {
              "type": "String",
              "name": "className"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the Java class of this node, which is similar to the equivalent node in Clang AST",
          "children": [
            {
              "type": "String",
              "name": "astName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, considering null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "astNumChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "astParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The bit width of the type returned by this join point, in relation to the definitions of its Translation Unit, or undefined if there is no type or bitwidth defined, or if the join point is not in a TranslationUnit",
          "children": [
            {
              "type": "Integer",
              "name": "bitWidth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String list of the names of the join points that form a path from the root to this node",
          "children": [
            {
              "type": "String[]",
              "name": "chain"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the joinpoint chain",
          "children": [
            {
              "type": "joinpoint",
              "name": "chainAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "child"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "children"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the code represented by this node",
          "children": [
            {
              "type": "String",
              "name": "code"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "column"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the given node is a descendant of this node",
          "children": [
            {
              "type": "Boolean",
              "name": "contains"
            },
            {
              "type": "joinpoint",
              "name": "jp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "currentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "JS object associated with this node, containing parsed data of #pragma clava data when the node can be a target of pragmas. This is a special object, managed internally, and cannot be reassigned, to change its contents requires using key-value pairs. If the node can be the target of a pragma, the information stored in this object is persisted between rebuilds.",
          "children": [
            {
              "type": "Object",
              "name": "data"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the depth of this join point in the AST. If it is the root join point returns 0, if it is a child of the root node returns 1, etc.",
          "children": [
            {
              "type": "Integer",
              "name": "depth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves all descendants of the join point",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type, including the node itself",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendantsAndSelf"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endColumn"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endLine"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the file where the code of this node is located, if available",
          "children": [
            {
              "type": "String",
              "name": "filename"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the complete path to the file where the code of this node comes from",
          "children": [
            {
              "type": "String",
              "name": "filepath"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the first child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks in the descendants for the first node of the given type",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstJp"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use 'userField' instead]",
          "children": [
            {
              "type": "Object",
              "name": "getUserField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The value associated with the given property key",
          "children": [
            {
              "type": "Object",
              "name": "getValue"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use hasParent instead]",
          "children": [
            {
              "type": "boolean",
              "name": "hasAstParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the node has children, false otherwise",
          "children": [
            {
              "type": "Boolean",
              "name": "hasChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the given join point or AST node is the same (== test) as the current join point AST node",
          "children": [
            {
              "type": "Boolean",
              "name": "hasNode"
            },
            {
              "type": "Object",
              "name": "nodeOrJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this node has a parent",
          "children": [
            {
              "type": "boolean",
              "name": "hasParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point has a type",
          "children": [
            {
              "type": "Boolean",
              "name": "hasType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns comments that are not explicitly in the AST, but embedded in other nodes",
          "children": [
            {
              "type": "comment[]",
              "name": "inlineComments"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this is a Cilk node (i.e., cilk_spawn, cilk_sync or cilk_for)",
          "children": [
            {
              "type": "Boolean",
              "name": "isCilk"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is part of a system header file",
          "children": [
            {
              "type": "Boolean",
              "name": "isInSystemHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a header (e.g., if condition, for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a loop header (e.g., for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideLoopHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if any descendant or the node itself was defined as a macro",
          "children": [
            {
              "type": "Boolean",
              "name": "isMacro"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the full Java class name of the type of the Java field with the provided name",
          "children": [
            {
              "type": "String",
              "name": "javaFieldType"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'keys' instead, together with 'getValue'] The names of the Java fields of this node. Can be used as key of the attribute 'javaValue'",
          "children": [
            {
              "type": "String[]",
              "name": "javaFields"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'getValue' instead, with the names returned by the attribute 'keys'] Returns the value associated with the provided Java field name",
          "children": [
            {
              "type": "Object",
              "name": "javaValue"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use joinPointType instead (uppercase P)]",
          "children": [
            {
              "type": "String",
              "name": "joinpointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Id that is based on the position of the node in the code, and should remain stable between compilations (warning: only a few nodes - file, function, loop - currently support it)",
          "children": [
            {
              "type": "String",
              "name": "jpId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Java Class instance with the type of the given key",
          "children": [
            {
              "type": "Object",
              "name": "keyType"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A list of the properties currently supported by this node. Can be used as parameter of the attribute 'getValue'",
          "children": [
            {
              "type": "String[]",
              "name": "keys"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[HACK: .descendants(type) does not work in .lara files, after GraalVM update] Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "laraDescendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the last child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "lastChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that came before this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "leftJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "line"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A string with information about the file and code position of this node, if available",
          "children": [
            {
              "type": "String",
              "name": "location"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, ignoring null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "numChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope that is a parent of the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The pragmas associated with this node",
          "children": [
            {
              "type": "pragma[]",
              "name": "pragmas"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that comes after this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "rightJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the 'program' joinpoint",
          "children": [
            {
              "type": "joinpoint",
              "name": "root"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the nodes of the scope of the current join point. If this node has a body (e.g., loop, function) corresponds to the children of the body. Otherwise, returns an empty array",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "scopeNodes"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that came before this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsLeft"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that come after this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsRight"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Converts this join point to a statement, or returns undefined if it was not possible",
          "children": [
            {
              "type": "statement",
              "name": "stmt"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "type",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrives values that have been associated to nodes of the AST with 'setUserField'",
          "children": [
            {
              "type": "Object",
              "name": "userField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a String with the type of the join point",
          "children": [
            {
              "type": "String",
              "name": "joinPointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the current join point is an instance of the given type",
          "children": [
            {
              "type": "Boolean",
              "name": "instanceOf"
            },
            {
              "type": "String",
              "name": "name"
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "insert"
            },
            {
              "type": "[before| after| replace]",
              "name": "position",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "def"
            },
            {
              "type": "String",
              "name": "attribute",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, but not of the nodes in its fields",
          "children": [
            {
              "type": "joinpoint",
              "name": "copy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Copies all enumerable own properties from the source object to the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataAssign"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Clears all properties from the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataClear"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, including the nodes in their fields (only the first level of field nodes, this function is not recursive)",
          "children": [
            {
              "type": "joinpoint",
              "name": "deepCopy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the node associated to this joinpoint from the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "detach"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point after this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point before this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Adds a message that will be printed to the user after weaving finishes. Identical messages are removed",
          "children": [
            {
              "type": "void",
              "name": "messageToUser"
            },
            {
              "type": "String",
              "name": "message",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the children of this node",
          "children": [
            {
              "type": "void",
              "name": "removeChildren"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this node with the given node",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of join points",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of strings",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWithStrings"
            },
            {
              "type": "String[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Setting data directly is not supported, this action just emits a warning and does nothing",
          "children": [
            {
              "type": "void",
              "name": "setData"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the first child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setFirstChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String[]",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the last child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setLastChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the type of a node, if it has a type",
          "children": [
            {
              "type": "void",
              "name": "setType"
            },
            {
              "type": "type",
              "name": "type",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Associates arbitrary values to nodes of the AST",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "String",
              "name": "fieldName",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a map",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "Map",
              "name": "fieldNameAndValue",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the value associated with the given property key",
          "children": [
            {
              "type": "joinpoint",
              "name": "setValue"
            },
            {
              "type": "String",
              "name": "key",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "suffix",
              "defaultValue": ""
            }
          ]
        }
      ]
    },
    {
      "type": "joinpoint",
      "name": "accessSpecifier",
      "defaultAttr": "kind",
      "extends": "decl",
      "children": [
        {
          "type": "attribute",
          "tooltip": "the type of specifier. Can return 'public', 'protected', 'private' or 'none'",
          "children": [
            {
              "type": "String",
              "name": "kind"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The attributes (e.g. Pure, CUDAGlobal) associated to this decl",
          "children": [
            {
              "type": "attribute[]",
              "name": "attrs"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "attributes"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "selects"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "actions"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "ancestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with a dump of the AST representation starting from this node. This representation corresponds to the internal Java representation of the ClavaAst, where the node names correspond to Java classes. To get an equivalent representation with join point names, use the attribute 'dump'",
          "children": [
            {
              "type": "String",
              "name": "ast"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor AST name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "astAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, considering null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "astChild"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, considering null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "astChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String that uniquely identifies this node",
          "children": [
            {
              "type": "String",
              "name": "astId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if this node is a Java instance of the given name, which corresponds to a simple Java class name of an AST node. For an equivalent function for join point names, use 'instanceOf(joinPointName)'",
          "children": [
            {
              "type": "boolean",
              "name": "astIsInstance"
            },
            {
              "type": "String",
              "name": "className"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the Java class of this node, which is similar to the equivalent node in Clang AST",
          "children": [
            {
              "type": "String",
              "name": "astName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, considering null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "astNumChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "astParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The bit width of the type returned by this join point, in relation to the definitions of its Translation Unit, or undefined if there is no type or bitwidth defined, or if the join point is not in a TranslationUnit",
          "children": [
            {
              "type": "Integer",
              "name": "bitWidth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String list of the names of the join points that form a path from the root to this node",
          "children": [
            {
              "type": "String[]",
              "name": "chain"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the joinpoint chain",
          "children": [
            {
              "type": "joinpoint",
              "name": "chainAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "child"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "children"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the code represented by this node",
          "children": [
            {
              "type": "String",
              "name": "code"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "column"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the given node is a descendant of this node",
          "children": [
            {
              "type": "Boolean",
              "name": "contains"
            },
            {
              "type": "joinpoint",
              "name": "jp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "currentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "JS object associated with this node, containing parsed data of #pragma clava data when the node can be a target of pragmas. This is a special object, managed internally, and cannot be reassigned, to change its contents requires using key-value pairs. If the node can be the target of a pragma, the information stored in this object is persisted between rebuilds.",
          "children": [
            {
              "type": "Object",
              "name": "data"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the depth of this join point in the AST. If it is the root join point returns 0, if it is a child of the root node returns 1, etc.",
          "children": [
            {
              "type": "Integer",
              "name": "depth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves all descendants of the join point",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type, including the node itself",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendantsAndSelf"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endColumn"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endLine"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the file where the code of this node is located, if available",
          "children": [
            {
              "type": "String",
              "name": "filename"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the complete path to the file where the code of this node comes from",
          "children": [
            {
              "type": "String",
              "name": "filepath"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the first child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks in the descendants for the first node of the given type",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstJp"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use 'userField' instead]",
          "children": [
            {
              "type": "Object",
              "name": "getUserField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The value associated with the given property key",
          "children": [
            {
              "type": "Object",
              "name": "getValue"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use hasParent instead]",
          "children": [
            {
              "type": "boolean",
              "name": "hasAstParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the node has children, false otherwise",
          "children": [
            {
              "type": "Boolean",
              "name": "hasChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the given join point or AST node is the same (== test) as the current join point AST node",
          "children": [
            {
              "type": "Boolean",
              "name": "hasNode"
            },
            {
              "type": "Object",
              "name": "nodeOrJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this node has a parent",
          "children": [
            {
              "type": "boolean",
              "name": "hasParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point has a type",
          "children": [
            {
              "type": "Boolean",
              "name": "hasType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns comments that are not explicitly in the AST, but embedded in other nodes",
          "children": [
            {
              "type": "comment[]",
              "name": "inlineComments"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this is a Cilk node (i.e., cilk_spawn, cilk_sync or cilk_for)",
          "children": [
            {
              "type": "Boolean",
              "name": "isCilk"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is part of a system header file",
          "children": [
            {
              "type": "Boolean",
              "name": "isInSystemHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a header (e.g., if condition, for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a loop header (e.g., for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideLoopHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if any descendant or the node itself was defined as a macro",
          "children": [
            {
              "type": "Boolean",
              "name": "isMacro"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the full Java class name of the type of the Java field with the provided name",
          "children": [
            {
              "type": "String",
              "name": "javaFieldType"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'keys' instead, together with 'getValue'] The names of the Java fields of this node. Can be used as key of the attribute 'javaValue'",
          "children": [
            {
              "type": "String[]",
              "name": "javaFields"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'getValue' instead, with the names returned by the attribute 'keys'] Returns the value associated with the provided Java field name",
          "children": [
            {
              "type": "Object",
              "name": "javaValue"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use joinPointType instead (uppercase P)]",
          "children": [
            {
              "type": "String",
              "name": "joinpointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Id that is based on the position of the node in the code, and should remain stable between compilations (warning: only a few nodes - file, function, loop - currently support it)",
          "children": [
            {
              "type": "String",
              "name": "jpId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Java Class instance with the type of the given key",
          "children": [
            {
              "type": "Object",
              "name": "keyType"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A list of the properties currently supported by this node. Can be used as parameter of the attribute 'getValue'",
          "children": [
            {
              "type": "String[]",
              "name": "keys"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[HACK: .descendants(type) does not work in .lara files, after GraalVM update] Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "laraDescendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the last child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "lastChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that came before this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "leftJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "line"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A string with information about the file and code position of this node, if available",
          "children": [
            {
              "type": "String",
              "name": "location"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, ignoring null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "numChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope that is a parent of the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The pragmas associated with this node",
          "children": [
            {
              "type": "pragma[]",
              "name": "pragmas"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that comes after this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "rightJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the 'program' joinpoint",
          "children": [
            {
              "type": "joinpoint",
              "name": "root"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the nodes of the scope of the current join point. If this node has a body (e.g., loop, function) corresponds to the children of the body. Otherwise, returns an empty array",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "scopeNodes"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that came before this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsLeft"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that come after this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsRight"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Converts this join point to a statement, or returns undefined if it was not possible",
          "children": [
            {
              "type": "statement",
              "name": "stmt"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "type",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrives values that have been associated to nodes of the AST with 'setUserField'",
          "children": [
            {
              "type": "Object",
              "name": "userField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a String with the type of the join point",
          "children": [
            {
              "type": "String",
              "name": "joinPointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the current join point is an instance of the given type",
          "children": [
            {
              "type": "Boolean",
              "name": "instanceOf"
            },
            {
              "type": "String",
              "name": "name"
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "insert"
            },
            {
              "type": "[before| after| replace]",
              "name": "position",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "def"
            },
            {
              "type": "String",
              "name": "attribute",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, but not of the nodes in its fields",
          "children": [
            {
              "type": "joinpoint",
              "name": "copy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Copies all enumerable own properties from the source object to the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataAssign"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Clears all properties from the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataClear"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, including the nodes in their fields (only the first level of field nodes, this function is not recursive)",
          "children": [
            {
              "type": "joinpoint",
              "name": "deepCopy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the node associated to this joinpoint from the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "detach"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point after this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point before this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Adds a message that will be printed to the user after weaving finishes. Identical messages are removed",
          "children": [
            {
              "type": "void",
              "name": "messageToUser"
            },
            {
              "type": "String",
              "name": "message",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the children of this node",
          "children": [
            {
              "type": "void",
              "name": "removeChildren"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this node with the given node",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of join points",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of strings",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWithStrings"
            },
            {
              "type": "String[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Setting data directly is not supported, this action just emits a warning and does nothing",
          "children": [
            {
              "type": "void",
              "name": "setData"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the first child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setFirstChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String[]",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the last child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setLastChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the type of a node, if it has a type",
          "children": [
            {
              "type": "void",
              "name": "setType"
            },
            {
              "type": "type",
              "name": "type",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Associates arbitrary values to nodes of the AST",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "String",
              "name": "fieldName",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a map",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "Map",
              "name": "fieldNameAndValue",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the value associated with the given property key",
          "children": [
            {
              "type": "joinpoint",
              "name": "setValue"
            },
            {
              "type": "String",
              "name": "key",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "suffix",
              "defaultValue": ""
            }
          ]
        }
      ]
    },
    {
      "type": "joinpoint",
      "name": "adjustedType",
      "extends": "type",
      "children": [
        {
          "type": "attribute",
          "tooltip": "the type that is being adjusted",
          "children": [
            {
              "type": "type",
              "name": "originalType"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Integer[]",
              "name": "arrayDims"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Integer",
              "name": "arraySize"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The bit width of this type in the Translation Unit of the given join point, or undefined if there is no bitwidth defined",
          "children": [
            {
              "type": "Integer",
              "name": "bitWidth"
            },
            {
              "type": "joinpoint",
              "name": "reference"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "constant"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Single-step desugar. Returns the type itself if it does not have sugar",
          "children": [
            {
              "type": "type",
              "name": "desugar"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Completely desugars the type",
          "children": [
            {
              "type": "type",
              "name": "desugarAll"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A tree representation of the fields of this type",
          "children": [
            {
              "type": "String",
              "name": "fieldTree"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "hasSugar"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "hasTemplateArgs"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isArray"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "True if this is a type declared with the 'auto' keyword",
          "children": [
            {
              "type": "Boolean",
              "name": "isAuto"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isBuiltin"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isPointer"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isTopLevel"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String",
              "name": "kind"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Ignores certain types (e.g., DecayedType)",
          "children": [
            {
              "type": "type",
              "name": "normalize"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "templateArgsStrings"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "type[]",
              "name": "templateArgsTypes"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Maps names of join point fields that represent type join points, to their respective values",
          "children": [
            {
              "type": "Map",
              "name": "typeFields"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "If the type encapsulates another type, returns the encapsulated type",
          "children": [
            {
              "type": "type",
              "name": "unwrap"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "attributes"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "selects"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "actions"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "ancestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with a dump of the AST representation starting from this node. This representation corresponds to the internal Java representation of the ClavaAst, where the node names correspond to Java classes. To get an equivalent representation with join point names, use the attribute 'dump'",
          "children": [
            {
              "type": "String",
              "name": "ast"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor AST name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "astAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, considering null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "astChild"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, considering null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "astChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String that uniquely identifies this node",
          "children": [
            {
              "type": "String",
              "name": "astId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if this node is a Java instance of the given name, which corresponds to a simple Java class name of an AST node. For an equivalent function for join point names, use 'instanceOf(joinPointName)'",
          "children": [
            {
              "type": "boolean",
              "name": "astIsInstance"
            },
            {
              "type": "String",
              "name": "className"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the Java class of this node, which is similar to the equivalent node in Clang AST",
          "children": [
            {
              "type": "String",
              "name": "astName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, considering null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "astNumChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "astParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The bit width of the type returned by this join point, in relation to the definitions of its Translation Unit, or undefined if there is no type or bitwidth defined, or if the join point is not in a TranslationUnit",
          "children": [
            {
              "type": "Integer",
              "name": "bitWidth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String list of the names of the join points that form a path from the root to this node",
          "children": [
            {
              "type": "String[]",
              "name": "chain"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the joinpoint chain",
          "children": [
            {
              "type": "joinpoint",
              "name": "chainAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "child"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "children"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the code represented by this node",
          "children": [
            {
              "type": "String",
              "name": "code"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "column"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the given node is a descendant of this node",
          "children": [
            {
              "type": "Boolean",
              "name": "contains"
            },
            {
              "type": "joinpoint",
              "name": "jp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "currentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "JS object associated with this node, containing parsed data of #pragma clava data when the node can be a target of pragmas. This is a special object, managed internally, and cannot be reassigned, to change its contents requires using key-value pairs. If the node can be the target of a pragma, the information stored in this object is persisted between rebuilds.",
          "children": [
            {
              "type": "Object",
              "name": "data"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the depth of this join point in the AST. If it is the root join point returns 0, if it is a child of the root node returns 1, etc.",
          "children": [
            {
              "type": "Integer",
              "name": "depth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves all descendants of the join point",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type, including the node itself",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendantsAndSelf"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endColumn"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endLine"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the file where the code of this node is located, if available",
          "children": [
            {
              "type": "String",
              "name": "filename"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the complete path to the file where the code of this node comes from",
          "children": [
            {
              "type": "String",
              "name": "filepath"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the first child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks in the descendants for the first node of the given type",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstJp"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use 'userField' instead]",
          "children": [
            {
              "type": "Object",
              "name": "getUserField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The value associated with the given property key",
          "children": [
            {
              "type": "Object",
              "name": "getValue"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use hasParent instead]",
          "children": [
            {
              "type": "boolean",
              "name": "hasAstParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the node has children, false otherwise",
          "children": [
            {
              "type": "Boolean",
              "name": "hasChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the given join point or AST node is the same (== test) as the current join point AST node",
          "children": [
            {
              "type": "Boolean",
              "name": "hasNode"
            },
            {
              "type": "Object",
              "name": "nodeOrJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this node has a parent",
          "children": [
            {
              "type": "boolean",
              "name": "hasParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point has a type",
          "children": [
            {
              "type": "Boolean",
              "name": "hasType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns comments that are not explicitly in the AST, but embedded in other nodes",
          "children": [
            {
              "type": "comment[]",
              "name": "inlineComments"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this is a Cilk node (i.e., cilk_spawn, cilk_sync or cilk_for)",
          "children": [
            {
              "type": "Boolean",
              "name": "isCilk"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is part of a system header file",
          "children": [
            {
              "type": "Boolean",
              "name": "isInSystemHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a header (e.g., if condition, for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a loop header (e.g., for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideLoopHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if any descendant or the node itself was defined as a macro",
          "children": [
            {
              "type": "Boolean",
              "name": "isMacro"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the full Java class name of the type of the Java field with the provided name",
          "children": [
            {
              "type": "String",
              "name": "javaFieldType"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'keys' instead, together with 'getValue'] The names of the Java fields of this node. Can be used as key of the attribute 'javaValue'",
          "children": [
            {
              "type": "String[]",
              "name": "javaFields"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'getValue' instead, with the names returned by the attribute 'keys'] Returns the value associated with the provided Java field name",
          "children": [
            {
              "type": "Object",
              "name": "javaValue"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use joinPointType instead (uppercase P)]",
          "children": [
            {
              "type": "String",
              "name": "joinpointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Id that is based on the position of the node in the code, and should remain stable between compilations (warning: only a few nodes - file, function, loop - currently support it)",
          "children": [
            {
              "type": "String",
              "name": "jpId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Java Class instance with the type of the given key",
          "children": [
            {
              "type": "Object",
              "name": "keyType"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A list of the properties currently supported by this node. Can be used as parameter of the attribute 'getValue'",
          "children": [
            {
              "type": "String[]",
              "name": "keys"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[HACK: .descendants(type) does not work in .lara files, after GraalVM update] Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "laraDescendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the last child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "lastChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that came before this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "leftJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "line"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A string with information about the file and code position of this node, if available",
          "children": [
            {
              "type": "String",
              "name": "location"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, ignoring null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "numChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope that is a parent of the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The pragmas associated with this node",
          "children": [
            {
              "type": "pragma[]",
              "name": "pragmas"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that comes after this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "rightJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the 'program' joinpoint",
          "children": [
            {
              "type": "joinpoint",
              "name": "root"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the nodes of the scope of the current join point. If this node has a body (e.g., loop, function) corresponds to the children of the body. Otherwise, returns an empty array",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "scopeNodes"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that came before this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsLeft"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that come after this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsRight"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Converts this join point to a statement, or returns undefined if it was not possible",
          "children": [
            {
              "type": "statement",
              "name": "stmt"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "type",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrives values that have been associated to nodes of the AST with 'setUserField'",
          "children": [
            {
              "type": "Object",
              "name": "userField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a String with the type of the join point",
          "children": [
            {
              "type": "String",
              "name": "joinPointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the current join point is an instance of the given type",
          "children": [
            {
              "type": "Boolean",
              "name": "instanceOf"
            },
            {
              "type": "String",
              "name": "name"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Returns a copy of this type with the qualifier const",
          "children": [
            {
              "type": "type",
              "name": "asConst"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the desugared type of this type",
          "children": [
            {
              "type": "void",
              "name": "setDesugar"
            },
            {
              "type": "type",
              "name": "desugaredType",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the template argument types of a template type",
          "children": [
            {
              "type": "void",
              "name": "setTemplateArgsTypes"
            },
            {
              "type": "type[]",
              "name": "templateArgTypes",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets a single template argument type of a template type",
          "children": [
            {
              "type": "void",
              "name": "setTemplateArgsTypes"
            },
            {
              "type": "Integer",
              "name": "index",
              "defaultValue": ""
            },
            {
              "type": "type",
              "name": "templateArgType",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Changes a single occurence of a type field that has the current value with new value. Returns true if there was a change",
          "children": [
            {
              "type": "boolean",
              "name": "setTypeFieldByValueRecursive"
            },
            {
              "type": "Object",
              "name": "currentValue",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "newValue",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces an underlying type of this instance with new type, if it matches the old type. Returns true if there were changes",
          "children": [
            {
              "type": "type",
              "name": "setUnderlyingType"
            },
            {
              "type": "type",
              "name": "oldValue",
              "defaultValue": ""
            },
            {
              "type": "type",
              "name": "newValue",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "insert"
            },
            {
              "type": "[before| after| replace]",
              "name": "position",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "def"
            },
            {
              "type": "String",
              "name": "attribute",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, but not of the nodes in its fields",
          "children": [
            {
              "type": "joinpoint",
              "name": "copy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Copies all enumerable own properties from the source object to the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataAssign"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Clears all properties from the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataClear"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, including the nodes in their fields (only the first level of field nodes, this function is not recursive)",
          "children": [
            {
              "type": "joinpoint",
              "name": "deepCopy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the node associated to this joinpoint from the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "detach"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point after this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point before this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Adds a message that will be printed to the user after weaving finishes. Identical messages are removed",
          "children": [
            {
              "type": "void",
              "name": "messageToUser"
            },
            {
              "type": "String",
              "name": "message",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the children of this node",
          "children": [
            {
              "type": "void",
              "name": "removeChildren"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this node with the given node",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of join points",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of strings",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWithStrings"
            },
            {
              "type": "String[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Setting data directly is not supported, this action just emits a warning and does nothing",
          "children": [
            {
              "type": "void",
              "name": "setData"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the first child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setFirstChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String[]",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the last child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setLastChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the type of a node, if it has a type",
          "children": [
            {
              "type": "void",
              "name": "setType"
            },
            {
              "type": "type",
              "name": "type",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Associates arbitrary values to nodes of the AST",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "String",
              "name": "fieldName",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a map",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "Map",
              "name": "fieldNameAndValue",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the value associated with the given property key",
          "children": [
            {
              "type": "joinpoint",
              "name": "setValue"
            },
            {
              "type": "String",
              "name": "key",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "suffix",
              "defaultValue": ""
            }
          ]
        }
      ]
    },
    {
      "type": "joinpoint",
      "name": "arrayAccess",
      "extends": "expression",
      "children": [
        {
          "type": "attribute",
          "tooltip": "expression representing the variable of the array access (can be a varref, memberAccess...)",
          "children": [
            {
              "type": "expression",
              "name": "arrayVar"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "If the array access is done over a variable, returns the name of the variable. Equivalent to $arrayAccess.arrayVar.name",
          "children": [
            {
              "type": "String",
              "name": "name"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The number of subscripts of this array access",
          "children": [
            {
              "type": "int",
              "name": "numSubscripts"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A view of the current arrayAccess without the last subscript, or undefined if this arrayAccess only has one subscript",
          "children": [
            {
              "type": "arrayAccess",
              "name": "parentAccess"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "expression of the array access subscript",
          "children": [
            {
              "type": "expression[]",
              "name": "subscript"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a 'decl' join point that represents the declaration associated with this expression, or undefined if there is none",
          "children": [
            {
              "type": "decl",
              "name": "decl"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "returns a cast joinpoint if this expression has an associated implicit cast, undefined otherwise",
          "children": [
            {
              "type": "cast",
              "name": "implicitCast"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the expression is part of an argument of a function call",
          "children": [
            {
              "type": "Boolean",
              "name": "isFunctionArgument"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "[read| write| readwrite]",
              "name": "use"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "vardecl",
              "name": "vardecl"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "attributes"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "selects"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "actions"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "ancestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with a dump of the AST representation starting from this node. This representation corresponds to the internal Java representation of the ClavaAst, where the node names correspond to Java classes. To get an equivalent representation with join point names, use the attribute 'dump'",
          "children": [
            {
              "type": "String",
              "name": "ast"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor AST name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "astAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, considering null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "astChild"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, considering null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "astChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String that uniquely identifies this node",
          "children": [
            {
              "type": "String",
              "name": "astId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if this node is a Java instance of the given name, which corresponds to a simple Java class name of an AST node. For an equivalent function for join point names, use 'instanceOf(joinPointName)'",
          "children": [
            {
              "type": "boolean",
              "name": "astIsInstance"
            },
            {
              "type": "String",
              "name": "className"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the Java class of this node, which is similar to the equivalent node in Clang AST",
          "children": [
            {
              "type": "String",
              "name": "astName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, considering null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "astNumChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "astParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The bit width of the type returned by this join point, in relation to the definitions of its Translation Unit, or undefined if there is no type or bitwidth defined, or if the join point is not in a TranslationUnit",
          "children": [
            {
              "type": "Integer",
              "name": "bitWidth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String list of the names of the join points that form a path from the root to this node",
          "children": [
            {
              "type": "String[]",
              "name": "chain"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the joinpoint chain",
          "children": [
            {
              "type": "joinpoint",
              "name": "chainAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "child"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "children"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the code represented by this node",
          "children": [
            {
              "type": "String",
              "name": "code"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "column"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the given node is a descendant of this node",
          "children": [
            {
              "type": "Boolean",
              "name": "contains"
            },
            {
              "type": "joinpoint",
              "name": "jp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "currentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "JS object associated with this node, containing parsed data of #pragma clava data when the node can be a target of pragmas. This is a special object, managed internally, and cannot be reassigned, to change its contents requires using key-value pairs. If the node can be the target of a pragma, the information stored in this object is persisted between rebuilds.",
          "children": [
            {
              "type": "Object",
              "name": "data"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the depth of this join point in the AST. If it is the root join point returns 0, if it is a child of the root node returns 1, etc.",
          "children": [
            {
              "type": "Integer",
              "name": "depth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves all descendants of the join point",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type, including the node itself",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendantsAndSelf"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endColumn"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endLine"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the file where the code of this node is located, if available",
          "children": [
            {
              "type": "String",
              "name": "filename"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the complete path to the file where the code of this node comes from",
          "children": [
            {
              "type": "String",
              "name": "filepath"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the first child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks in the descendants for the first node of the given type",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstJp"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use 'userField' instead]",
          "children": [
            {
              "type": "Object",
              "name": "getUserField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The value associated with the given property key",
          "children": [
            {
              "type": "Object",
              "name": "getValue"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use hasParent instead]",
          "children": [
            {
              "type": "boolean",
              "name": "hasAstParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the node has children, false otherwise",
          "children": [
            {
              "type": "Boolean",
              "name": "hasChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the given join point or AST node is the same (== test) as the current join point AST node",
          "children": [
            {
              "type": "Boolean",
              "name": "hasNode"
            },
            {
              "type": "Object",
              "name": "nodeOrJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this node has a parent",
          "children": [
            {
              "type": "boolean",
              "name": "hasParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point has a type",
          "children": [
            {
              "type": "Boolean",
              "name": "hasType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns comments that are not explicitly in the AST, but embedded in other nodes",
          "children": [
            {
              "type": "comment[]",
              "name": "inlineComments"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this is a Cilk node (i.e., cilk_spawn, cilk_sync or cilk_for)",
          "children": [
            {
              "type": "Boolean",
              "name": "isCilk"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is part of a system header file",
          "children": [
            {
              "type": "Boolean",
              "name": "isInSystemHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a header (e.g., if condition, for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a loop header (e.g., for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideLoopHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if any descendant or the node itself was defined as a macro",
          "children": [
            {
              "type": "Boolean",
              "name": "isMacro"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the full Java class name of the type of the Java field with the provided name",
          "children": [
            {
              "type": "String",
              "name": "javaFieldType"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'keys' instead, together with 'getValue'] The names of the Java fields of this node. Can be used as key of the attribute 'javaValue'",
          "children": [
            {
              "type": "String[]",
              "name": "javaFields"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'getValue' instead, with the names returned by the attribute 'keys'] Returns the value associated with the provided Java field name",
          "children": [
            {
              "type": "Object",
              "name": "javaValue"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use joinPointType instead (uppercase P)]",
          "children": [
            {
              "type": "String",
              "name": "joinpointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Id that is based on the position of the node in the code, and should remain stable between compilations (warning: only a few nodes - file, function, loop - currently support it)",
          "children": [
            {
              "type": "String",
              "name": "jpId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Java Class instance with the type of the given key",
          "children": [
            {
              "type": "Object",
              "name": "keyType"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A list of the properties currently supported by this node. Can be used as parameter of the attribute 'getValue'",
          "children": [
            {
              "type": "String[]",
              "name": "keys"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[HACK: .descendants(type) does not work in .lara files, after GraalVM update] Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "laraDescendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the last child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "lastChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that came before this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "leftJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "line"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A string with information about the file and code position of this node, if available",
          "children": [
            {
              "type": "String",
              "name": "location"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, ignoring null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "numChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope that is a parent of the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The pragmas associated with this node",
          "children": [
            {
              "type": "pragma[]",
              "name": "pragmas"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that comes after this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "rightJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the 'program' joinpoint",
          "children": [
            {
              "type": "joinpoint",
              "name": "root"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the nodes of the scope of the current join point. If this node has a body (e.g., loop, function) corresponds to the children of the body. Otherwise, returns an empty array",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "scopeNodes"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that came before this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsLeft"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that come after this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsRight"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Converts this join point to a statement, or returns undefined if it was not possible",
          "children": [
            {
              "type": "statement",
              "name": "stmt"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "type",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrives values that have been associated to nodes of the AST with 'setUserField'",
          "children": [
            {
              "type": "Object",
              "name": "userField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a String with the type of the join point",
          "children": [
            {
              "type": "String",
              "name": "joinPointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the current join point is an instance of the given type",
          "children": [
            {
              "type": "Boolean",
              "name": "instanceOf"
            },
            {
              "type": "String",
              "name": "name"
            }
          ]
        },
        {
          "type": "select",
          "clazz": "expression",
          "alias": "arrayVar",
          "tooltip": "varref to the variable of the array access"
        },
        {
          "type": "select",
          "clazz": "expression",
          "alias": "subscript",
          "tooltip": "expression of the array access subscript"
        },
        {
          "type": "select",
          "clazz": "vardecl",
          "alias": ""
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "insert"
            },
            {
              "type": "[before| after| replace]",
              "name": "position",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "def"
            },
            {
              "type": "String",
              "name": "attribute",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, but not of the nodes in its fields",
          "children": [
            {
              "type": "joinpoint",
              "name": "copy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Copies all enumerable own properties from the source object to the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataAssign"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Clears all properties from the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataClear"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, including the nodes in their fields (only the first level of field nodes, this function is not recursive)",
          "children": [
            {
              "type": "joinpoint",
              "name": "deepCopy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the node associated to this joinpoint from the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "detach"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point after this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point before this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Adds a message that will be printed to the user after weaving finishes. Identical messages are removed",
          "children": [
            {
              "type": "void",
              "name": "messageToUser"
            },
            {
              "type": "String",
              "name": "message",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the children of this node",
          "children": [
            {
              "type": "void",
              "name": "removeChildren"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this node with the given node",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of join points",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of strings",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWithStrings"
            },
            {
              "type": "String[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Setting data directly is not supported, this action just emits a warning and does nothing",
          "children": [
            {
              "type": "void",
              "name": "setData"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the first child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setFirstChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String[]",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the last child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setLastChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the type of a node, if it has a type",
          "children": [
            {
              "type": "void",
              "name": "setType"
            },
            {
              "type": "type",
              "name": "type",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Associates arbitrary values to nodes of the AST",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "String",
              "name": "fieldName",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a map",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "Map",
              "name": "fieldNameAndValue",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the value associated with the given property key",
          "children": [
            {
              "type": "joinpoint",
              "name": "setValue"
            },
            {
              "type": "String",
              "name": "key",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "suffix",
              "defaultValue": ""
            }
          ]
        }
      ]
    },
    {
      "type": "joinpoint",
      "name": "arrayType",
      "extends": "type",
      "children": [
        {
          "type": "attribute",
          "children": [
            {
              "type": "type",
              "name": "elementType"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Integer[]",
              "name": "arrayDims"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Integer",
              "name": "arraySize"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The bit width of this type in the Translation Unit of the given join point, or undefined if there is no bitwidth defined",
          "children": [
            {
              "type": "Integer",
              "name": "bitWidth"
            },
            {
              "type": "joinpoint",
              "name": "reference"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "constant"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Single-step desugar. Returns the type itself if it does not have sugar",
          "children": [
            {
              "type": "type",
              "name": "desugar"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Completely desugars the type",
          "children": [
            {
              "type": "type",
              "name": "desugarAll"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A tree representation of the fields of this type",
          "children": [
            {
              "type": "String",
              "name": "fieldTree"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "hasSugar"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "hasTemplateArgs"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isArray"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "True if this is a type declared with the 'auto' keyword",
          "children": [
            {
              "type": "Boolean",
              "name": "isAuto"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isBuiltin"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isPointer"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isTopLevel"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String",
              "name": "kind"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Ignores certain types (e.g., DecayedType)",
          "children": [
            {
              "type": "type",
              "name": "normalize"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "templateArgsStrings"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "type[]",
              "name": "templateArgsTypes"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Maps names of join point fields that represent type join points, to their respective values",
          "children": [
            {
              "type": "Map",
              "name": "typeFields"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "If the type encapsulates another type, returns the encapsulated type",
          "children": [
            {
              "type": "type",
              "name": "unwrap"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "attributes"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "selects"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "actions"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "ancestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with a dump of the AST representation starting from this node. This representation corresponds to the internal Java representation of the ClavaAst, where the node names correspond to Java classes. To get an equivalent representation with join point names, use the attribute 'dump'",
          "children": [
            {
              "type": "String",
              "name": "ast"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor AST name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "astAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, considering null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "astChild"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, considering null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "astChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String that uniquely identifies this node",
          "children": [
            {
              "type": "String",
              "name": "astId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if this node is a Java instance of the given name, which corresponds to a simple Java class name of an AST node. For an equivalent function for join point names, use 'instanceOf(joinPointName)'",
          "children": [
            {
              "type": "boolean",
              "name": "astIsInstance"
            },
            {
              "type": "String",
              "name": "className"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the Java class of this node, which is similar to the equivalent node in Clang AST",
          "children": [
            {
              "type": "String",
              "name": "astName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, considering null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "astNumChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "astParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The bit width of the type returned by this join point, in relation to the definitions of its Translation Unit, or undefined if there is no type or bitwidth defined, or if the join point is not in a TranslationUnit",
          "children": [
            {
              "type": "Integer",
              "name": "bitWidth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String list of the names of the join points that form a path from the root to this node",
          "children": [
            {
              "type": "String[]",
              "name": "chain"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the joinpoint chain",
          "children": [
            {
              "type": "joinpoint",
              "name": "chainAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "child"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "children"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the code represented by this node",
          "children": [
            {
              "type": "String",
              "name": "code"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "column"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the given node is a descendant of this node",
          "children": [
            {
              "type": "Boolean",
              "name": "contains"
            },
            {
              "type": "joinpoint",
              "name": "jp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "currentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "JS object associated with this node, containing parsed data of #pragma clava data when the node can be a target of pragmas. This is a special object, managed internally, and cannot be reassigned, to change its contents requires using key-value pairs. If the node can be the target of a pragma, the information stored in this object is persisted between rebuilds.",
          "children": [
            {
              "type": "Object",
              "name": "data"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the depth of this join point in the AST. If it is the root join point returns 0, if it is a child of the root node returns 1, etc.",
          "children": [
            {
              "type": "Integer",
              "name": "depth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves all descendants of the join point",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type, including the node itself",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendantsAndSelf"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endColumn"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endLine"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the file where the code of this node is located, if available",
          "children": [
            {
              "type": "String",
              "name": "filename"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the complete path to the file where the code of this node comes from",
          "children": [
            {
              "type": "String",
              "name": "filepath"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the first child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks in the descendants for the first node of the given type",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstJp"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use 'userField' instead]",
          "children": [
            {
              "type": "Object",
              "name": "getUserField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The value associated with the given property key",
          "children": [
            {
              "type": "Object",
              "name": "getValue"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use hasParent instead]",
          "children": [
            {
              "type": "boolean",
              "name": "hasAstParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the node has children, false otherwise",
          "children": [
            {
              "type": "Boolean",
              "name": "hasChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the given join point or AST node is the same (== test) as the current join point AST node",
          "children": [
            {
              "type": "Boolean",
              "name": "hasNode"
            },
            {
              "type": "Object",
              "name": "nodeOrJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this node has a parent",
          "children": [
            {
              "type": "boolean",
              "name": "hasParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point has a type",
          "children": [
            {
              "type": "Boolean",
              "name": "hasType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns comments that are not explicitly in the AST, but embedded in other nodes",
          "children": [
            {
              "type": "comment[]",
              "name": "inlineComments"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this is a Cilk node (i.e., cilk_spawn, cilk_sync or cilk_for)",
          "children": [
            {
              "type": "Boolean",
              "name": "isCilk"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is part of a system header file",
          "children": [
            {
              "type": "Boolean",
              "name": "isInSystemHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a header (e.g., if condition, for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a loop header (e.g., for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideLoopHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if any descendant or the node itself was defined as a macro",
          "children": [
            {
              "type": "Boolean",
              "name": "isMacro"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the full Java class name of the type of the Java field with the provided name",
          "children": [
            {
              "type": "String",
              "name": "javaFieldType"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'keys' instead, together with 'getValue'] The names of the Java fields of this node. Can be used as key of the attribute 'javaValue'",
          "children": [
            {
              "type": "String[]",
              "name": "javaFields"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'getValue' instead, with the names returned by the attribute 'keys'] Returns the value associated with the provided Java field name",
          "children": [
            {
              "type": "Object",
              "name": "javaValue"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use joinPointType instead (uppercase P)]",
          "children": [
            {
              "type": "String",
              "name": "joinpointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Id that is based on the position of the node in the code, and should remain stable between compilations (warning: only a few nodes - file, function, loop - currently support it)",
          "children": [
            {
              "type": "String",
              "name": "jpId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Java Class instance with the type of the given key",
          "children": [
            {
              "type": "Object",
              "name": "keyType"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A list of the properties currently supported by this node. Can be used as parameter of the attribute 'getValue'",
          "children": [
            {
              "type": "String[]",
              "name": "keys"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[HACK: .descendants(type) does not work in .lara files, after GraalVM update] Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "laraDescendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the last child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "lastChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that came before this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "leftJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "line"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A string with information about the file and code position of this node, if available",
          "children": [
            {
              "type": "String",
              "name": "location"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, ignoring null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "numChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope that is a parent of the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The pragmas associated with this node",
          "children": [
            {
              "type": "pragma[]",
              "name": "pragmas"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that comes after this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "rightJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the 'program' joinpoint",
          "children": [
            {
              "type": "joinpoint",
              "name": "root"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the nodes of the scope of the current join point. If this node has a body (e.g., loop, function) corresponds to the children of the body. Otherwise, returns an empty array",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "scopeNodes"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that came before this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsLeft"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that come after this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsRight"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Converts this join point to a statement, or returns undefined if it was not possible",
          "children": [
            {
              "type": "statement",
              "name": "stmt"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "type",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrives values that have been associated to nodes of the AST with 'setUserField'",
          "children": [
            {
              "type": "Object",
              "name": "userField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a String with the type of the join point",
          "children": [
            {
              "type": "String",
              "name": "joinPointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the current join point is an instance of the given type",
          "children": [
            {
              "type": "Boolean",
              "name": "instanceOf"
            },
            {
              "type": "String",
              "name": "name"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the element type of the array",
          "children": [
            {
              "type": "void",
              "name": "setElementType"
            },
            {
              "type": "type",
              "name": "arrayElementType",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Returns a copy of this type with the qualifier const",
          "children": [
            {
              "type": "type",
              "name": "asConst"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the desugared type of this type",
          "children": [
            {
              "type": "void",
              "name": "setDesugar"
            },
            {
              "type": "type",
              "name": "desugaredType",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the template argument types of a template type",
          "children": [
            {
              "type": "void",
              "name": "setTemplateArgsTypes"
            },
            {
              "type": "type[]",
              "name": "templateArgTypes",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets a single template argument type of a template type",
          "children": [
            {
              "type": "void",
              "name": "setTemplateArgsTypes"
            },
            {
              "type": "Integer",
              "name": "index",
              "defaultValue": ""
            },
            {
              "type": "type",
              "name": "templateArgType",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Changes a single occurence of a type field that has the current value with new value. Returns true if there was a change",
          "children": [
            {
              "type": "boolean",
              "name": "setTypeFieldByValueRecursive"
            },
            {
              "type": "Object",
              "name": "currentValue",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "newValue",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces an underlying type of this instance with new type, if it matches the old type. Returns true if there were changes",
          "children": [
            {
              "type": "type",
              "name": "setUnderlyingType"
            },
            {
              "type": "type",
              "name": "oldValue",
              "defaultValue": ""
            },
            {
              "type": "type",
              "name": "newValue",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "insert"
            },
            {
              "type": "[before| after| replace]",
              "name": "position",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "def"
            },
            {
              "type": "String",
              "name": "attribute",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, but not of the nodes in its fields",
          "children": [
            {
              "type": "joinpoint",
              "name": "copy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Copies all enumerable own properties from the source object to the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataAssign"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Clears all properties from the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataClear"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, including the nodes in their fields (only the first level of field nodes, this function is not recursive)",
          "children": [
            {
              "type": "joinpoint",
              "name": "deepCopy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the node associated to this joinpoint from the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "detach"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point after this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point before this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Adds a message that will be printed to the user after weaving finishes. Identical messages are removed",
          "children": [
            {
              "type": "void",
              "name": "messageToUser"
            },
            {
              "type": "String",
              "name": "message",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the children of this node",
          "children": [
            {
              "type": "void",
              "name": "removeChildren"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this node with the given node",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of join points",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of strings",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWithStrings"
            },
            {
              "type": "String[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Setting data directly is not supported, this action just emits a warning and does nothing",
          "children": [
            {
              "type": "void",
              "name": "setData"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the first child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setFirstChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String[]",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the last child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setLastChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the type of a node, if it has a type",
          "children": [
            {
              "type": "void",
              "name": "setType"
            },
            {
              "type": "type",
              "name": "type",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Associates arbitrary values to nodes of the AST",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "String",
              "name": "fieldName",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a map",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "Map",
              "name": "fieldNameAndValue",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the value associated with the given property key",
          "children": [
            {
              "type": "joinpoint",
              "name": "setValue"
            },
            {
              "type": "String",
              "name": "key",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "suffix",
              "defaultValue": ""
            }
          ]
        }
      ]
    },
    {
      "type": "joinpoint",
      "name": "attribute",
      "extends": "joinpoint",
      "children": [
        {
          "type": "attribute",
          "children": [
            {
              "type": "String",
              "name": "kind"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "attributes"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "selects"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "actions"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "ancestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with a dump of the AST representation starting from this node. This representation corresponds to the internal Java representation of the ClavaAst, where the node names correspond to Java classes. To get an equivalent representation with join point names, use the attribute 'dump'",
          "children": [
            {
              "type": "String",
              "name": "ast"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor AST name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "astAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, considering null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "astChild"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, considering null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "astChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String that uniquely identifies this node",
          "children": [
            {
              "type": "String",
              "name": "astId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if this node is a Java instance of the given name, which corresponds to a simple Java class name of an AST node. For an equivalent function for join point names, use 'instanceOf(joinPointName)'",
          "children": [
            {
              "type": "boolean",
              "name": "astIsInstance"
            },
            {
              "type": "String",
              "name": "className"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the Java class of this node, which is similar to the equivalent node in Clang AST",
          "children": [
            {
              "type": "String",
              "name": "astName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, considering null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "astNumChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "astParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The bit width of the type returned by this join point, in relation to the definitions of its Translation Unit, or undefined if there is no type or bitwidth defined, or if the join point is not in a TranslationUnit",
          "children": [
            {
              "type": "Integer",
              "name": "bitWidth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String list of the names of the join points that form a path from the root to this node",
          "children": [
            {
              "type": "String[]",
              "name": "chain"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the joinpoint chain",
          "children": [
            {
              "type": "joinpoint",
              "name": "chainAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "child"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "children"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the code represented by this node",
          "children": [
            {
              "type": "String",
              "name": "code"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "column"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the given node is a descendant of this node",
          "children": [
            {
              "type": "Boolean",
              "name": "contains"
            },
            {
              "type": "joinpoint",
              "name": "jp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "currentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "JS object associated with this node, containing parsed data of #pragma clava data when the node can be a target of pragmas. This is a special object, managed internally, and cannot be reassigned, to change its contents requires using key-value pairs. If the node can be the target of a pragma, the information stored in this object is persisted between rebuilds.",
          "children": [
            {
              "type": "Object",
              "name": "data"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the depth of this join point in the AST. If it is the root join point returns 0, if it is a child of the root node returns 1, etc.",
          "children": [
            {
              "type": "Integer",
              "name": "depth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves all descendants of the join point",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type, including the node itself",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendantsAndSelf"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endColumn"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endLine"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the file where the code of this node is located, if available",
          "children": [
            {
              "type": "String",
              "name": "filename"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the complete path to the file where the code of this node comes from",
          "children": [
            {
              "type": "String",
              "name": "filepath"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the first child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks in the descendants for the first node of the given type",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstJp"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use 'userField' instead]",
          "children": [
            {
              "type": "Object",
              "name": "getUserField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The value associated with the given property key",
          "children": [
            {
              "type": "Object",
              "name": "getValue"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use hasParent instead]",
          "children": [
            {
              "type": "boolean",
              "name": "hasAstParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the node has children, false otherwise",
          "children": [
            {
              "type": "Boolean",
              "name": "hasChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the given join point or AST node is the same (== test) as the current join point AST node",
          "children": [
            {
              "type": "Boolean",
              "name": "hasNode"
            },
            {
              "type": "Object",
              "name": "nodeOrJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this node has a parent",
          "children": [
            {
              "type": "boolean",
              "name": "hasParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point has a type",
          "children": [
            {
              "type": "Boolean",
              "name": "hasType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns comments that are not explicitly in the AST, but embedded in other nodes",
          "children": [
            {
              "type": "comment[]",
              "name": "inlineComments"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this is a Cilk node (i.e., cilk_spawn, cilk_sync or cilk_for)",
          "children": [
            {
              "type": "Boolean",
              "name": "isCilk"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is part of a system header file",
          "children": [
            {
              "type": "Boolean",
              "name": "isInSystemHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a header (e.g., if condition, for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a loop header (e.g., for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideLoopHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if any descendant or the node itself was defined as a macro",
          "children": [
            {
              "type": "Boolean",
              "name": "isMacro"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the full Java class name of the type of the Java field with the provided name",
          "children": [
            {
              "type": "String",
              "name": "javaFieldType"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'keys' instead, together with 'getValue'] The names of the Java fields of this node. Can be used as key of the attribute 'javaValue'",
          "children": [
            {
              "type": "String[]",
              "name": "javaFields"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'getValue' instead, with the names returned by the attribute 'keys'] Returns the value associated with the provided Java field name",
          "children": [
            {
              "type": "Object",
              "name": "javaValue"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use joinPointType instead (uppercase P)]",
          "children": [
            {
              "type": "String",
              "name": "joinpointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Id that is based on the position of the node in the code, and should remain stable between compilations (warning: only a few nodes - file, function, loop - currently support it)",
          "children": [
            {
              "type": "String",
              "name": "jpId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Java Class instance with the type of the given key",
          "children": [
            {
              "type": "Object",
              "name": "keyType"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A list of the properties currently supported by this node. Can be used as parameter of the attribute 'getValue'",
          "children": [
            {
              "type": "String[]",
              "name": "keys"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[HACK: .descendants(type) does not work in .lara files, after GraalVM update] Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "laraDescendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the last child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "lastChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that came before this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "leftJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "line"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A string with information about the file and code position of this node, if available",
          "children": [
            {
              "type": "String",
              "name": "location"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, ignoring null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "numChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope that is a parent of the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The pragmas associated with this node",
          "children": [
            {
              "type": "pragma[]",
              "name": "pragmas"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that comes after this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "rightJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the 'program' joinpoint",
          "children": [
            {
              "type": "joinpoint",
              "name": "root"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the nodes of the scope of the current join point. If this node has a body (e.g., loop, function) corresponds to the children of the body. Otherwise, returns an empty array",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "scopeNodes"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that came before this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsLeft"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that come after this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsRight"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Converts this join point to a statement, or returns undefined if it was not possible",
          "children": [
            {
              "type": "statement",
              "name": "stmt"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "type",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrives values that have been associated to nodes of the AST with 'setUserField'",
          "children": [
            {
              "type": "Object",
              "name": "userField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a String with the type of the join point",
          "children": [
            {
              "type": "String",
              "name": "joinPointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the current join point is an instance of the given type",
          "children": [
            {
              "type": "Boolean",
              "name": "instanceOf"
            },
            {
              "type": "String",
              "name": "name"
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "insert"
            },
            {
              "type": "[before| after| replace]",
              "name": "position",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "def"
            },
            {
              "type": "String",
              "name": "attribute",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, but not of the nodes in its fields",
          "children": [
            {
              "type": "joinpoint",
              "name": "copy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Copies all enumerable own properties from the source object to the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataAssign"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Clears all properties from the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataClear"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, including the nodes in their fields (only the first level of field nodes, this function is not recursive)",
          "children": [
            {
              "type": "joinpoint",
              "name": "deepCopy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the node associated to this joinpoint from the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "detach"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point after this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point before this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Adds a message that will be printed to the user after weaving finishes. Identical messages are removed",
          "children": [
            {
              "type": "void",
              "name": "messageToUser"
            },
            {
              "type": "String",
              "name": "message",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the children of this node",
          "children": [
            {
              "type": "void",
              "name": "removeChildren"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this node with the given node",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of join points",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of strings",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWithStrings"
            },
            {
              "type": "String[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Setting data directly is not supported, this action just emits a warning and does nothing",
          "children": [
            {
              "type": "void",
              "name": "setData"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the first child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setFirstChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String[]",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the last child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setLastChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the type of a node, if it has a type",
          "children": [
            {
              "type": "void",
              "name": "setType"
            },
            {
              "type": "type",
              "name": "type",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Associates arbitrary values to nodes of the AST",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "String",
              "name": "fieldName",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a map",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "Map",
              "name": "fieldNameAndValue",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the value associated with the given property key",
          "children": [
            {
              "type": "joinpoint",
              "name": "setValue"
            },
            {
              "type": "String",
              "name": "key",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "suffix",
              "defaultValue": ""
            }
          ]
        }
      ]
    },
    {
      "type": "joinpoint",
      "name": "binaryOp",
      "extends": "op",
      "children": [
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isAssignment"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "expression",
              "name": "left"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "expression",
              "name": "right"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isBitwise"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The kind of the operator. If it is a binary operator, can be one of: ptr_mem_d, ptr_mem_i, mul, div, rem, add, sub, shl, shr, cmp, lt, gt, le, ge, eq, ne, and, xor, or, l_and, l_or, assign, mul_assign, div_assign, rem_assign, add_assign, sub_assign, shl_assign, shr_assign, and_assign, xor_assign, or_assign, comma. If it is a unary operator, can be one of: post_inc, post_dec, pre_inc, pre_dec, addr_of, deref, plus, minus, not, l_not, real, imag, extension, cowait.",
          "children": [
            {
              "type": "String",
              "name": "kind"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String",
              "name": "operator"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a 'decl' join point that represents the declaration associated with this expression, or undefined if there is none",
          "children": [
            {
              "type": "decl",
              "name": "decl"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "returns a cast joinpoint if this expression has an associated implicit cast, undefined otherwise",
          "children": [
            {
              "type": "cast",
              "name": "implicitCast"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the expression is part of an argument of a function call",
          "children": [
            {
              "type": "Boolean",
              "name": "isFunctionArgument"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "[read| write| readwrite]",
              "name": "use"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "vardecl",
              "name": "vardecl"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "attributes"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "selects"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "actions"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "ancestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with a dump of the AST representation starting from this node. This representation corresponds to the internal Java representation of the ClavaAst, where the node names correspond to Java classes. To get an equivalent representation with join point names, use the attribute 'dump'",
          "children": [
            {
              "type": "String",
              "name": "ast"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor AST name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "astAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, considering null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "astChild"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, considering null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "astChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String that uniquely identifies this node",
          "children": [
            {
              "type": "String",
              "name": "astId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if this node is a Java instance of the given name, which corresponds to a simple Java class name of an AST node. For an equivalent function for join point names, use 'instanceOf(joinPointName)'",
          "children": [
            {
              "type": "boolean",
              "name": "astIsInstance"
            },
            {
              "type": "String",
              "name": "className"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the Java class of this node, which is similar to the equivalent node in Clang AST",
          "children": [
            {
              "type": "String",
              "name": "astName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, considering null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "astNumChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "astParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The bit width of the type returned by this join point, in relation to the definitions of its Translation Unit, or undefined if there is no type or bitwidth defined, or if the join point is not in a TranslationUnit",
          "children": [
            {
              "type": "Integer",
              "name": "bitWidth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String list of the names of the join points that form a path from the root to this node",
          "children": [
            {
              "type": "String[]",
              "name": "chain"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the joinpoint chain",
          "children": [
            {
              "type": "joinpoint",
              "name": "chainAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "child"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "children"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the code represented by this node",
          "children": [
            {
              "type": "String",
              "name": "code"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "column"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the given node is a descendant of this node",
          "children": [
            {
              "type": "Boolean",
              "name": "contains"
            },
            {
              "type": "joinpoint",
              "name": "jp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "currentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "JS object associated with this node, containing parsed data of #pragma clava data when the node can be a target of pragmas. This is a special object, managed internally, and cannot be reassigned, to change its contents requires using key-value pairs. If the node can be the target of a pragma, the information stored in this object is persisted between rebuilds.",
          "children": [
            {
              "type": "Object",
              "name": "data"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the depth of this join point in the AST. If it is the root join point returns 0, if it is a child of the root node returns 1, etc.",
          "children": [
            {
              "type": "Integer",
              "name": "depth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves all descendants of the join point",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type, including the node itself",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendantsAndSelf"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endColumn"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endLine"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the file where the code of this node is located, if available",
          "children": [
            {
              "type": "String",
              "name": "filename"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the complete path to the file where the code of this node comes from",
          "children": [
            {
              "type": "String",
              "name": "filepath"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the first child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks in the descendants for the first node of the given type",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstJp"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use 'userField' instead]",
          "children": [
            {
              "type": "Object",
              "name": "getUserField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The value associated with the given property key",
          "children": [
            {
              "type": "Object",
              "name": "getValue"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use hasParent instead]",
          "children": [
            {
              "type": "boolean",
              "name": "hasAstParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the node has children, false otherwise",
          "children": [
            {
              "type": "Boolean",
              "name": "hasChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the given join point or AST node is the same (== test) as the current join point AST node",
          "children": [
            {
              "type": "Boolean",
              "name": "hasNode"
            },
            {
              "type": "Object",
              "name": "nodeOrJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this node has a parent",
          "children": [
            {
              "type": "boolean",
              "name": "hasParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point has a type",
          "children": [
            {
              "type": "Boolean",
              "name": "hasType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns comments that are not explicitly in the AST, but embedded in other nodes",
          "children": [
            {
              "type": "comment[]",
              "name": "inlineComments"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this is a Cilk node (i.e., cilk_spawn, cilk_sync or cilk_for)",
          "children": [
            {
              "type": "Boolean",
              "name": "isCilk"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is part of a system header file",
          "children": [
            {
              "type": "Boolean",
              "name": "isInSystemHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a header (e.g., if condition, for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a loop header (e.g., for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideLoopHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if any descendant or the node itself was defined as a macro",
          "children": [
            {
              "type": "Boolean",
              "name": "isMacro"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the full Java class name of the type of the Java field with the provided name",
          "children": [
            {
              "type": "String",
              "name": "javaFieldType"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'keys' instead, together with 'getValue'] The names of the Java fields of this node. Can be used as key of the attribute 'javaValue'",
          "children": [
            {
              "type": "String[]",
              "name": "javaFields"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'getValue' instead, with the names returned by the attribute 'keys'] Returns the value associated with the provided Java field name",
          "children": [
            {
              "type": "Object",
              "name": "javaValue"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use joinPointType instead (uppercase P)]",
          "children": [
            {
              "type": "String",
              "name": "joinpointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Id that is based on the position of the node in the code, and should remain stable between compilations (warning: only a few nodes - file, function, loop - currently support it)",
          "children": [
            {
              "type": "String",
              "name": "jpId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Java Class instance with the type of the given key",
          "children": [
            {
              "type": "Object",
              "name": "keyType"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A list of the properties currently supported by this node. Can be used as parameter of the attribute 'getValue'",
          "children": [
            {
              "type": "String[]",
              "name": "keys"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[HACK: .descendants(type) does not work in .lara files, after GraalVM update] Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "laraDescendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the last child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "lastChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that came before this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "leftJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "line"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A string with information about the file and code position of this node, if available",
          "children": [
            {
              "type": "String",
              "name": "location"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, ignoring null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "numChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope that is a parent of the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The pragmas associated with this node",
          "children": [
            {
              "type": "pragma[]",
              "name": "pragmas"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that comes after this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "rightJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the 'program' joinpoint",
          "children": [
            {
              "type": "joinpoint",
              "name": "root"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the nodes of the scope of the current join point. If this node has a body (e.g., loop, function) corresponds to the children of the body. Otherwise, returns an empty array",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "scopeNodes"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that came before this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsLeft"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that come after this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsRight"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Converts this join point to a statement, or returns undefined if it was not possible",
          "children": [
            {
              "type": "statement",
              "name": "stmt"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "type",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrives values that have been associated to nodes of the AST with 'setUserField'",
          "children": [
            {
              "type": "Object",
              "name": "userField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a String with the type of the join point",
          "children": [
            {
              "type": "String",
              "name": "joinPointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the current join point is an instance of the given type",
          "children": [
            {
              "type": "Boolean",
              "name": "instanceOf"
            },
            {
              "type": "String",
              "name": "name"
            }
          ]
        },
        {
          "type": "select",
          "clazz": "expression",
          "alias": "left"
        },
        {
          "type": "select",
          "clazz": "expression",
          "alias": "right"
        },
        {
          "type": "select",
          "clazz": "vardecl",
          "alias": ""
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "setLeft"
            },
            {
              "type": "expression",
              "name": "left",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "setRight"
            },
            {
              "type": "expression",
              "name": "right",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "insert"
            },
            {
              "type": "[before| after| replace]",
              "name": "position",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "def"
            },
            {
              "type": "String",
              "name": "attribute",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, but not of the nodes in its fields",
          "children": [
            {
              "type": "joinpoint",
              "name": "copy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Copies all enumerable own properties from the source object to the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataAssign"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Clears all properties from the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataClear"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, including the nodes in their fields (only the first level of field nodes, this function is not recursive)",
          "children": [
            {
              "type": "joinpoint",
              "name": "deepCopy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the node associated to this joinpoint from the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "detach"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point after this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point before this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Adds a message that will be printed to the user after weaving finishes. Identical messages are removed",
          "children": [
            {
              "type": "void",
              "name": "messageToUser"
            },
            {
              "type": "String",
              "name": "message",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the children of this node",
          "children": [
            {
              "type": "void",
              "name": "removeChildren"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this node with the given node",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of join points",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of strings",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWithStrings"
            },
            {
              "type": "String[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Setting data directly is not supported, this action just emits a warning and does nothing",
          "children": [
            {
              "type": "void",
              "name": "setData"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the first child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setFirstChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String[]",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the last child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setLastChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the type of a node, if it has a type",
          "children": [
            {
              "type": "void",
              "name": "setType"
            },
            {
              "type": "type",
              "name": "type",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Associates arbitrary values to nodes of the AST",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "String",
              "name": "fieldName",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a map",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "Map",
              "name": "fieldNameAndValue",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the value associated with the given property key",
          "children": [
            {
              "type": "joinpoint",
              "name": "setValue"
            },
            {
              "type": "String",
              "name": "key",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "suffix",
              "defaultValue": ""
            }
          ]
        }
      ]
    },
    {
      "type": "joinpoint",
      "name": "body",
      "extends": "scope",
      "children": [
        {
          "type": "attribute",
          "tooltip": "Returns the descendant statements of this scope, excluding other scopes, loops, ifs and wrapper statements",
          "children": [
            {
              "type": "statement[]",
              "name": "allStmts"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "statement",
              "name": "firstStmt"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "statement",
              "name": "lastStmt"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the scope does not have curly braces",
          "children": [
            {
              "type": "Boolean",
              "name": "naked"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The number of statements in the scope, including the statements inside the declaration and bodies of structures such as ifs and loops, and not considering comments and pragmas",
          "children": [
            {
              "type": "Long",
              "name": "numStatements"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The number of statements in the scope, not considering comments and pragmas. If flat is true, does not consider the statements inside structures such as ifs and loops (e.g., a loop counts as one statement)",
          "children": [
            {
              "type": "Long",
              "name": "numStatements"
            },
            {
              "type": "Boolean",
              "name": "flat"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The statement that owns the scope (e.g., function, loop...)",
          "children": [
            {
              "type": "joinpoint",
              "name": "owner"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the direct (children) statements of this scope",
          "children": [
            {
              "type": "statement[]",
              "name": "stmts"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isFirst"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isLast"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "attributes"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "selects"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "actions"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "ancestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with a dump of the AST representation starting from this node. This representation corresponds to the internal Java representation of the ClavaAst, where the node names correspond to Java classes. To get an equivalent representation with join point names, use the attribute 'dump'",
          "children": [
            {
              "type": "String",
              "name": "ast"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor AST name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "astAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, considering null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "astChild"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, considering null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "astChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String that uniquely identifies this node",
          "children": [
            {
              "type": "String",
              "name": "astId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if this node is a Java instance of the given name, which corresponds to a simple Java class name of an AST node. For an equivalent function for join point names, use 'instanceOf(joinPointName)'",
          "children": [
            {
              "type": "boolean",
              "name": "astIsInstance"
            },
            {
              "type": "String",
              "name": "className"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the Java class of this node, which is similar to the equivalent node in Clang AST",
          "children": [
            {
              "type": "String",
              "name": "astName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, considering null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "astNumChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "astParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The bit width of the type returned by this join point, in relation to the definitions of its Translation Unit, or undefined if there is no type or bitwidth defined, or if the join point is not in a TranslationUnit",
          "children": [
            {
              "type": "Integer",
              "name": "bitWidth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String list of the names of the join points that form a path from the root to this node",
          "children": [
            {
              "type": "String[]",
              "name": "chain"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the joinpoint chain",
          "children": [
            {
              "type": "joinpoint",
              "name": "chainAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "child"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "children"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the code represented by this node",
          "children": [
            {
              "type": "String",
              "name": "code"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "column"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the given node is a descendant of this node",
          "children": [
            {
              "type": "Boolean",
              "name": "contains"
            },
            {
              "type": "joinpoint",
              "name": "jp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "currentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "JS object associated with this node, containing parsed data of #pragma clava data when the node can be a target of pragmas. This is a special object, managed internally, and cannot be reassigned, to change its contents requires using key-value pairs. If the node can be the target of a pragma, the information stored in this object is persisted between rebuilds.",
          "children": [
            {
              "type": "Object",
              "name": "data"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the depth of this join point in the AST. If it is the root join point returns 0, if it is a child of the root node returns 1, etc.",
          "children": [
            {
              "type": "Integer",
              "name": "depth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves all descendants of the join point",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type, including the node itself",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendantsAndSelf"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endColumn"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endLine"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the file where the code of this node is located, if available",
          "children": [
            {
              "type": "String",
              "name": "filename"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the complete path to the file where the code of this node comes from",
          "children": [
            {
              "type": "String",
              "name": "filepath"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the first child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks in the descendants for the first node of the given type",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstJp"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use 'userField' instead]",
          "children": [
            {
              "type": "Object",
              "name": "getUserField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The value associated with the given property key",
          "children": [
            {
              "type": "Object",
              "name": "getValue"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use hasParent instead]",
          "children": [
            {
              "type": "boolean",
              "name": "hasAstParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the node has children, false otherwise",
          "children": [
            {
              "type": "Boolean",
              "name": "hasChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the given join point or AST node is the same (== test) as the current join point AST node",
          "children": [
            {
              "type": "Boolean",
              "name": "hasNode"
            },
            {
              "type": "Object",
              "name": "nodeOrJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this node has a parent",
          "children": [
            {
              "type": "boolean",
              "name": "hasParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point has a type",
          "children": [
            {
              "type": "Boolean",
              "name": "hasType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns comments that are not explicitly in the AST, but embedded in other nodes",
          "children": [
            {
              "type": "comment[]",
              "name": "inlineComments"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this is a Cilk node (i.e., cilk_spawn, cilk_sync or cilk_for)",
          "children": [
            {
              "type": "Boolean",
              "name": "isCilk"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is part of a system header file",
          "children": [
            {
              "type": "Boolean",
              "name": "isInSystemHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a header (e.g., if condition, for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a loop header (e.g., for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideLoopHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if any descendant or the node itself was defined as a macro",
          "children": [
            {
              "type": "Boolean",
              "name": "isMacro"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the full Java class name of the type of the Java field with the provided name",
          "children": [
            {
              "type": "String",
              "name": "javaFieldType"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'keys' instead, together with 'getValue'] The names of the Java fields of this node. Can be used as key of the attribute 'javaValue'",
          "children": [
            {
              "type": "String[]",
              "name": "javaFields"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'getValue' instead, with the names returned by the attribute 'keys'] Returns the value associated with the provided Java field name",
          "children": [
            {
              "type": "Object",
              "name": "javaValue"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use joinPointType instead (uppercase P)]",
          "children": [
            {
              "type": "String",
              "name": "joinpointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Id that is based on the position of the node in the code, and should remain stable between compilations (warning: only a few nodes - file, function, loop - currently support it)",
          "children": [
            {
              "type": "String",
              "name": "jpId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Java Class instance with the type of the given key",
          "children": [
            {
              "type": "Object",
              "name": "keyType"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A list of the properties currently supported by this node. Can be used as parameter of the attribute 'getValue'",
          "children": [
            {
              "type": "String[]",
              "name": "keys"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[HACK: .descendants(type) does not work in .lara files, after GraalVM update] Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "laraDescendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the last child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "lastChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that came before this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "leftJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "line"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A string with information about the file and code position of this node, if available",
          "children": [
            {
              "type": "String",
              "name": "location"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, ignoring null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "numChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope that is a parent of the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The pragmas associated with this node",
          "children": [
            {
              "type": "pragma[]",
              "name": "pragmas"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that comes after this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "rightJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the 'program' joinpoint",
          "children": [
            {
              "type": "joinpoint",
              "name": "root"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the nodes of the scope of the current join point. If this node has a body (e.g., loop, function) corresponds to the children of the body. Otherwise, returns an empty array",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "scopeNodes"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that came before this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsLeft"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that come after this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsRight"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Converts this join point to a statement, or returns undefined if it was not possible",
          "children": [
            {
              "type": "statement",
              "name": "stmt"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "type",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrives values that have been associated to nodes of the AST with 'setUserField'",
          "children": [
            {
              "type": "Object",
              "name": "userField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a String with the type of the join point",
          "children": [
            {
              "type": "String",
              "name": "joinPointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the current join point is an instance of the given type",
          "children": [
            {
              "type": "Boolean",
              "name": "instanceOf"
            },
            {
              "type": "String",
              "name": "name"
            }
          ]
        },
        {
          "type": "select",
          "clazz": "statement",
          "alias": "stmt"
        },
        {
          "type": "select",
          "clazz": "statement",
          "alias": "childStmt"
        },
        {
          "type": "select",
          "clazz": "scope",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "if",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "loop",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "pragma",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "marker",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "tag",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "omp",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "comment",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "returnStmt",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "cilkFor",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "cilkSync",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "expression",
          "alias": "expr"
        },
        {
          "type": "select",
          "clazz": "expression",
          "alias": "childExpr"
        },
        {
          "type": "select",
          "clazz": "call",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "call",
          "alias": "stmtCall"
        },
        {
          "type": "select",
          "clazz": "memberCall",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "memberAccess",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "arrayAccess",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "vardecl",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "varref",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "op",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "binaryOp",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "unaryOp",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "newExpr",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "deleteExpr",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "cilkSpawn",
          "alias": ""
        },
        {
          "type": "action",
          "tooltip": "Adds a new local variable to this scope",
          "children": [
            {
              "type": "joinpoint",
              "name": "addLocal"
            },
            {
              "type": "String",
              "name": "name",
              "defaultValue": ""
            },
            {
              "type": "joinpoint",
              "name": "type",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "initValue",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which does not initialize the local variable",
          "children": [
            {
              "type": "joinpoint",
              "name": "addLocal"
            },
            {
              "type": "String",
              "name": "name",
              "defaultValue": ""
            },
            {
              "type": "joinpoint",
              "name": "type",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "CFG tester",
          "children": [
            {
              "type": "String",
              "name": "cfg"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Clears the contents of this scope (untested)",
          "children": [
            {
              "type": "void",
              "name": "clear"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "DFG tester",
          "children": [
            {
              "type": "String",
              "name": "dfg"
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBegin"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBegin"
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertEnd"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertEnd"
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the joinpoint before the return points of the scope (return statements and implicitly, at the end of the scope). Returns the last inserted node",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertReturn"
            },
            {
              "type": "joinpoint",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the joinpoint before the return points of the scope (return statements and implicitly, at the end of the scope). Returns the last inserted node",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertReturn"
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the 'naked' status of a scope (a scope is naked if it does not have curly braces)",
          "children": [
            {
              "type": "void",
              "name": "setNaked"
            },
            {
              "type": "Boolean",
              "name": "isNaked",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "insert"
            },
            {
              "type": "[before| after| replace]",
              "name": "position",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "def"
            },
            {
              "type": "String",
              "name": "attribute",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, but not of the nodes in its fields",
          "children": [
            {
              "type": "joinpoint",
              "name": "copy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Copies all enumerable own properties from the source object to the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataAssign"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Clears all properties from the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataClear"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, including the nodes in their fields (only the first level of field nodes, this function is not recursive)",
          "children": [
            {
              "type": "joinpoint",
              "name": "deepCopy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the node associated to this joinpoint from the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "detach"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point after this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point before this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Adds a message that will be printed to the user after weaving finishes. Identical messages are removed",
          "children": [
            {
              "type": "void",
              "name": "messageToUser"
            },
            {
              "type": "String",
              "name": "message",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the children of this node",
          "children": [
            {
              "type": "void",
              "name": "removeChildren"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this node with the given node",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of join points",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of strings",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWithStrings"
            },
            {
              "type": "String[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Setting data directly is not supported, this action just emits a warning and does nothing",
          "children": [
            {
              "type": "void",
              "name": "setData"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the first child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setFirstChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String[]",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the last child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setLastChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the type of a node, if it has a type",
          "children": [
            {
              "type": "void",
              "name": "setType"
            },
            {
              "type": "type",
              "name": "type",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Associates arbitrary values to nodes of the AST",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "String",
              "name": "fieldName",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a map",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "Map",
              "name": "fieldNameAndValue",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the value associated with the given property key",
          "children": [
            {
              "type": "joinpoint",
              "name": "setValue"
            },
            {
              "type": "String",
              "name": "key",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "suffix",
              "defaultValue": ""
            }
          ]
        }
      ]
    },
    {
      "type": "joinpoint",
      "name": "boolLiteral",
      "extends": "literal",
      "children": [
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "value"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a 'decl' join point that represents the declaration associated with this expression, or undefined if there is none",
          "children": [
            {
              "type": "decl",
              "name": "decl"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "returns a cast joinpoint if this expression has an associated implicit cast, undefined otherwise",
          "children": [
            {
              "type": "cast",
              "name": "implicitCast"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the expression is part of an argument of a function call",
          "children": [
            {
              "type": "Boolean",
              "name": "isFunctionArgument"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "[read| write| readwrite]",
              "name": "use"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "vardecl",
              "name": "vardecl"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "attributes"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "selects"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "actions"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "ancestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with a dump of the AST representation starting from this node. This representation corresponds to the internal Java representation of the ClavaAst, where the node names correspond to Java classes. To get an equivalent representation with join point names, use the attribute 'dump'",
          "children": [
            {
              "type": "String",
              "name": "ast"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor AST name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "astAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, considering null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "astChild"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, considering null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "astChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String that uniquely identifies this node",
          "children": [
            {
              "type": "String",
              "name": "astId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if this node is a Java instance of the given name, which corresponds to a simple Java class name of an AST node. For an equivalent function for join point names, use 'instanceOf(joinPointName)'",
          "children": [
            {
              "type": "boolean",
              "name": "astIsInstance"
            },
            {
              "type": "String",
              "name": "className"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the Java class of this node, which is similar to the equivalent node in Clang AST",
          "children": [
            {
              "type": "String",
              "name": "astName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, considering null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "astNumChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "astParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The bit width of the type returned by this join point, in relation to the definitions of its Translation Unit, or undefined if there is no type or bitwidth defined, or if the join point is not in a TranslationUnit",
          "children": [
            {
              "type": "Integer",
              "name": "bitWidth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String list of the names of the join points that form a path from the root to this node",
          "children": [
            {
              "type": "String[]",
              "name": "chain"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the joinpoint chain",
          "children": [
            {
              "type": "joinpoint",
              "name": "chainAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "child"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "children"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the code represented by this node",
          "children": [
            {
              "type": "String",
              "name": "code"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "column"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the given node is a descendant of this node",
          "children": [
            {
              "type": "Boolean",
              "name": "contains"
            },
            {
              "type": "joinpoint",
              "name": "jp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "currentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "JS object associated with this node, containing parsed data of #pragma clava data when the node can be a target of pragmas. This is a special object, managed internally, and cannot be reassigned, to change its contents requires using key-value pairs. If the node can be the target of a pragma, the information stored in this object is persisted between rebuilds.",
          "children": [
            {
              "type": "Object",
              "name": "data"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the depth of this join point in the AST. If it is the root join point returns 0, if it is a child of the root node returns 1, etc.",
          "children": [
            {
              "type": "Integer",
              "name": "depth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves all descendants of the join point",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type, including the node itself",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendantsAndSelf"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endColumn"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endLine"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the file where the code of this node is located, if available",
          "children": [
            {
              "type": "String",
              "name": "filename"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the complete path to the file where the code of this node comes from",
          "children": [
            {
              "type": "String",
              "name": "filepath"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the first child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks in the descendants for the first node of the given type",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstJp"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use 'userField' instead]",
          "children": [
            {
              "type": "Object",
              "name": "getUserField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The value associated with the given property key",
          "children": [
            {
              "type": "Object",
              "name": "getValue"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use hasParent instead]",
          "children": [
            {
              "type": "boolean",
              "name": "hasAstParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the node has children, false otherwise",
          "children": [
            {
              "type": "Boolean",
              "name": "hasChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the given join point or AST node is the same (== test) as the current join point AST node",
          "children": [
            {
              "type": "Boolean",
              "name": "hasNode"
            },
            {
              "type": "Object",
              "name": "nodeOrJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this node has a parent",
          "children": [
            {
              "type": "boolean",
              "name": "hasParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point has a type",
          "children": [
            {
              "type": "Boolean",
              "name": "hasType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns comments that are not explicitly in the AST, but embedded in other nodes",
          "children": [
            {
              "type": "comment[]",
              "name": "inlineComments"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this is a Cilk node (i.e., cilk_spawn, cilk_sync or cilk_for)",
          "children": [
            {
              "type": "Boolean",
              "name": "isCilk"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is part of a system header file",
          "children": [
            {
              "type": "Boolean",
              "name": "isInSystemHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a header (e.g., if condition, for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a loop header (e.g., for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideLoopHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if any descendant or the node itself was defined as a macro",
          "children": [
            {
              "type": "Boolean",
              "name": "isMacro"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the full Java class name of the type of the Java field with the provided name",
          "children": [
            {
              "type": "String",
              "name": "javaFieldType"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'keys' instead, together with 'getValue'] The names of the Java fields of this node. Can be used as key of the attribute 'javaValue'",
          "children": [
            {
              "type": "String[]",
              "name": "javaFields"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'getValue' instead, with the names returned by the attribute 'keys'] Returns the value associated with the provided Java field name",
          "children": [
            {
              "type": "Object",
              "name": "javaValue"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use joinPointType instead (uppercase P)]",
          "children": [
            {
              "type": "String",
              "name": "joinpointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Id that is based on the position of the node in the code, and should remain stable between compilations (warning: only a few nodes - file, function, loop - currently support it)",
          "children": [
            {
              "type": "String",
              "name": "jpId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Java Class instance with the type of the given key",
          "children": [
            {
              "type": "Object",
              "name": "keyType"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A list of the properties currently supported by this node. Can be used as parameter of the attribute 'getValue'",
          "children": [
            {
              "type": "String[]",
              "name": "keys"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[HACK: .descendants(type) does not work in .lara files, after GraalVM update] Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "laraDescendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the last child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "lastChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that came before this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "leftJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "line"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A string with information about the file and code position of this node, if available",
          "children": [
            {
              "type": "String",
              "name": "location"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, ignoring null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "numChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope that is a parent of the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The pragmas associated with this node",
          "children": [
            {
              "type": "pragma[]",
              "name": "pragmas"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that comes after this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "rightJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the 'program' joinpoint",
          "children": [
            {
              "type": "joinpoint",
              "name": "root"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the nodes of the scope of the current join point. If this node has a body (e.g., loop, function) corresponds to the children of the body. Otherwise, returns an empty array",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "scopeNodes"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that came before this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsLeft"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that come after this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsRight"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Converts this join point to a statement, or returns undefined if it was not possible",
          "children": [
            {
              "type": "statement",
              "name": "stmt"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "type",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrives values that have been associated to nodes of the AST with 'setUserField'",
          "children": [
            {
              "type": "Object",
              "name": "userField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a String with the type of the join point",
          "children": [
            {
              "type": "String",
              "name": "joinPointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the current join point is an instance of the given type",
          "children": [
            {
              "type": "Boolean",
              "name": "instanceOf"
            },
            {
              "type": "String",
              "name": "name"
            }
          ]
        },
        {
          "type": "select",
          "clazz": "vardecl",
          "alias": ""
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "insert"
            },
            {
              "type": "[before| after| replace]",
              "name": "position",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "def"
            },
            {
              "type": "String",
              "name": "attribute",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, but not of the nodes in its fields",
          "children": [
            {
              "type": "joinpoint",
              "name": "copy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Copies all enumerable own properties from the source object to the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataAssign"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Clears all properties from the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataClear"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, including the nodes in their fields (only the first level of field nodes, this function is not recursive)",
          "children": [
            {
              "type": "joinpoint",
              "name": "deepCopy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the node associated to this joinpoint from the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "detach"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point after this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point before this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Adds a message that will be printed to the user after weaving finishes. Identical messages are removed",
          "children": [
            {
              "type": "void",
              "name": "messageToUser"
            },
            {
              "type": "String",
              "name": "message",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the children of this node",
          "children": [
            {
              "type": "void",
              "name": "removeChildren"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this node with the given node",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of join points",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of strings",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWithStrings"
            },
            {
              "type": "String[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Setting data directly is not supported, this action just emits a warning and does nothing",
          "children": [
            {
              "type": "void",
              "name": "setData"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the first child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setFirstChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String[]",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the last child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setLastChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the type of a node, if it has a type",
          "children": [
            {
              "type": "void",
              "name": "setType"
            },
            {
              "type": "type",
              "name": "type",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Associates arbitrary values to nodes of the AST",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "String",
              "name": "fieldName",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a map",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "Map",
              "name": "fieldNameAndValue",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the value associated with the given property key",
          "children": [
            {
              "type": "joinpoint",
              "name": "setValue"
            },
            {
              "type": "String",
              "name": "key",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "suffix",
              "defaultValue": ""
            }
          ]
        }
      ]
    },
    {
      "type": "joinpoint",
      "name": "break",
      "extends": "statement",
      "children": [
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isFirst"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isLast"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "attributes"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "selects"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "actions"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "ancestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with a dump of the AST representation starting from this node. This representation corresponds to the internal Java representation of the ClavaAst, where the node names correspond to Java classes. To get an equivalent representation with join point names, use the attribute 'dump'",
          "children": [
            {
              "type": "String",
              "name": "ast"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor AST name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "astAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, considering null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "astChild"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, considering null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "astChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String that uniquely identifies this node",
          "children": [
            {
              "type": "String",
              "name": "astId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if this node is a Java instance of the given name, which corresponds to a simple Java class name of an AST node. For an equivalent function for join point names, use 'instanceOf(joinPointName)'",
          "children": [
            {
              "type": "boolean",
              "name": "astIsInstance"
            },
            {
              "type": "String",
              "name": "className"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the Java class of this node, which is similar to the equivalent node in Clang AST",
          "children": [
            {
              "type": "String",
              "name": "astName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, considering null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "astNumChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "astParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The bit width of the type returned by this join point, in relation to the definitions of its Translation Unit, or undefined if there is no type or bitwidth defined, or if the join point is not in a TranslationUnit",
          "children": [
            {
              "type": "Integer",
              "name": "bitWidth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String list of the names of the join points that form a path from the root to this node",
          "children": [
            {
              "type": "String[]",
              "name": "chain"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the joinpoint chain",
          "children": [
            {
              "type": "joinpoint",
              "name": "chainAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "child"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "children"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the code represented by this node",
          "children": [
            {
              "type": "String",
              "name": "code"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "column"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the given node is a descendant of this node",
          "children": [
            {
              "type": "Boolean",
              "name": "contains"
            },
            {
              "type": "joinpoint",
              "name": "jp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "currentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "JS object associated with this node, containing parsed data of #pragma clava data when the node can be a target of pragmas. This is a special object, managed internally, and cannot be reassigned, to change its contents requires using key-value pairs. If the node can be the target of a pragma, the information stored in this object is persisted between rebuilds.",
          "children": [
            {
              "type": "Object",
              "name": "data"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the depth of this join point in the AST. If it is the root join point returns 0, if it is a child of the root node returns 1, etc.",
          "children": [
            {
              "type": "Integer",
              "name": "depth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves all descendants of the join point",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type, including the node itself",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendantsAndSelf"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endColumn"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endLine"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the file where the code of this node is located, if available",
          "children": [
            {
              "type": "String",
              "name": "filename"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the complete path to the file where the code of this node comes from",
          "children": [
            {
              "type": "String",
              "name": "filepath"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the first child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks in the descendants for the first node of the given type",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstJp"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use 'userField' instead]",
          "children": [
            {
              "type": "Object",
              "name": "getUserField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The value associated with the given property key",
          "children": [
            {
              "type": "Object",
              "name": "getValue"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use hasParent instead]",
          "children": [
            {
              "type": "boolean",
              "name": "hasAstParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the node has children, false otherwise",
          "children": [
            {
              "type": "Boolean",
              "name": "hasChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the given join point or AST node is the same (== test) as the current join point AST node",
          "children": [
            {
              "type": "Boolean",
              "name": "hasNode"
            },
            {
              "type": "Object",
              "name": "nodeOrJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this node has a parent",
          "children": [
            {
              "type": "boolean",
              "name": "hasParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point has a type",
          "children": [
            {
              "type": "Boolean",
              "name": "hasType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns comments that are not explicitly in the AST, but embedded in other nodes",
          "children": [
            {
              "type": "comment[]",
              "name": "inlineComments"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this is a Cilk node (i.e., cilk_spawn, cilk_sync or cilk_for)",
          "children": [
            {
              "type": "Boolean",
              "name": "isCilk"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is part of a system header file",
          "children": [
            {
              "type": "Boolean",
              "name": "isInSystemHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a header (e.g., if condition, for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a loop header (e.g., for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideLoopHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if any descendant or the node itself was defined as a macro",
          "children": [
            {
              "type": "Boolean",
              "name": "isMacro"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the full Java class name of the type of the Java field with the provided name",
          "children": [
            {
              "type": "String",
              "name": "javaFieldType"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'keys' instead, together with 'getValue'] The names of the Java fields of this node. Can be used as key of the attribute 'javaValue'",
          "children": [
            {
              "type": "String[]",
              "name": "javaFields"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'getValue' instead, with the names returned by the attribute 'keys'] Returns the value associated with the provided Java field name",
          "children": [
            {
              "type": "Object",
              "name": "javaValue"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use joinPointType instead (uppercase P)]",
          "children": [
            {
              "type": "String",
              "name": "joinpointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Id that is based on the position of the node in the code, and should remain stable between compilations (warning: only a few nodes - file, function, loop - currently support it)",
          "children": [
            {
              "type": "String",
              "name": "jpId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Java Class instance with the type of the given key",
          "children": [
            {
              "type": "Object",
              "name": "keyType"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A list of the properties currently supported by this node. Can be used as parameter of the attribute 'getValue'",
          "children": [
            {
              "type": "String[]",
              "name": "keys"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[HACK: .descendants(type) does not work in .lara files, after GraalVM update] Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "laraDescendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the last child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "lastChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that came before this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "leftJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "line"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A string with information about the file and code position of this node, if available",
          "children": [
            {
              "type": "String",
              "name": "location"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, ignoring null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "numChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope that is a parent of the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The pragmas associated with this node",
          "children": [
            {
              "type": "pragma[]",
              "name": "pragmas"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that comes after this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "rightJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the 'program' joinpoint",
          "children": [
            {
              "type": "joinpoint",
              "name": "root"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the nodes of the scope of the current join point. If this node has a body (e.g., loop, function) corresponds to the children of the body. Otherwise, returns an empty array",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "scopeNodes"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that came before this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsLeft"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that come after this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsRight"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Converts this join point to a statement, or returns undefined if it was not possible",
          "children": [
            {
              "type": "statement",
              "name": "stmt"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "type",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrives values that have been associated to nodes of the AST with 'setUserField'",
          "children": [
            {
              "type": "Object",
              "name": "userField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a String with the type of the join point",
          "children": [
            {
              "type": "String",
              "name": "joinPointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the current join point is an instance of the given type",
          "children": [
            {
              "type": "Boolean",
              "name": "instanceOf"
            },
            {
              "type": "String",
              "name": "name"
            }
          ]
        },
        {
          "type": "select",
          "clazz": "expression",
          "alias": "expr"
        },
        {
          "type": "select",
          "clazz": "expression",
          "alias": "childExpr"
        },
        {
          "type": "select",
          "clazz": "call",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "call",
          "alias": "stmtCall"
        },
        {
          "type": "select",
          "clazz": "memberCall",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "memberAccess",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "arrayAccess",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "vardecl",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "varref",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "op",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "binaryOp",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "unaryOp",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "newExpr",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "deleteExpr",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "cilkSpawn",
          "alias": ""
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "insert"
            },
            {
              "type": "[before| after| replace]",
              "name": "position",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "def"
            },
            {
              "type": "String",
              "name": "attribute",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, but not of the nodes in its fields",
          "children": [
            {
              "type": "joinpoint",
              "name": "copy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Copies all enumerable own properties from the source object to the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataAssign"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Clears all properties from the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataClear"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, including the nodes in their fields (only the first level of field nodes, this function is not recursive)",
          "children": [
            {
              "type": "joinpoint",
              "name": "deepCopy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the node associated to this joinpoint from the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "detach"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point after this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point before this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Adds a message that will be printed to the user after weaving finishes. Identical messages are removed",
          "children": [
            {
              "type": "void",
              "name": "messageToUser"
            },
            {
              "type": "String",
              "name": "message",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the children of this node",
          "children": [
            {
              "type": "void",
              "name": "removeChildren"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this node with the given node",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of join points",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of strings",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWithStrings"
            },
            {
              "type": "String[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Setting data directly is not supported, this action just emits a warning and does nothing",
          "children": [
            {
              "type": "void",
              "name": "setData"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the first child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setFirstChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String[]",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the last child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setLastChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the type of a node, if it has a type",
          "children": [
            {
              "type": "void",
              "name": "setType"
            },
            {
              "type": "type",
              "name": "type",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Associates arbitrary values to nodes of the AST",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "String",
              "name": "fieldName",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a map",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "Map",
              "name": "fieldNameAndValue",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the value associated with the given property key",
          "children": [
            {
              "type": "joinpoint",
              "name": "setValue"
            },
            {
              "type": "String",
              "name": "key",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "suffix",
              "defaultValue": ""
            }
          ]
        }
      ]
    },
    {
      "type": "joinpoint",
      "name": "builtinType",
      "extends": "type",
      "children": [
        {
          "type": "attribute",
          "children": [
            {
              "type": "String",
              "name": "builtinKind"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if ot is a floating type (e.g., float, double)",
          "children": [
            {
              "type": "Boolean",
              "name": "isFloat"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if it is an integer type",
          "children": [
            {
              "type": "Boolean",
              "name": "isInteger"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if it is a signed integer type",
          "children": [
            {
              "type": "Boolean",
              "name": "isSigned"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if it is an unsigned integer type",
          "children": [
            {
              "type": "Boolean",
              "name": "isUnsigned"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if it is the type 'void'",
          "children": [
            {
              "type": "Boolean",
              "name": "isVoid"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Integer[]",
              "name": "arrayDims"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Integer",
              "name": "arraySize"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The bit width of this type in the Translation Unit of the given join point, or undefined if there is no bitwidth defined",
          "children": [
            {
              "type": "Integer",
              "name": "bitWidth"
            },
            {
              "type": "joinpoint",
              "name": "reference"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "constant"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Single-step desugar. Returns the type itself if it does not have sugar",
          "children": [
            {
              "type": "type",
              "name": "desugar"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Completely desugars the type",
          "children": [
            {
              "type": "type",
              "name": "desugarAll"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A tree representation of the fields of this type",
          "children": [
            {
              "type": "String",
              "name": "fieldTree"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "hasSugar"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "hasTemplateArgs"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isArray"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "True if this is a type declared with the 'auto' keyword",
          "children": [
            {
              "type": "Boolean",
              "name": "isAuto"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isBuiltin"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isPointer"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isTopLevel"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String",
              "name": "kind"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Ignores certain types (e.g., DecayedType)",
          "children": [
            {
              "type": "type",
              "name": "normalize"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "templateArgsStrings"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "type[]",
              "name": "templateArgsTypes"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Maps names of join point fields that represent type join points, to their respective values",
          "children": [
            {
              "type": "Map",
              "name": "typeFields"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "If the type encapsulates another type, returns the encapsulated type",
          "children": [
            {
              "type": "type",
              "name": "unwrap"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "attributes"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "selects"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "actions"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "ancestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with a dump of the AST representation starting from this node. This representation corresponds to the internal Java representation of the ClavaAst, where the node names correspond to Java classes. To get an equivalent representation with join point names, use the attribute 'dump'",
          "children": [
            {
              "type": "String",
              "name": "ast"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor AST name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "astAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, considering null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "astChild"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, considering null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "astChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String that uniquely identifies this node",
          "children": [
            {
              "type": "String",
              "name": "astId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if this node is a Java instance of the given name, which corresponds to a simple Java class name of an AST node. For an equivalent function for join point names, use 'instanceOf(joinPointName)'",
          "children": [
            {
              "type": "boolean",
              "name": "astIsInstance"
            },
            {
              "type": "String",
              "name": "className"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the Java class of this node, which is similar to the equivalent node in Clang AST",
          "children": [
            {
              "type": "String",
              "name": "astName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, considering null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "astNumChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "astParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The bit width of the type returned by this join point, in relation to the definitions of its Translation Unit, or undefined if there is no type or bitwidth defined, or if the join point is not in a TranslationUnit",
          "children": [
            {
              "type": "Integer",
              "name": "bitWidth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String list of the names of the join points that form a path from the root to this node",
          "children": [
            {
              "type": "String[]",
              "name": "chain"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the joinpoint chain",
          "children": [
            {
              "type": "joinpoint",
              "name": "chainAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "child"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "children"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the code represented by this node",
          "children": [
            {
              "type": "String",
              "name": "code"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "column"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the given node is a descendant of this node",
          "children": [
            {
              "type": "Boolean",
              "name": "contains"
            },
            {
              "type": "joinpoint",
              "name": "jp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "currentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "JS object associated with this node, containing parsed data of #pragma clava data when the node can be a target of pragmas. This is a special object, managed internally, and cannot be reassigned, to change its contents requires using key-value pairs. If the node can be the target of a pragma, the information stored in this object is persisted between rebuilds.",
          "children": [
            {
              "type": "Object",
              "name": "data"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the depth of this join point in the AST. If it is the root join point returns 0, if it is a child of the root node returns 1, etc.",
          "children": [
            {
              "type": "Integer",
              "name": "depth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves all descendants of the join point",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type, including the node itself",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendantsAndSelf"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endColumn"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endLine"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the file where the code of this node is located, if available",
          "children": [
            {
              "type": "String",
              "name": "filename"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the complete path to the file where the code of this node comes from",
          "children": [
            {
              "type": "String",
              "name": "filepath"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the first child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks in the descendants for the first node of the given type",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstJp"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use 'userField' instead]",
          "children": [
            {
              "type": "Object",
              "name": "getUserField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The value associated with the given property key",
          "children": [
            {
              "type": "Object",
              "name": "getValue"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use hasParent instead]",
          "children": [
            {
              "type": "boolean",
              "name": "hasAstParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the node has children, false otherwise",
          "children": [
            {
              "type": "Boolean",
              "name": "hasChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the given join point or AST node is the same (== test) as the current join point AST node",
          "children": [
            {
              "type": "Boolean",
              "name": "hasNode"
            },
            {
              "type": "Object",
              "name": "nodeOrJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this node has a parent",
          "children": [
            {
              "type": "boolean",
              "name": "hasParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point has a type",
          "children": [
            {
              "type": "Boolean",
              "name": "hasType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns comments that are not explicitly in the AST, but embedded in other nodes",
          "children": [
            {
              "type": "comment[]",
              "name": "inlineComments"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this is a Cilk node (i.e., cilk_spawn, cilk_sync or cilk_for)",
          "children": [
            {
              "type": "Boolean",
              "name": "isCilk"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is part of a system header file",
          "children": [
            {
              "type": "Boolean",
              "name": "isInSystemHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a header (e.g., if condition, for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a loop header (e.g., for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideLoopHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if any descendant or the node itself was defined as a macro",
          "children": [
            {
              "type": "Boolean",
              "name": "isMacro"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the full Java class name of the type of the Java field with the provided name",
          "children": [
            {
              "type": "String",
              "name": "javaFieldType"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'keys' instead, together with 'getValue'] The names of the Java fields of this node. Can be used as key of the attribute 'javaValue'",
          "children": [
            {
              "type": "String[]",
              "name": "javaFields"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'getValue' instead, with the names returned by the attribute 'keys'] Returns the value associated with the provided Java field name",
          "children": [
            {
              "type": "Object",
              "name": "javaValue"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use joinPointType instead (uppercase P)]",
          "children": [
            {
              "type": "String",
              "name": "joinpointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Id that is based on the position of the node in the code, and should remain stable between compilations (warning: only a few nodes - file, function, loop - currently support it)",
          "children": [
            {
              "type": "String",
              "name": "jpId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Java Class instance with the type of the given key",
          "children": [
            {
              "type": "Object",
              "name": "keyType"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A list of the properties currently supported by this node. Can be used as parameter of the attribute 'getValue'",
          "children": [
            {
              "type": "String[]",
              "name": "keys"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[HACK: .descendants(type) does not work in .lara files, after GraalVM update] Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "laraDescendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the last child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "lastChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that came before this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "leftJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "line"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A string with information about the file and code position of this node, if available",
          "children": [
            {
              "type": "String",
              "name": "location"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, ignoring null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "numChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope that is a parent of the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The pragmas associated with this node",
          "children": [
            {
              "type": "pragma[]",
              "name": "pragmas"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that comes after this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "rightJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the 'program' joinpoint",
          "children": [
            {
              "type": "joinpoint",
              "name": "root"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the nodes of the scope of the current join point. If this node has a body (e.g., loop, function) corresponds to the children of the body. Otherwise, returns an empty array",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "scopeNodes"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that came before this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsLeft"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that come after this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsRight"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Converts this join point to a statement, or returns undefined if it was not possible",
          "children": [
            {
              "type": "statement",
              "name": "stmt"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "type",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrives values that have been associated to nodes of the AST with 'setUserField'",
          "children": [
            {
              "type": "Object",
              "name": "userField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a String with the type of the join point",
          "children": [
            {
              "type": "String",
              "name": "joinPointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the current join point is an instance of the given type",
          "children": [
            {
              "type": "Boolean",
              "name": "instanceOf"
            },
            {
              "type": "String",
              "name": "name"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Returns a copy of this type with the qualifier const",
          "children": [
            {
              "type": "type",
              "name": "asConst"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the desugared type of this type",
          "children": [
            {
              "type": "void",
              "name": "setDesugar"
            },
            {
              "type": "type",
              "name": "desugaredType",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the template argument types of a template type",
          "children": [
            {
              "type": "void",
              "name": "setTemplateArgsTypes"
            },
            {
              "type": "type[]",
              "name": "templateArgTypes",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets a single template argument type of a template type",
          "children": [
            {
              "type": "void",
              "name": "setTemplateArgsTypes"
            },
            {
              "type": "Integer",
              "name": "index",
              "defaultValue": ""
            },
            {
              "type": "type",
              "name": "templateArgType",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Changes a single occurence of a type field that has the current value with new value. Returns true if there was a change",
          "children": [
            {
              "type": "boolean",
              "name": "setTypeFieldByValueRecursive"
            },
            {
              "type": "Object",
              "name": "currentValue",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "newValue",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces an underlying type of this instance with new type, if it matches the old type. Returns true if there were changes",
          "children": [
            {
              "type": "type",
              "name": "setUnderlyingType"
            },
            {
              "type": "type",
              "name": "oldValue",
              "defaultValue": ""
            },
            {
              "type": "type",
              "name": "newValue",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "insert"
            },
            {
              "type": "[before| after| replace]",
              "name": "position",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "def"
            },
            {
              "type": "String",
              "name": "attribute",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, but not of the nodes in its fields",
          "children": [
            {
              "type": "joinpoint",
              "name": "copy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Copies all enumerable own properties from the source object to the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataAssign"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Clears all properties from the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataClear"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, including the nodes in their fields (only the first level of field nodes, this function is not recursive)",
          "children": [
            {
              "type": "joinpoint",
              "name": "deepCopy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the node associated to this joinpoint from the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "detach"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point after this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point before this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Adds a message that will be printed to the user after weaving finishes. Identical messages are removed",
          "children": [
            {
              "type": "void",
              "name": "messageToUser"
            },
            {
              "type": "String",
              "name": "message",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the children of this node",
          "children": [
            {
              "type": "void",
              "name": "removeChildren"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this node with the given node",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of join points",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of strings",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWithStrings"
            },
            {
              "type": "String[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Setting data directly is not supported, this action just emits a warning and does nothing",
          "children": [
            {
              "type": "void",
              "name": "setData"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the first child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setFirstChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String[]",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the last child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setLastChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the type of a node, if it has a type",
          "children": [
            {
              "type": "void",
              "name": "setType"
            },
            {
              "type": "type",
              "name": "type",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Associates arbitrary values to nodes of the AST",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "String",
              "name": "fieldName",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a map",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "Map",
              "name": "fieldNameAndValue",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the value associated with the given property key",
          "children": [
            {
              "type": "joinpoint",
              "name": "setValue"
            },
            {
              "type": "String",
              "name": "key",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "suffix",
              "defaultValue": ""
            }
          ]
        }
      ]
    },
    {
      "type": "joinpoint",
      "name": "call",
      "defaultAttr": "name",
      "extends": "expression",
      "children": [
        {
          "type": "attribute",
          "children": [
            {
              "type": "expression",
              "name": "arg"
            },
            {
              "type": "int",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "an alias for 'args'",
          "children": [
            {
              "type": "expression[]",
              "name": "argList"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "an array with the arguments of the call",
          "children": [
            {
              "type": "expression[]",
              "name": "args"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a 'function' join point that represents the function of the call that was found, it can return either an implementation or a function prototype; 'undefined' if no declaration was found",
          "children": [
            {
              "type": "function",
              "name": "declaration"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a 'function' join point that represents the function definition of the call; 'undefined' if no definition was found",
          "children": [
            {
              "type": "function",
              "name": "definition"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a function join point that represents the 'raw' function of the call (e.g. if this is a call to a templated function, returns a declaration representing the template specialization, instead of the original function)",
          "children": [
            {
              "type": "function",
              "name": "directCallee"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a function join point associated with this call. If a definition is present, it is given priority over returning a declaration. If only declarations are present, returns a declaration",
          "children": [
            {
              "type": "function",
              "name": "function"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the function type of the call, which includes the return type and the types of the parameters",
          "children": [
            {
              "type": "functionType",
              "name": "functionType"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "boolean",
              "name": "isMemberAccess"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "boolean",
              "name": "isStmtCall"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "memberAccess",
              "name": "memberAccess"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "memberNames"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String",
              "name": "name"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Integer",
              "name": "numArgs"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the return type of the call",
          "children": [
            {
              "type": "type",
              "name": "returnType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "similar to $function.signature, but if no function decl could be found (e.g., function from system include), returns a signature based on just the name of the function",
          "children": [
            {
              "type": "String",
              "name": "signature"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a 'decl' join point that represents the declaration associated with this expression, or undefined if there is none",
          "children": [
            {
              "type": "decl",
              "name": "decl"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "returns a cast joinpoint if this expression has an associated implicit cast, undefined otherwise",
          "children": [
            {
              "type": "cast",
              "name": "implicitCast"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the expression is part of an argument of a function call",
          "children": [
            {
              "type": "Boolean",
              "name": "isFunctionArgument"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "[read| write| readwrite]",
              "name": "use"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "vardecl",
              "name": "vardecl"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "attributes"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "selects"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "actions"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "ancestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with a dump of the AST representation starting from this node. This representation corresponds to the internal Java representation of the ClavaAst, where the node names correspond to Java classes. To get an equivalent representation with join point names, use the attribute 'dump'",
          "children": [
            {
              "type": "String",
              "name": "ast"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor AST name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "astAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, considering null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "astChild"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, considering null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "astChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String that uniquely identifies this node",
          "children": [
            {
              "type": "String",
              "name": "astId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if this node is a Java instance of the given name, which corresponds to a simple Java class name of an AST node. For an equivalent function for join point names, use 'instanceOf(joinPointName)'",
          "children": [
            {
              "type": "boolean",
              "name": "astIsInstance"
            },
            {
              "type": "String",
              "name": "className"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the Java class of this node, which is similar to the equivalent node in Clang AST",
          "children": [
            {
              "type": "String",
              "name": "astName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, considering null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "astNumChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "astParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The bit width of the type returned by this join point, in relation to the definitions of its Translation Unit, or undefined if there is no type or bitwidth defined, or if the join point is not in a TranslationUnit",
          "children": [
            {
              "type": "Integer",
              "name": "bitWidth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String list of the names of the join points that form a path from the root to this node",
          "children": [
            {
              "type": "String[]",
              "name": "chain"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the joinpoint chain",
          "children": [
            {
              "type": "joinpoint",
              "name": "chainAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "child"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "children"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the code represented by this node",
          "children": [
            {
              "type": "String",
              "name": "code"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "column"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the given node is a descendant of this node",
          "children": [
            {
              "type": "Boolean",
              "name": "contains"
            },
            {
              "type": "joinpoint",
              "name": "jp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "currentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "JS object associated with this node, containing parsed data of #pragma clava data when the node can be a target of pragmas. This is a special object, managed internally, and cannot be reassigned, to change its contents requires using key-value pairs. If the node can be the target of a pragma, the information stored in this object is persisted between rebuilds.",
          "children": [
            {
              "type": "Object",
              "name": "data"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the depth of this join point in the AST. If it is the root join point returns 0, if it is a child of the root node returns 1, etc.",
          "children": [
            {
              "type": "Integer",
              "name": "depth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves all descendants of the join point",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type, including the node itself",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendantsAndSelf"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endColumn"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endLine"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the file where the code of this node is located, if available",
          "children": [
            {
              "type": "String",
              "name": "filename"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the complete path to the file where the code of this node comes from",
          "children": [
            {
              "type": "String",
              "name": "filepath"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the first child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks in the descendants for the first node of the given type",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstJp"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use 'userField' instead]",
          "children": [
            {
              "type": "Object",
              "name": "getUserField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The value associated with the given property key",
          "children": [
            {
              "type": "Object",
              "name": "getValue"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use hasParent instead]",
          "children": [
            {
              "type": "boolean",
              "name": "hasAstParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the node has children, false otherwise",
          "children": [
            {
              "type": "Boolean",
              "name": "hasChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the given join point or AST node is the same (== test) as the current join point AST node",
          "children": [
            {
              "type": "Boolean",
              "name": "hasNode"
            },
            {
              "type": "Object",
              "name": "nodeOrJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this node has a parent",
          "children": [
            {
              "type": "boolean",
              "name": "hasParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point has a type",
          "children": [
            {
              "type": "Boolean",
              "name": "hasType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns comments that are not explicitly in the AST, but embedded in other nodes",
          "children": [
            {
              "type": "comment[]",
              "name": "inlineComments"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this is a Cilk node (i.e., cilk_spawn, cilk_sync or cilk_for)",
          "children": [
            {
              "type": "Boolean",
              "name": "isCilk"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is part of a system header file",
          "children": [
            {
              "type": "Boolean",
              "name": "isInSystemHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a header (e.g., if condition, for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a loop header (e.g., for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideLoopHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if any descendant or the node itself was defined as a macro",
          "children": [
            {
              "type": "Boolean",
              "name": "isMacro"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the full Java class name of the type of the Java field with the provided name",
          "children": [
            {
              "type": "String",
              "name": "javaFieldType"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'keys' instead, together with 'getValue'] The names of the Java fields of this node. Can be used as key of the attribute 'javaValue'",
          "children": [
            {
              "type": "String[]",
              "name": "javaFields"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'getValue' instead, with the names returned by the attribute 'keys'] Returns the value associated with the provided Java field name",
          "children": [
            {
              "type": "Object",
              "name": "javaValue"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use joinPointType instead (uppercase P)]",
          "children": [
            {
              "type": "String",
              "name": "joinpointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Id that is based on the position of the node in the code, and should remain stable between compilations (warning: only a few nodes - file, function, loop - currently support it)",
          "children": [
            {
              "type": "String",
              "name": "jpId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Java Class instance with the type of the given key",
          "children": [
            {
              "type": "Object",
              "name": "keyType"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A list of the properties currently supported by this node. Can be used as parameter of the attribute 'getValue'",
          "children": [
            {
              "type": "String[]",
              "name": "keys"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[HACK: .descendants(type) does not work in .lara files, after GraalVM update] Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "laraDescendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the last child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "lastChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that came before this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "leftJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "line"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A string with information about the file and code position of this node, if available",
          "children": [
            {
              "type": "String",
              "name": "location"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, ignoring null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "numChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope that is a parent of the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The pragmas associated with this node",
          "children": [
            {
              "type": "pragma[]",
              "name": "pragmas"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that comes after this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "rightJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the 'program' joinpoint",
          "children": [
            {
              "type": "joinpoint",
              "name": "root"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the nodes of the scope of the current join point. If this node has a body (e.g., loop, function) corresponds to the children of the body. Otherwise, returns an empty array",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "scopeNodes"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that came before this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsLeft"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that come after this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsRight"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Converts this join point to a statement, or returns undefined if it was not possible",
          "children": [
            {
              "type": "statement",
              "name": "stmt"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "type",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrives values that have been associated to nodes of the AST with 'setUserField'",
          "children": [
            {
              "type": "Object",
              "name": "userField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a String with the type of the join point",
          "children": [
            {
              "type": "String",
              "name": "joinPointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the current join point is an instance of the given type",
          "children": [
            {
              "type": "Boolean",
              "name": "instanceOf"
            },
            {
              "type": "String",
              "name": "name"
            }
          ]
        },
        {
          "type": "select",
          "clazz": "expression",
          "alias": "callee"
        },
        {
          "type": "select",
          "clazz": "expression",
          "alias": "arg"
        },
        {
          "type": "select",
          "clazz": "vardecl",
          "alias": ""
        },
        {
          "type": "action",
          "tooltip": "Adds an argument at the end of the call, creating an expression using the given code and type",
          "children": [
            {
              "type": "void",
              "name": "addArg"
            },
            {
              "type": "String",
              "name": "argCode",
              "defaultValue": ""
            },
            {
              "type": "type",
              "name": "type",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Adds an argument at the end of the call, creating a literal 'type' from the type string",
          "children": [
            {
              "type": "void",
              "name": "addArg"
            },
            {
              "type": "String",
              "name": "arg",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "type",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Adds an argument at the end of the call, creating an expression using a dummy type",
          "children": [
            {
              "type": "void",
              "name": "addArg"
            },
            {
              "type": "String",
              "name": "argCode",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Tries to inline this call",
          "children": [
            {
              "type": "boolean",
              "name": "inline"
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "setArg"
            },
            {
              "type": "Integer",
              "name": "index",
              "defaultValue": ""
            },
            {
              "type": "expression",
              "name": "expr",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "setArgFromString"
            },
            {
              "type": "int",
              "name": "index",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "expr",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Changes the name of the call",
          "children": [
            {
              "type": "void",
              "name": "setName"
            },
            {
              "type": "String",
              "name": "name",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Wraps this call with a possibly new wrapping function",
          "children": [
            {
              "type": "void",
              "name": "wrap"
            },
            {
              "type": "String",
              "name": "name",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "insert"
            },
            {
              "type": "[before| after| replace]",
              "name": "position",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "def"
            },
            {
              "type": "String",
              "name": "attribute",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, but not of the nodes in its fields",
          "children": [
            {
              "type": "joinpoint",
              "name": "copy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Copies all enumerable own properties from the source object to the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataAssign"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Clears all properties from the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataClear"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, including the nodes in their fields (only the first level of field nodes, this function is not recursive)",
          "children": [
            {
              "type": "joinpoint",
              "name": "deepCopy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the node associated to this joinpoint from the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "detach"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point after this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point before this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Adds a message that will be printed to the user after weaving finishes. Identical messages are removed",
          "children": [
            {
              "type": "void",
              "name": "messageToUser"
            },
            {
              "type": "String",
              "name": "message",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the children of this node",
          "children": [
            {
              "type": "void",
              "name": "removeChildren"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this node with the given node",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of join points",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of strings",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWithStrings"
            },
            {
              "type": "String[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Setting data directly is not supported, this action just emits a warning and does nothing",
          "children": [
            {
              "type": "void",
              "name": "setData"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the first child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setFirstChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String[]",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the last child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setLastChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the type of a node, if it has a type",
          "children": [
            {
              "type": "void",
              "name": "setType"
            },
            {
              "type": "type",
              "name": "type",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Associates arbitrary values to nodes of the AST",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "String",
              "name": "fieldName",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a map",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "Map",
              "name": "fieldNameAndValue",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the value associated with the given property key",
          "children": [
            {
              "type": "joinpoint",
              "name": "setValue"
            },
            {
              "type": "String",
              "name": "key",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "suffix",
              "defaultValue": ""
            }
          ]
        }
      ]
    },
    {
      "type": "joinpoint",
      "name": "case",
      "extends": "statement",
      "children": [
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isFirst"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isLast"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "attributes"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "selects"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "actions"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "ancestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with a dump of the AST representation starting from this node. This representation corresponds to the internal Java representation of the ClavaAst, where the node names correspond to Java classes. To get an equivalent representation with join point names, use the attribute 'dump'",
          "children": [
            {
              "type": "String",
              "name": "ast"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor AST name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "astAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, considering null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "astChild"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, considering null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "astChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String that uniquely identifies this node",
          "children": [
            {
              "type": "String",
              "name": "astId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if this node is a Java instance of the given name, which corresponds to a simple Java class name of an AST node. For an equivalent function for join point names, use 'instanceOf(joinPointName)'",
          "children": [
            {
              "type": "boolean",
              "name": "astIsInstance"
            },
            {
              "type": "String",
              "name": "className"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the Java class of this node, which is similar to the equivalent node in Clang AST",
          "children": [
            {
              "type": "String",
              "name": "astName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, considering null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "astNumChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "astParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The bit width of the type returned by this join point, in relation to the definitions of its Translation Unit, or undefined if there is no type or bitwidth defined, or if the join point is not in a TranslationUnit",
          "children": [
            {
              "type": "Integer",
              "name": "bitWidth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String list of the names of the join points that form a path from the root to this node",
          "children": [
            {
              "type": "String[]",
              "name": "chain"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the joinpoint chain",
          "children": [
            {
              "type": "joinpoint",
              "name": "chainAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "child"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "children"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the code represented by this node",
          "children": [
            {
              "type": "String",
              "name": "code"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "column"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the given node is a descendant of this node",
          "children": [
            {
              "type": "Boolean",
              "name": "contains"
            },
            {
              "type": "joinpoint",
              "name": "jp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "currentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "JS object associated with this node, containing parsed data of #pragma clava data when the node can be a target of pragmas. This is a special object, managed internally, and cannot be reassigned, to change its contents requires using key-value pairs. If the node can be the target of a pragma, the information stored in this object is persisted between rebuilds.",
          "children": [
            {
              "type": "Object",
              "name": "data"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the depth of this join point in the AST. If it is the root join point returns 0, if it is a child of the root node returns 1, etc.",
          "children": [
            {
              "type": "Integer",
              "name": "depth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves all descendants of the join point",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type, including the node itself",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendantsAndSelf"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endColumn"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endLine"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the file where the code of this node is located, if available",
          "children": [
            {
              "type": "String",
              "name": "filename"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the complete path to the file where the code of this node comes from",
          "children": [
            {
              "type": "String",
              "name": "filepath"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the first child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks in the descendants for the first node of the given type",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstJp"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use 'userField' instead]",
          "children": [
            {
              "type": "Object",
              "name": "getUserField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The value associated with the given property key",
          "children": [
            {
              "type": "Object",
              "name": "getValue"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use hasParent instead]",
          "children": [
            {
              "type": "boolean",
              "name": "hasAstParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the node has children, false otherwise",
          "children": [
            {
              "type": "Boolean",
              "name": "hasChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the given join point or AST node is the same (== test) as the current join point AST node",
          "children": [
            {
              "type": "Boolean",
              "name": "hasNode"
            },
            {
              "type": "Object",
              "name": "nodeOrJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this node has a parent",
          "children": [
            {
              "type": "boolean",
              "name": "hasParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point has a type",
          "children": [
            {
              "type": "Boolean",
              "name": "hasType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns comments that are not explicitly in the AST, but embedded in other nodes",
          "children": [
            {
              "type": "comment[]",
              "name": "inlineComments"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this is a Cilk node (i.e., cilk_spawn, cilk_sync or cilk_for)",
          "children": [
            {
              "type": "Boolean",
              "name": "isCilk"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is part of a system header file",
          "children": [
            {
              "type": "Boolean",
              "name": "isInSystemHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a header (e.g., if condition, for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a loop header (e.g., for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideLoopHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if any descendant or the node itself was defined as a macro",
          "children": [
            {
              "type": "Boolean",
              "name": "isMacro"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the full Java class name of the type of the Java field with the provided name",
          "children": [
            {
              "type": "String",
              "name": "javaFieldType"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'keys' instead, together with 'getValue'] The names of the Java fields of this node. Can be used as key of the attribute 'javaValue'",
          "children": [
            {
              "type": "String[]",
              "name": "javaFields"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'getValue' instead, with the names returned by the attribute 'keys'] Returns the value associated with the provided Java field name",
          "children": [
            {
              "type": "Object",
              "name": "javaValue"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use joinPointType instead (uppercase P)]",
          "children": [
            {
              "type": "String",
              "name": "joinpointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Id that is based on the position of the node in the code, and should remain stable between compilations (warning: only a few nodes - file, function, loop - currently support it)",
          "children": [
            {
              "type": "String",
              "name": "jpId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Java Class instance with the type of the given key",
          "children": [
            {
              "type": "Object",
              "name": "keyType"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A list of the properties currently supported by this node. Can be used as parameter of the attribute 'getValue'",
          "children": [
            {
              "type": "String[]",
              "name": "keys"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[HACK: .descendants(type) does not work in .lara files, after GraalVM update] Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "laraDescendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the last child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "lastChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that came before this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "leftJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "line"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A string with information about the file and code position of this node, if available",
          "children": [
            {
              "type": "String",
              "name": "location"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, ignoring null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "numChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope that is a parent of the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The pragmas associated with this node",
          "children": [
            {
              "type": "pragma[]",
              "name": "pragmas"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that comes after this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "rightJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the 'program' joinpoint",
          "children": [
            {
              "type": "joinpoint",
              "name": "root"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the nodes of the scope of the current join point. If this node has a body (e.g., loop, function) corresponds to the children of the body. Otherwise, returns an empty array",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "scopeNodes"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that came before this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsLeft"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that come after this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsRight"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Converts this join point to a statement, or returns undefined if it was not possible",
          "children": [
            {
              "type": "statement",
              "name": "stmt"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "type",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrives values that have been associated to nodes of the AST with 'setUserField'",
          "children": [
            {
              "type": "Object",
              "name": "userField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a String with the type of the join point",
          "children": [
            {
              "type": "String",
              "name": "joinPointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the current join point is an instance of the given type",
          "children": [
            {
              "type": "Boolean",
              "name": "instanceOf"
            },
            {
              "type": "String",
              "name": "name"
            }
          ]
        },
        {
          "type": "select",
          "clazz": "expression",
          "alias": "expr"
        },
        {
          "type": "select",
          "clazz": "expression",
          "alias": "childExpr"
        },
        {
          "type": "select",
          "clazz": "call",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "call",
          "alias": "stmtCall"
        },
        {
          "type": "select",
          "clazz": "memberCall",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "memberAccess",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "arrayAccess",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "vardecl",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "varref",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "op",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "binaryOp",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "unaryOp",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "newExpr",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "deleteExpr",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "cilkSpawn",
          "alias": ""
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "insert"
            },
            {
              "type": "[before| after| replace]",
              "name": "position",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "def"
            },
            {
              "type": "String",
              "name": "attribute",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, but not of the nodes in its fields",
          "children": [
            {
              "type": "joinpoint",
              "name": "copy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Copies all enumerable own properties from the source object to the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataAssign"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Clears all properties from the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataClear"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, including the nodes in their fields (only the first level of field nodes, this function is not recursive)",
          "children": [
            {
              "type": "joinpoint",
              "name": "deepCopy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the node associated to this joinpoint from the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "detach"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point after this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point before this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Adds a message that will be printed to the user after weaving finishes. Identical messages are removed",
          "children": [
            {
              "type": "void",
              "name": "messageToUser"
            },
            {
              "type": "String",
              "name": "message",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the children of this node",
          "children": [
            {
              "type": "void",
              "name": "removeChildren"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this node with the given node",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of join points",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of strings",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWithStrings"
            },
            {
              "type": "String[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Setting data directly is not supported, this action just emits a warning and does nothing",
          "children": [
            {
              "type": "void",
              "name": "setData"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the first child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setFirstChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String[]",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the last child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setLastChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the type of a node, if it has a type",
          "children": [
            {
              "type": "void",
              "name": "setType"
            },
            {
              "type": "type",
              "name": "type",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Associates arbitrary values to nodes of the AST",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "String",
              "name": "fieldName",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a map",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "Map",
              "name": "fieldNameAndValue",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the value associated with the given property key",
          "children": [
            {
              "type": "joinpoint",
              "name": "setValue"
            },
            {
              "type": "String",
              "name": "key",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "suffix",
              "defaultValue": ""
            }
          ]
        }
      ]
    },
    {
      "type": "joinpoint",
      "name": "cast",
      "extends": "expression",
      "children": [
        {
          "type": "attribute",
          "children": [
            {
              "type": "type",
              "name": "fromType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: Use expr.implicitCast instead]",
          "children": [
            {
              "type": "Boolean",
              "name": "isImplicitCast"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "expression",
              "name": "subExpr"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "type",
              "name": "toType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a 'decl' join point that represents the declaration associated with this expression, or undefined if there is none",
          "children": [
            {
              "type": "decl",
              "name": "decl"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "returns a cast joinpoint if this expression has an associated implicit cast, undefined otherwise",
          "children": [
            {
              "type": "cast",
              "name": "implicitCast"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the expression is part of an argument of a function call",
          "children": [
            {
              "type": "Boolean",
              "name": "isFunctionArgument"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "[read| write| readwrite]",
              "name": "use"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "vardecl",
              "name": "vardecl"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "attributes"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "selects"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "actions"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "ancestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with a dump of the AST representation starting from this node. This representation corresponds to the internal Java representation of the ClavaAst, where the node names correspond to Java classes. To get an equivalent representation with join point names, use the attribute 'dump'",
          "children": [
            {
              "type": "String",
              "name": "ast"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor AST name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "astAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, considering null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "astChild"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, considering null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "astChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String that uniquely identifies this node",
          "children": [
            {
              "type": "String",
              "name": "astId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if this node is a Java instance of the given name, which corresponds to a simple Java class name of an AST node. For an equivalent function for join point names, use 'instanceOf(joinPointName)'",
          "children": [
            {
              "type": "boolean",
              "name": "astIsInstance"
            },
            {
              "type": "String",
              "name": "className"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the Java class of this node, which is similar to the equivalent node in Clang AST",
          "children": [
            {
              "type": "String",
              "name": "astName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, considering null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "astNumChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "astParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The bit width of the type returned by this join point, in relation to the definitions of its Translation Unit, or undefined if there is no type or bitwidth defined, or if the join point is not in a TranslationUnit",
          "children": [
            {
              "type": "Integer",
              "name": "bitWidth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String list of the names of the join points that form a path from the root to this node",
          "children": [
            {
              "type": "String[]",
              "name": "chain"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the joinpoint chain",
          "children": [
            {
              "type": "joinpoint",
              "name": "chainAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "child"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "children"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the code represented by this node",
          "children": [
            {
              "type": "String",
              "name": "code"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "column"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the given node is a descendant of this node",
          "children": [
            {
              "type": "Boolean",
              "name": "contains"
            },
            {
              "type": "joinpoint",
              "name": "jp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "currentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "JS object associated with this node, containing parsed data of #pragma clava data when the node can be a target of pragmas. This is a special object, managed internally, and cannot be reassigned, to change its contents requires using key-value pairs. If the node can be the target of a pragma, the information stored in this object is persisted between rebuilds.",
          "children": [
            {
              "type": "Object",
              "name": "data"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the depth of this join point in the AST. If it is the root join point returns 0, if it is a child of the root node returns 1, etc.",
          "children": [
            {
              "type": "Integer",
              "name": "depth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves all descendants of the join point",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type, including the node itself",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendantsAndSelf"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endColumn"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endLine"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the file where the code of this node is located, if available",
          "children": [
            {
              "type": "String",
              "name": "filename"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the complete path to the file where the code of this node comes from",
          "children": [
            {
              "type": "String",
              "name": "filepath"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the first child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks in the descendants for the first node of the given type",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstJp"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use 'userField' instead]",
          "children": [
            {
              "type": "Object",
              "name": "getUserField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The value associated with the given property key",
          "children": [
            {
              "type": "Object",
              "name": "getValue"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use hasParent instead]",
          "children": [
            {
              "type": "boolean",
              "name": "hasAstParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the node has children, false otherwise",
          "children": [
            {
              "type": "Boolean",
              "name": "hasChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the given join point or AST node is the same (== test) as the current join point AST node",
          "children": [
            {
              "type": "Boolean",
              "name": "hasNode"
            },
            {
              "type": "Object",
              "name": "nodeOrJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this node has a parent",
          "children": [
            {
              "type": "boolean",
              "name": "hasParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point has a type",
          "children": [
            {
              "type": "Boolean",
              "name": "hasType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns comments that are not explicitly in the AST, but embedded in other nodes",
          "children": [
            {
              "type": "comment[]",
              "name": "inlineComments"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this is a Cilk node (i.e., cilk_spawn, cilk_sync or cilk_for)",
          "children": [
            {
              "type": "Boolean",
              "name": "isCilk"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is part of a system header file",
          "children": [
            {
              "type": "Boolean",
              "name": "isInSystemHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a header (e.g., if condition, for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a loop header (e.g., for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideLoopHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if any descendant or the node itself was defined as a macro",
          "children": [
            {
              "type": "Boolean",
              "name": "isMacro"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the full Java class name of the type of the Java field with the provided name",
          "children": [
            {
              "type": "String",
              "name": "javaFieldType"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'keys' instead, together with 'getValue'] The names of the Java fields of this node. Can be used as key of the attribute 'javaValue'",
          "children": [
            {
              "type": "String[]",
              "name": "javaFields"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'getValue' instead, with the names returned by the attribute 'keys'] Returns the value associated with the provided Java field name",
          "children": [
            {
              "type": "Object",
              "name": "javaValue"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use joinPointType instead (uppercase P)]",
          "children": [
            {
              "type": "String",
              "name": "joinpointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Id that is based on the position of the node in the code, and should remain stable between compilations (warning: only a few nodes - file, function, loop - currently support it)",
          "children": [
            {
              "type": "String",
              "name": "jpId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Java Class instance with the type of the given key",
          "children": [
            {
              "type": "Object",
              "name": "keyType"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A list of the properties currently supported by this node. Can be used as parameter of the attribute 'getValue'",
          "children": [
            {
              "type": "String[]",
              "name": "keys"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[HACK: .descendants(type) does not work in .lara files, after GraalVM update] Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "laraDescendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the last child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "lastChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that came before this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "leftJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "line"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A string with information about the file and code position of this node, if available",
          "children": [
            {
              "type": "String",
              "name": "location"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, ignoring null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "numChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope that is a parent of the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The pragmas associated with this node",
          "children": [
            {
              "type": "pragma[]",
              "name": "pragmas"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that comes after this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "rightJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the 'program' joinpoint",
          "children": [
            {
              "type": "joinpoint",
              "name": "root"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the nodes of the scope of the current join point. If this node has a body (e.g., loop, function) corresponds to the children of the body. Otherwise, returns an empty array",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "scopeNodes"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that came before this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsLeft"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that come after this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsRight"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Converts this join point to a statement, or returns undefined if it was not possible",
          "children": [
            {
              "type": "statement",
              "name": "stmt"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "type",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrives values that have been associated to nodes of the AST with 'setUserField'",
          "children": [
            {
              "type": "Object",
              "name": "userField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a String with the type of the join point",
          "children": [
            {
              "type": "String",
              "name": "joinPointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the current join point is an instance of the given type",
          "children": [
            {
              "type": "Boolean",
              "name": "instanceOf"
            },
            {
              "type": "String",
              "name": "name"
            }
          ]
        },
        {
          "type": "select",
          "clazz": "vardecl",
          "alias": ""
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "insert"
            },
            {
              "type": "[before| after| replace]",
              "name": "position",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "def"
            },
            {
              "type": "String",
              "name": "attribute",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, but not of the nodes in its fields",
          "children": [
            {
              "type": "joinpoint",
              "name": "copy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Copies all enumerable own properties from the source object to the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataAssign"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Clears all properties from the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataClear"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, including the nodes in their fields (only the first level of field nodes, this function is not recursive)",
          "children": [
            {
              "type": "joinpoint",
              "name": "deepCopy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the node associated to this joinpoint from the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "detach"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point after this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point before this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Adds a message that will be printed to the user after weaving finishes. Identical messages are removed",
          "children": [
            {
              "type": "void",
              "name": "messageToUser"
            },
            {
              "type": "String",
              "name": "message",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the children of this node",
          "children": [
            {
              "type": "void",
              "name": "removeChildren"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this node with the given node",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of join points",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of strings",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWithStrings"
            },
            {
              "type": "String[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Setting data directly is not supported, this action just emits a warning and does nothing",
          "children": [
            {
              "type": "void",
              "name": "setData"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the first child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setFirstChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String[]",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the last child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setLastChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the type of a node, if it has a type",
          "children": [
            {
              "type": "void",
              "name": "setType"
            },
            {
              "type": "type",
              "name": "type",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Associates arbitrary values to nodes of the AST",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "String",
              "name": "fieldName",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a map",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "Map",
              "name": "fieldNameAndValue",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the value associated with the given property key",
          "children": [
            {
              "type": "joinpoint",
              "name": "setValue"
            },
            {
              "type": "String",
              "name": "key",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "suffix",
              "defaultValue": ""
            }
          ]
        }
      ]
    },
    {
      "type": "joinpoint",
      "name": "cilkFor",
      "defaultAttr": "kind",
      "extends": "loop",
      "children": [
        {
          "type": "attribute",
          "children": [
            {
              "type": "scope",
              "name": "body"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The statement of the loop condition",
          "children": [
            {
              "type": "statement",
              "name": "cond"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Relation",
              "name": "condRelation"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String",
              "name": "controlVar"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The expression of the last value of the control variable (e.g. 'length' in 'i < length;')",
          "children": [
            {
              "type": "String",
              "name": "endValue"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "True if the condition of the loop in the canonical format, and is one of: <, <=, >, >=",
          "children": [
            {
              "type": "Boolean",
              "name": "hasCondRelation"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Uniquely identifies the loop inside the program",
          "children": [
            {
              "type": "String",
              "name": "id"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The statement of the loop initialization",
          "children": [
            {
              "type": "statement",
              "name": "init"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The expression of the first value of the control variable (e.g. '0' in 'size_t i = 0;')",
          "children": [
            {
              "type": "String",
              "name": "initValue"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isInnermost"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Tests whether the loops are interchangeable. This is a conservative test.",
          "children": [
            {
              "type": "Boolean",
              "name": "isInterchangeable"
            },
            {
              "type": "loop",
              "name": "otherLoop"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isOutermost"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isParallel"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Integer",
              "name": "iterations"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "expression",
              "name": "iterationsExpr"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "[for| while| dowhile| foreach]",
              "name": "kind"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Integer",
              "name": "nestedLevel"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Integer[]",
              "name": "rank"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The statement of the loop step",
          "children": [
            {
              "type": "statement",
              "name": "step"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The expression of the iteration step",
          "children": [
            {
              "type": "String",
              "name": "stepValue"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isFirst"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isLast"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "attributes"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "selects"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "actions"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "ancestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with a dump of the AST representation starting from this node. This representation corresponds to the internal Java representation of the ClavaAst, where the node names correspond to Java classes. To get an equivalent representation with join point names, use the attribute 'dump'",
          "children": [
            {
              "type": "String",
              "name": "ast"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor AST name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "astAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, considering null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "astChild"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, considering null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "astChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String that uniquely identifies this node",
          "children": [
            {
              "type": "String",
              "name": "astId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if this node is a Java instance of the given name, which corresponds to a simple Java class name of an AST node. For an equivalent function for join point names, use 'instanceOf(joinPointName)'",
          "children": [
            {
              "type": "boolean",
              "name": "astIsInstance"
            },
            {
              "type": "String",
              "name": "className"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the Java class of this node, which is similar to the equivalent node in Clang AST",
          "children": [
            {
              "type": "String",
              "name": "astName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, considering null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "astNumChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "astParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The bit width of the type returned by this join point, in relation to the definitions of its Translation Unit, or undefined if there is no type or bitwidth defined, or if the join point is not in a TranslationUnit",
          "children": [
            {
              "type": "Integer",
              "name": "bitWidth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String list of the names of the join points that form a path from the root to this node",
          "children": [
            {
              "type": "String[]",
              "name": "chain"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the joinpoint chain",
          "children": [
            {
              "type": "joinpoint",
              "name": "chainAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "child"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "children"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the code represented by this node",
          "children": [
            {
              "type": "String",
              "name": "code"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "column"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the given node is a descendant of this node",
          "children": [
            {
              "type": "Boolean",
              "name": "contains"
            },
            {
              "type": "joinpoint",
              "name": "jp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "currentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "JS object associated with this node, containing parsed data of #pragma clava data when the node can be a target of pragmas. This is a special object, managed internally, and cannot be reassigned, to change its contents requires using key-value pairs. If the node can be the target of a pragma, the information stored in this object is persisted between rebuilds.",
          "children": [
            {
              "type": "Object",
              "name": "data"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the depth of this join point in the AST. If it is the root join point returns 0, if it is a child of the root node returns 1, etc.",
          "children": [
            {
              "type": "Integer",
              "name": "depth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves all descendants of the join point",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type, including the node itself",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendantsAndSelf"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endColumn"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endLine"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the file where the code of this node is located, if available",
          "children": [
            {
              "type": "String",
              "name": "filename"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the complete path to the file where the code of this node comes from",
          "children": [
            {
              "type": "String",
              "name": "filepath"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the first child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks in the descendants for the first node of the given type",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstJp"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use 'userField' instead]",
          "children": [
            {
              "type": "Object",
              "name": "getUserField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The value associated with the given property key",
          "children": [
            {
              "type": "Object",
              "name": "getValue"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use hasParent instead]",
          "children": [
            {
              "type": "boolean",
              "name": "hasAstParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the node has children, false otherwise",
          "children": [
            {
              "type": "Boolean",
              "name": "hasChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the given join point or AST node is the same (== test) as the current join point AST node",
          "children": [
            {
              "type": "Boolean",
              "name": "hasNode"
            },
            {
              "type": "Object",
              "name": "nodeOrJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this node has a parent",
          "children": [
            {
              "type": "boolean",
              "name": "hasParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point has a type",
          "children": [
            {
              "type": "Boolean",
              "name": "hasType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns comments that are not explicitly in the AST, but embedded in other nodes",
          "children": [
            {
              "type": "comment[]",
              "name": "inlineComments"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this is a Cilk node (i.e., cilk_spawn, cilk_sync or cilk_for)",
          "children": [
            {
              "type": "Boolean",
              "name": "isCilk"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is part of a system header file",
          "children": [
            {
              "type": "Boolean",
              "name": "isInSystemHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a header (e.g., if condition, for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a loop header (e.g., for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideLoopHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if any descendant or the node itself was defined as a macro",
          "children": [
            {
              "type": "Boolean",
              "name": "isMacro"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the full Java class name of the type of the Java field with the provided name",
          "children": [
            {
              "type": "String",
              "name": "javaFieldType"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'keys' instead, together with 'getValue'] The names of the Java fields of this node. Can be used as key of the attribute 'javaValue'",
          "children": [
            {
              "type": "String[]",
              "name": "javaFields"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'getValue' instead, with the names returned by the attribute 'keys'] Returns the value associated with the provided Java field name",
          "children": [
            {
              "type": "Object",
              "name": "javaValue"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use joinPointType instead (uppercase P)]",
          "children": [
            {
              "type": "String",
              "name": "joinpointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Id that is based on the position of the node in the code, and should remain stable between compilations (warning: only a few nodes - file, function, loop - currently support it)",
          "children": [
            {
              "type": "String",
              "name": "jpId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Java Class instance with the type of the given key",
          "children": [
            {
              "type": "Object",
              "name": "keyType"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A list of the properties currently supported by this node. Can be used as parameter of the attribute 'getValue'",
          "children": [
            {
              "type": "String[]",
              "name": "keys"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[HACK: .descendants(type) does not work in .lara files, after GraalVM update] Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "laraDescendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the last child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "lastChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that came before this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "leftJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "line"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A string with information about the file and code position of this node, if available",
          "children": [
            {
              "type": "String",
              "name": "location"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, ignoring null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "numChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope that is a parent of the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The pragmas associated with this node",
          "children": [
            {
              "type": "pragma[]",
              "name": "pragmas"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that comes after this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "rightJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the 'program' joinpoint",
          "children": [
            {
              "type": "joinpoint",
              "name": "root"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the nodes of the scope of the current join point. If this node has a body (e.g., loop, function) corresponds to the children of the body. Otherwise, returns an empty array",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "scopeNodes"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that came before this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsLeft"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that come after this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsRight"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Converts this join point to a statement, or returns undefined if it was not possible",
          "children": [
            {
              "type": "statement",
              "name": "stmt"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "type",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrives values that have been associated to nodes of the AST with 'setUserField'",
          "children": [
            {
              "type": "Object",
              "name": "userField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a String with the type of the join point",
          "children": [
            {
              "type": "String",
              "name": "joinPointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the current join point is an instance of the given type",
          "children": [
            {
              "type": "Boolean",
              "name": "instanceOf"
            },
            {
              "type": "String",
              "name": "name"
            }
          ]
        },
        {
          "type": "select",
          "clazz": "statement",
          "alias": "init"
        },
        {
          "type": "select",
          "clazz": "statement",
          "alias": "cond"
        },
        {
          "type": "select",
          "clazz": "statement",
          "alias": "step"
        },
        {
          "type": "select",
          "clazz": "scope",
          "alias": "body"
        },
        {
          "type": "select",
          "clazz": "expression",
          "alias": "expr"
        },
        {
          "type": "select",
          "clazz": "expression",
          "alias": "childExpr"
        },
        {
          "type": "select",
          "clazz": "call",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "call",
          "alias": "stmtCall"
        },
        {
          "type": "select",
          "clazz": "memberCall",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "memberAccess",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "arrayAccess",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "vardecl",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "varref",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "op",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "binaryOp",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "unaryOp",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "newExpr",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "deleteExpr",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "cilkSpawn",
          "alias": ""
        },
        {
          "type": "action",
          "tooltip": "DEPRECATED: use 'setKind' instead",
          "children": [
            {
              "type": "void",
              "name": "changeKind"
            },
            {
              "type": "String",
              "name": "kind",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Interchanges two for loops, if possible",
          "children": [
            {
              "type": "void",
              "name": "interchange"
            },
            {
              "type": "loop",
              "name": "otherLoop",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the body of the loop",
          "children": [
            {
              "type": "void",
              "name": "setBody"
            },
            {
              "type": "scope",
              "name": "body",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the conditional statement of the loop. Works with loops of kind 'for'",
          "children": [
            {
              "type": "void",
              "name": "setCond"
            },
            {
              "type": "String",
              "name": "condCode",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Changes the operator of a canonical condition, if possible. Supported operators: lt, le, gt, ge",
          "children": [
            {
              "type": "void",
              "name": "setCondRelation"
            },
            {
              "type": "Relation",
              "name": "operator",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Changes the operator of a canonical condition, if possible. Supported operators: <, <=, >, >=",
          "children": [
            {
              "type": "void",
              "name": "setCondRelation"
            },
            {
              "type": "String",
              "name": "operator",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the end value of the loop. Works with loops of kind 'for'",
          "children": [
            {
              "type": "void",
              "name": "setEndValue"
            },
            {
              "type": "String",
              "name": "initCode",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the init statement of the loop",
          "children": [
            {
              "type": "void",
              "name": "setInit"
            },
            {
              "type": "String",
              "name": "initCode",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the init value of the loop. Works with loops of kind 'for'",
          "children": [
            {
              "type": "void",
              "name": "setInitValue"
            },
            {
              "type": "String",
              "name": "initCode",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the attribute 'isParallel' of the loop",
          "children": [
            {
              "type": "void",
              "name": "setIsParallel"
            },
            {
              "type": "Boolean",
              "name": "isParallel",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the kind of the loop",
          "children": [
            {
              "type": "void",
              "name": "setKind"
            },
            {
              "type": "String",
              "name": "kind",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the step statement of the loop. Works with loops of kind 'for'",
          "children": [
            {
              "type": "void",
              "name": "setStep"
            },
            {
              "type": "String",
              "name": "stepCode",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Applies loop tiling to this loop",
          "children": [
            {
              "type": "statement",
              "name": "tile"
            },
            {
              "type": "String",
              "name": "blockSize",
              "defaultValue": ""
            },
            {
              "type": "statement",
              "name": "reference",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Applies loop tiling to this loop.",
          "children": [
            {
              "type": "statement",
              "name": "tile"
            },
            {
              "type": "String",
              "name": "blockSize",
              "defaultValue": ""
            },
            {
              "type": "statement",
              "name": "reference",
              "defaultValue": ""
            },
            {
              "type": "Boolean",
              "name": "useTernary",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "insert"
            },
            {
              "type": "[before| after| replace]",
              "name": "position",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "def"
            },
            {
              "type": "String",
              "name": "attribute",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, but not of the nodes in its fields",
          "children": [
            {
              "type": "joinpoint",
              "name": "copy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Copies all enumerable own properties from the source object to the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataAssign"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Clears all properties from the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataClear"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, including the nodes in their fields (only the first level of field nodes, this function is not recursive)",
          "children": [
            {
              "type": "joinpoint",
              "name": "deepCopy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the node associated to this joinpoint from the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "detach"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point after this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point before this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Adds a message that will be printed to the user after weaving finishes. Identical messages are removed",
          "children": [
            {
              "type": "void",
              "name": "messageToUser"
            },
            {
              "type": "String",
              "name": "message",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the children of this node",
          "children": [
            {
              "type": "void",
              "name": "removeChildren"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this node with the given node",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of join points",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of strings",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWithStrings"
            },
            {
              "type": "String[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Setting data directly is not supported, this action just emits a warning and does nothing",
          "children": [
            {
              "type": "void",
              "name": "setData"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the first child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setFirstChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String[]",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the last child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setLastChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the type of a node, if it has a type",
          "children": [
            {
              "type": "void",
              "name": "setType"
            },
            {
              "type": "type",
              "name": "type",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Associates arbitrary values to nodes of the AST",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "String",
              "name": "fieldName",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a map",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "Map",
              "name": "fieldNameAndValue",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the value associated with the given property key",
          "children": [
            {
              "type": "joinpoint",
              "name": "setValue"
            },
            {
              "type": "String",
              "name": "key",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "suffix",
              "defaultValue": ""
            }
          ]
        }
      ]
    },
    {
      "type": "joinpoint",
      "name": "cilkSpawn",
      "defaultAttr": "name",
      "extends": "call",
      "children": [
        {
          "type": "attribute",
          "children": [
            {
              "type": "expression",
              "name": "arg"
            },
            {
              "type": "int",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "an alias for 'args'",
          "children": [
            {
              "type": "expression[]",
              "name": "argList"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "an array with the arguments of the call",
          "children": [
            {
              "type": "expression[]",
              "name": "args"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a 'function' join point that represents the function of the call that was found, it can return either an implementation or a function prototype; 'undefined' if no declaration was found",
          "children": [
            {
              "type": "function",
              "name": "declaration"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a 'function' join point that represents the function definition of the call; 'undefined' if no definition was found",
          "children": [
            {
              "type": "function",
              "name": "definition"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a function join point that represents the 'raw' function of the call (e.g. if this is a call to a templated function, returns a declaration representing the template specialization, instead of the original function)",
          "children": [
            {
              "type": "function",
              "name": "directCallee"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a function join point associated with this call. If a definition is present, it is given priority over returning a declaration. If only declarations are present, returns a declaration",
          "children": [
            {
              "type": "function",
              "name": "function"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the function type of the call, which includes the return type and the types of the parameters",
          "children": [
            {
              "type": "functionType",
              "name": "functionType"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "boolean",
              "name": "isMemberAccess"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "boolean",
              "name": "isStmtCall"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "memberAccess",
              "name": "memberAccess"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "memberNames"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String",
              "name": "name"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Integer",
              "name": "numArgs"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the return type of the call",
          "children": [
            {
              "type": "type",
              "name": "returnType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "similar to $function.signature, but if no function decl could be found (e.g., function from system include), returns a signature based on just the name of the function",
          "children": [
            {
              "type": "String",
              "name": "signature"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a 'decl' join point that represents the declaration associated with this expression, or undefined if there is none",
          "children": [
            {
              "type": "decl",
              "name": "decl"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "returns a cast joinpoint if this expression has an associated implicit cast, undefined otherwise",
          "children": [
            {
              "type": "cast",
              "name": "implicitCast"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the expression is part of an argument of a function call",
          "children": [
            {
              "type": "Boolean",
              "name": "isFunctionArgument"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "[read| write| readwrite]",
              "name": "use"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "vardecl",
              "name": "vardecl"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "attributes"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "selects"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "actions"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "ancestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with a dump of the AST representation starting from this node. This representation corresponds to the internal Java representation of the ClavaAst, where the node names correspond to Java classes. To get an equivalent representation with join point names, use the attribute 'dump'",
          "children": [
            {
              "type": "String",
              "name": "ast"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor AST name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "astAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, considering null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "astChild"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, considering null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "astChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String that uniquely identifies this node",
          "children": [
            {
              "type": "String",
              "name": "astId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if this node is a Java instance of the given name, which corresponds to a simple Java class name of an AST node. For an equivalent function for join point names, use 'instanceOf(joinPointName)'",
          "children": [
            {
              "type": "boolean",
              "name": "astIsInstance"
            },
            {
              "type": "String",
              "name": "className"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the Java class of this node, which is similar to the equivalent node in Clang AST",
          "children": [
            {
              "type": "String",
              "name": "astName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, considering null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "astNumChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "astParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The bit width of the type returned by this join point, in relation to the definitions of its Translation Unit, or undefined if there is no type or bitwidth defined, or if the join point is not in a TranslationUnit",
          "children": [
            {
              "type": "Integer",
              "name": "bitWidth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String list of the names of the join points that form a path from the root to this node",
          "children": [
            {
              "type": "String[]",
              "name": "chain"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the joinpoint chain",
          "children": [
            {
              "type": "joinpoint",
              "name": "chainAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "child"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "children"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the code represented by this node",
          "children": [
            {
              "type": "String",
              "name": "code"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "column"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the given node is a descendant of this node",
          "children": [
            {
              "type": "Boolean",
              "name": "contains"
            },
            {
              "type": "joinpoint",
              "name": "jp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "currentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "JS object associated with this node, containing parsed data of #pragma clava data when the node can be a target of pragmas. This is a special object, managed internally, and cannot be reassigned, to change its contents requires using key-value pairs. If the node can be the target of a pragma, the information stored in this object is persisted between rebuilds.",
          "children": [
            {
              "type": "Object",
              "name": "data"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the depth of this join point in the AST. If it is the root join point returns 0, if it is a child of the root node returns 1, etc.",
          "children": [
            {
              "type": "Integer",
              "name": "depth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves all descendants of the join point",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type, including the node itself",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendantsAndSelf"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endColumn"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endLine"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the file where the code of this node is located, if available",
          "children": [
            {
              "type": "String",
              "name": "filename"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the complete path to the file where the code of this node comes from",
          "children": [
            {
              "type": "String",
              "name": "filepath"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the first child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks in the descendants for the first node of the given type",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstJp"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use 'userField' instead]",
          "children": [
            {
              "type": "Object",
              "name": "getUserField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The value associated with the given property key",
          "children": [
            {
              "type": "Object",
              "name": "getValue"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use hasParent instead]",
          "children": [
            {
              "type": "boolean",
              "name": "hasAstParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the node has children, false otherwise",
          "children": [
            {
              "type": "Boolean",
              "name": "hasChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the given join point or AST node is the same (== test) as the current join point AST node",
          "children": [
            {
              "type": "Boolean",
              "name": "hasNode"
            },
            {
              "type": "Object",
              "name": "nodeOrJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this node has a parent",
          "children": [
            {
              "type": "boolean",
              "name": "hasParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point has a type",
          "children": [
            {
              "type": "Boolean",
              "name": "hasType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns comments that are not explicitly in the AST, but embedded in other nodes",
          "children": [
            {
              "type": "comment[]",
              "name": "inlineComments"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this is a Cilk node (i.e., cilk_spawn, cilk_sync or cilk_for)",
          "children": [
            {
              "type": "Boolean",
              "name": "isCilk"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is part of a system header file",
          "children": [
            {
              "type": "Boolean",
              "name": "isInSystemHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a header (e.g., if condition, for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a loop header (e.g., for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideLoopHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if any descendant or the node itself was defined as a macro",
          "children": [
            {
              "type": "Boolean",
              "name": "isMacro"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the full Java class name of the type of the Java field with the provided name",
          "children": [
            {
              "type": "String",
              "name": "javaFieldType"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'keys' instead, together with 'getValue'] The names of the Java fields of this node. Can be used as key of the attribute 'javaValue'",
          "children": [
            {
              "type": "String[]",
              "name": "javaFields"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'getValue' instead, with the names returned by the attribute 'keys'] Returns the value associated with the provided Java field name",
          "children": [
            {
              "type": "Object",
              "name": "javaValue"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use joinPointType instead (uppercase P)]",
          "children": [
            {
              "type": "String",
              "name": "joinpointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Id that is based on the position of the node in the code, and should remain stable between compilations (warning: only a few nodes - file, function, loop - currently support it)",
          "children": [
            {
              "type": "String",
              "name": "jpId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Java Class instance with the type of the given key",
          "children": [
            {
              "type": "Object",
              "name": "keyType"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A list of the properties currently supported by this node. Can be used as parameter of the attribute 'getValue'",
          "children": [
            {
              "type": "String[]",
              "name": "keys"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[HACK: .descendants(type) does not work in .lara files, after GraalVM update] Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "laraDescendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the last child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "lastChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that came before this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "leftJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "line"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A string with information about the file and code position of this node, if available",
          "children": [
            {
              "type": "String",
              "name": "location"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, ignoring null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "numChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope that is a parent of the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The pragmas associated with this node",
          "children": [
            {
              "type": "pragma[]",
              "name": "pragmas"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that comes after this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "rightJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the 'program' joinpoint",
          "children": [
            {
              "type": "joinpoint",
              "name": "root"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the nodes of the scope of the current join point. If this node has a body (e.g., loop, function) corresponds to the children of the body. Otherwise, returns an empty array",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "scopeNodes"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that came before this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsLeft"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that come after this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsRight"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Converts this join point to a statement, or returns undefined if it was not possible",
          "children": [
            {
              "type": "statement",
              "name": "stmt"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "type",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrives values that have been associated to nodes of the AST with 'setUserField'",
          "children": [
            {
              "type": "Object",
              "name": "userField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a String with the type of the join point",
          "children": [
            {
              "type": "String",
              "name": "joinPointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the current join point is an instance of the given type",
          "children": [
            {
              "type": "Boolean",
              "name": "instanceOf"
            },
            {
              "type": "String",
              "name": "name"
            }
          ]
        },
        {
          "type": "select",
          "clazz": "expression",
          "alias": "callee"
        },
        {
          "type": "select",
          "clazz": "expression",
          "alias": "arg"
        },
        {
          "type": "select",
          "clazz": "vardecl",
          "alias": ""
        },
        {
          "type": "action",
          "tooltip": "Adds an argument at the end of the call, creating an expression using the given code and type",
          "children": [
            {
              "type": "void",
              "name": "addArg"
            },
            {
              "type": "String",
              "name": "argCode",
              "defaultValue": ""
            },
            {
              "type": "type",
              "name": "type",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Adds an argument at the end of the call, creating a literal 'type' from the type string",
          "children": [
            {
              "type": "void",
              "name": "addArg"
            },
            {
              "type": "String",
              "name": "arg",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "type",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Adds an argument at the end of the call, creating an expression using a dummy type",
          "children": [
            {
              "type": "void",
              "name": "addArg"
            },
            {
              "type": "String",
              "name": "argCode",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Tries to inline this call",
          "children": [
            {
              "type": "boolean",
              "name": "inline"
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "setArg"
            },
            {
              "type": "Integer",
              "name": "index",
              "defaultValue": ""
            },
            {
              "type": "expression",
              "name": "expr",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "setArgFromString"
            },
            {
              "type": "int",
              "name": "index",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "expr",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Changes the name of the call",
          "children": [
            {
              "type": "void",
              "name": "setName"
            },
            {
              "type": "String",
              "name": "name",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Wraps this call with a possibly new wrapping function",
          "children": [
            {
              "type": "void",
              "name": "wrap"
            },
            {
              "type": "String",
              "name": "name",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "insert"
            },
            {
              "type": "[before| after| replace]",
              "name": "position",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "def"
            },
            {
              "type": "String",
              "name": "attribute",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, but not of the nodes in its fields",
          "children": [
            {
              "type": "joinpoint",
              "name": "copy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Copies all enumerable own properties from the source object to the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataAssign"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Clears all properties from the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataClear"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, including the nodes in their fields (only the first level of field nodes, this function is not recursive)",
          "children": [
            {
              "type": "joinpoint",
              "name": "deepCopy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the node associated to this joinpoint from the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "detach"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point after this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point before this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Adds a message that will be printed to the user after weaving finishes. Identical messages are removed",
          "children": [
            {
              "type": "void",
              "name": "messageToUser"
            },
            {
              "type": "String",
              "name": "message",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the children of this node",
          "children": [
            {
              "type": "void",
              "name": "removeChildren"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this node with the given node",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of join points",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of strings",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWithStrings"
            },
            {
              "type": "String[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Setting data directly is not supported, this action just emits a warning and does nothing",
          "children": [
            {
              "type": "void",
              "name": "setData"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the first child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setFirstChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String[]",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the last child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setLastChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the type of a node, if it has a type",
          "children": [
            {
              "type": "void",
              "name": "setType"
            },
            {
              "type": "type",
              "name": "type",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Associates arbitrary values to nodes of the AST",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "String",
              "name": "fieldName",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a map",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "Map",
              "name": "fieldNameAndValue",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the value associated with the given property key",
          "children": [
            {
              "type": "joinpoint",
              "name": "setValue"
            },
            {
              "type": "String",
              "name": "key",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "suffix",
              "defaultValue": ""
            }
          ]
        }
      ]
    },
    {
      "type": "joinpoint",
      "name": "cilkSync",
      "extends": "statement",
      "children": [
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isFirst"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isLast"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "attributes"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "selects"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "actions"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "ancestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with a dump of the AST representation starting from this node. This representation corresponds to the internal Java representation of the ClavaAst, where the node names correspond to Java classes. To get an equivalent representation with join point names, use the attribute 'dump'",
          "children": [
            {
              "type": "String",
              "name": "ast"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor AST name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "astAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, considering null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "astChild"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, considering null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "astChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String that uniquely identifies this node",
          "children": [
            {
              "type": "String",
              "name": "astId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if this node is a Java instance of the given name, which corresponds to a simple Java class name of an AST node. For an equivalent function for join point names, use 'instanceOf(joinPointName)'",
          "children": [
            {
              "type": "boolean",
              "name": "astIsInstance"
            },
            {
              "type": "String",
              "name": "className"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the Java class of this node, which is similar to the equivalent node in Clang AST",
          "children": [
            {
              "type": "String",
              "name": "astName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, considering null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "astNumChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "astParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The bit width of the type returned by this join point, in relation to the definitions of its Translation Unit, or undefined if there is no type or bitwidth defined, or if the join point is not in a TranslationUnit",
          "children": [
            {
              "type": "Integer",
              "name": "bitWidth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String list of the names of the join points that form a path from the root to this node",
          "children": [
            {
              "type": "String[]",
              "name": "chain"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the joinpoint chain",
          "children": [
            {
              "type": "joinpoint",
              "name": "chainAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "child"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "children"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the code represented by this node",
          "children": [
            {
              "type": "String",
              "name": "code"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "column"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the given node is a descendant of this node",
          "children": [
            {
              "type": "Boolean",
              "name": "contains"
            },
            {
              "type": "joinpoint",
              "name": "jp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "currentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "JS object associated with this node, containing parsed data of #pragma clava data when the node can be a target of pragmas. This is a special object, managed internally, and cannot be reassigned, to change its contents requires using key-value pairs. If the node can be the target of a pragma, the information stored in this object is persisted between rebuilds.",
          "children": [
            {
              "type": "Object",
              "name": "data"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the depth of this join point in the AST. If it is the root join point returns 0, if it is a child of the root node returns 1, etc.",
          "children": [
            {
              "type": "Integer",
              "name": "depth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves all descendants of the join point",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type, including the node itself",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendantsAndSelf"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endColumn"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endLine"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the file where the code of this node is located, if available",
          "children": [
            {
              "type": "String",
              "name": "filename"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the complete path to the file where the code of this node comes from",
          "children": [
            {
              "type": "String",
              "name": "filepath"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the first child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks in the descendants for the first node of the given type",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstJp"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use 'userField' instead]",
          "children": [
            {
              "type": "Object",
              "name": "getUserField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The value associated with the given property key",
          "children": [
            {
              "type": "Object",
              "name": "getValue"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use hasParent instead]",
          "children": [
            {
              "type": "boolean",
              "name": "hasAstParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the node has children, false otherwise",
          "children": [
            {
              "type": "Boolean",
              "name": "hasChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the given join point or AST node is the same (== test) as the current join point AST node",
          "children": [
            {
              "type": "Boolean",
              "name": "hasNode"
            },
            {
              "type": "Object",
              "name": "nodeOrJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this node has a parent",
          "children": [
            {
              "type": "boolean",
              "name": "hasParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point has a type",
          "children": [
            {
              "type": "Boolean",
              "name": "hasType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns comments that are not explicitly in the AST, but embedded in other nodes",
          "children": [
            {
              "type": "comment[]",
              "name": "inlineComments"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this is a Cilk node (i.e., cilk_spawn, cilk_sync or cilk_for)",
          "children": [
            {
              "type": "Boolean",
              "name": "isCilk"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is part of a system header file",
          "children": [
            {
              "type": "Boolean",
              "name": "isInSystemHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a header (e.g., if condition, for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a loop header (e.g., for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideLoopHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if any descendant or the node itself was defined as a macro",
          "children": [
            {
              "type": "Boolean",
              "name": "isMacro"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the full Java class name of the type of the Java field with the provided name",
          "children": [
            {
              "type": "String",
              "name": "javaFieldType"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'keys' instead, together with 'getValue'] The names of the Java fields of this node. Can be used as key of the attribute 'javaValue'",
          "children": [
            {
              "type": "String[]",
              "name": "javaFields"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'getValue' instead, with the names returned by the attribute 'keys'] Returns the value associated with the provided Java field name",
          "children": [
            {
              "type": "Object",
              "name": "javaValue"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use joinPointType instead (uppercase P)]",
          "children": [
            {
              "type": "String",
              "name": "joinpointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Id that is based on the position of the node in the code, and should remain stable between compilations (warning: only a few nodes - file, function, loop - currently support it)",
          "children": [
            {
              "type": "String",
              "name": "jpId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Java Class instance with the type of the given key",
          "children": [
            {
              "type": "Object",
              "name": "keyType"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A list of the properties currently supported by this node. Can be used as parameter of the attribute 'getValue'",
          "children": [
            {
              "type": "String[]",
              "name": "keys"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[HACK: .descendants(type) does not work in .lara files, after GraalVM update] Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "laraDescendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the last child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "lastChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that came before this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "leftJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "line"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A string with information about the file and code position of this node, if available",
          "children": [
            {
              "type": "String",
              "name": "location"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, ignoring null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "numChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope that is a parent of the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The pragmas associated with this node",
          "children": [
            {
              "type": "pragma[]",
              "name": "pragmas"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that comes after this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "rightJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the 'program' joinpoint",
          "children": [
            {
              "type": "joinpoint",
              "name": "root"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the nodes of the scope of the current join point. If this node has a body (e.g., loop, function) corresponds to the children of the body. Otherwise, returns an empty array",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "scopeNodes"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that came before this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsLeft"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that come after this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsRight"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Converts this join point to a statement, or returns undefined if it was not possible",
          "children": [
            {
              "type": "statement",
              "name": "stmt"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "type",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrives values that have been associated to nodes of the AST with 'setUserField'",
          "children": [
            {
              "type": "Object",
              "name": "userField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a String with the type of the join point",
          "children": [
            {
              "type": "String",
              "name": "joinPointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the current join point is an instance of the given type",
          "children": [
            {
              "type": "Boolean",
              "name": "instanceOf"
            },
            {
              "type": "String",
              "name": "name"
            }
          ]
        },
        {
          "type": "select",
          "clazz": "expression",
          "alias": "expr"
        },
        {
          "type": "select",
          "clazz": "expression",
          "alias": "childExpr"
        },
        {
          "type": "select",
          "clazz": "call",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "call",
          "alias": "stmtCall"
        },
        {
          "type": "select",
          "clazz": "memberCall",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "memberAccess",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "arrayAccess",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "vardecl",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "varref",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "op",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "binaryOp",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "unaryOp",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "newExpr",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "deleteExpr",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "cilkSpawn",
          "alias": ""
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "insert"
            },
            {
              "type": "[before| after| replace]",
              "name": "position",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "def"
            },
            {
              "type": "String",
              "name": "attribute",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, but not of the nodes in its fields",
          "children": [
            {
              "type": "joinpoint",
              "name": "copy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Copies all enumerable own properties from the source object to the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataAssign"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Clears all properties from the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataClear"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, including the nodes in their fields (only the first level of field nodes, this function is not recursive)",
          "children": [
            {
              "type": "joinpoint",
              "name": "deepCopy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the node associated to this joinpoint from the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "detach"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point after this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point before this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Adds a message that will be printed to the user after weaving finishes. Identical messages are removed",
          "children": [
            {
              "type": "void",
              "name": "messageToUser"
            },
            {
              "type": "String",
              "name": "message",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the children of this node",
          "children": [
            {
              "type": "void",
              "name": "removeChildren"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this node with the given node",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of join points",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of strings",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWithStrings"
            },
            {
              "type": "String[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Setting data directly is not supported, this action just emits a warning and does nothing",
          "children": [
            {
              "type": "void",
              "name": "setData"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the first child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setFirstChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String[]",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the last child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setLastChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the type of a node, if it has a type",
          "children": [
            {
              "type": "void",
              "name": "setType"
            },
            {
              "type": "type",
              "name": "type",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Associates arbitrary values to nodes of the AST",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "String",
              "name": "fieldName",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a map",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "Map",
              "name": "fieldNameAndValue",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the value associated with the given property key",
          "children": [
            {
              "type": "joinpoint",
              "name": "setValue"
            },
            {
              "type": "String",
              "name": "key",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "suffix",
              "defaultValue": ""
            }
          ]
        }
      ]
    },
    {
      "type": "joinpoint",
      "name": "class",
      "defaultAttr": "name",
      "extends": "record",
      "tooltip": "Represents a C++ class",
      "children": [
        {
          "type": "attribute",
          "tooltip": "All the classes this class inherits from",
          "children": [
            {
              "type": "class[]",
              "name": "allBases"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "All the methods of this class, including inherited ones",
          "children": [
            {
              "type": "method[]",
              "name": "allMethods"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The classes this class directly inherits from",
          "children": [
            {
              "type": "class[]",
              "name": "bases"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Class join points can either represent declarations or definitions, returns the definition of this class, if present, or the first declaration, if only declarations are present",
          "children": [
            {
              "type": "class",
              "name": "canonical"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The implementation (or definition) of this class present in the AST, or undefined if none is found",
          "children": [
            {
              "type": "class",
              "name": "implementation"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "True, if contains at least one pure function",
          "children": [
            {
              "type": "boolean",
              "name": "isAbstract"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this is the class returned by the 'canonical' attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isCanonical"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "True, if all functions are pure",
          "children": [
            {
              "type": "boolean",
              "name": "isInterface"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The methods declared by this class",
          "children": [
            {
              "type": "method[]",
              "name": "methods"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The prototypes (or declarations) of this class present in the AST, if any",
          "children": [
            {
              "type": "class[]",
              "name": "prototypes"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "fields"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "function[]",
              "name": "functions"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this particular join point is an implementation (i.e. has its body fully specified), false otherwise",
          "children": [
            {
              "type": "Boolean",
              "name": "isImplementation"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this particular join point is a prototype (i.e. does not have its body fully specified), false otherwise",
          "children": [
            {
              "type": "Boolean",
              "name": "isPrototype"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String",
              "name": "kind"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isPublic"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String",
              "name": "name"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String",
              "name": "qualifiedName"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String",
              "name": "qualifiedPrefix"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The attributes (e.g. Pure, CUDAGlobal) associated to this decl",
          "children": [
            {
              "type": "attribute[]",
              "name": "attrs"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "attributes"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "selects"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "actions"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "ancestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with a dump of the AST representation starting from this node. This representation corresponds to the internal Java representation of the ClavaAst, where the node names correspond to Java classes. To get an equivalent representation with join point names, use the attribute 'dump'",
          "children": [
            {
              "type": "String",
              "name": "ast"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor AST name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "astAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, considering null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "astChild"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, considering null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "astChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String that uniquely identifies this node",
          "children": [
            {
              "type": "String",
              "name": "astId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if this node is a Java instance of the given name, which corresponds to a simple Java class name of an AST node. For an equivalent function for join point names, use 'instanceOf(joinPointName)'",
          "children": [
            {
              "type": "boolean",
              "name": "astIsInstance"
            },
            {
              "type": "String",
              "name": "className"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the Java class of this node, which is similar to the equivalent node in Clang AST",
          "children": [
            {
              "type": "String",
              "name": "astName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, considering null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "astNumChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "astParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The bit width of the type returned by this join point, in relation to the definitions of its Translation Unit, or undefined if there is no type or bitwidth defined, or if the join point is not in a TranslationUnit",
          "children": [
            {
              "type": "Integer",
              "name": "bitWidth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String list of the names of the join points that form a path from the root to this node",
          "children": [
            {
              "type": "String[]",
              "name": "chain"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the joinpoint chain",
          "children": [
            {
              "type": "joinpoint",
              "name": "chainAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "child"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "children"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the code represented by this node",
          "children": [
            {
              "type": "String",
              "name": "code"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "column"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the given node is a descendant of this node",
          "children": [
            {
              "type": "Boolean",
              "name": "contains"
            },
            {
              "type": "joinpoint",
              "name": "jp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "currentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "JS object associated with this node, containing parsed data of #pragma clava data when the node can be a target of pragmas. This is a special object, managed internally, and cannot be reassigned, to change its contents requires using key-value pairs. If the node can be the target of a pragma, the information stored in this object is persisted between rebuilds.",
          "children": [
            {
              "type": "Object",
              "name": "data"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the depth of this join point in the AST. If it is the root join point returns 0, if it is a child of the root node returns 1, etc.",
          "children": [
            {
              "type": "Integer",
              "name": "depth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves all descendants of the join point",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type, including the node itself",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendantsAndSelf"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endColumn"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endLine"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the file where the code of this node is located, if available",
          "children": [
            {
              "type": "String",
              "name": "filename"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the complete path to the file where the code of this node comes from",
          "children": [
            {
              "type": "String",
              "name": "filepath"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the first child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks in the descendants for the first node of the given type",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstJp"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use 'userField' instead]",
          "children": [
            {
              "type": "Object",
              "name": "getUserField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The value associated with the given property key",
          "children": [
            {
              "type": "Object",
              "name": "getValue"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use hasParent instead]",
          "children": [
            {
              "type": "boolean",
              "name": "hasAstParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the node has children, false otherwise",
          "children": [
            {
              "type": "Boolean",
              "name": "hasChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the given join point or AST node is the same (== test) as the current join point AST node",
          "children": [
            {
              "type": "Boolean",
              "name": "hasNode"
            },
            {
              "type": "Object",
              "name": "nodeOrJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this node has a parent",
          "children": [
            {
              "type": "boolean",
              "name": "hasParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point has a type",
          "children": [
            {
              "type": "Boolean",
              "name": "hasType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns comments that are not explicitly in the AST, but embedded in other nodes",
          "children": [
            {
              "type": "comment[]",
              "name": "inlineComments"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this is a Cilk node (i.e., cilk_spawn, cilk_sync or cilk_for)",
          "children": [
            {
              "type": "Boolean",
              "name": "isCilk"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is part of a system header file",
          "children": [
            {
              "type": "Boolean",
              "name": "isInSystemHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a header (e.g., if condition, for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a loop header (e.g., for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideLoopHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if any descendant or the node itself was defined as a macro",
          "children": [
            {
              "type": "Boolean",
              "name": "isMacro"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the full Java class name of the type of the Java field with the provided name",
          "children": [
            {
              "type": "String",
              "name": "javaFieldType"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'keys' instead, together with 'getValue'] The names of the Java fields of this node. Can be used as key of the attribute 'javaValue'",
          "children": [
            {
              "type": "String[]",
              "name": "javaFields"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'getValue' instead, with the names returned by the attribute 'keys'] Returns the value associated with the provided Java field name",
          "children": [
            {
              "type": "Object",
              "name": "javaValue"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use joinPointType instead (uppercase P)]",
          "children": [
            {
              "type": "String",
              "name": "joinpointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Id that is based on the position of the node in the code, and should remain stable between compilations (warning: only a few nodes - file, function, loop - currently support it)",
          "children": [
            {
              "type": "String",
              "name": "jpId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Java Class instance with the type of the given key",
          "children": [
            {
              "type": "Object",
              "name": "keyType"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A list of the properties currently supported by this node. Can be used as parameter of the attribute 'getValue'",
          "children": [
            {
              "type": "String[]",
              "name": "keys"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[HACK: .descendants(type) does not work in .lara files, after GraalVM update] Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "laraDescendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the last child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "lastChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that came before this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "leftJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "line"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A string with information about the file and code position of this node, if available",
          "children": [
            {
              "type": "String",
              "name": "location"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, ignoring null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "numChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope that is a parent of the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The pragmas associated with this node",
          "children": [
            {
              "type": "pragma[]",
              "name": "pragmas"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that comes after this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "rightJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the 'program' joinpoint",
          "children": [
            {
              "type": "joinpoint",
              "name": "root"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the nodes of the scope of the current join point. If this node has a body (e.g., loop, function) corresponds to the children of the body. Otherwise, returns an empty array",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "scopeNodes"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that came before this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsLeft"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that come after this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsRight"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Converts this join point to a statement, or returns undefined if it was not possible",
          "children": [
            {
              "type": "statement",
              "name": "stmt"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "type",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrives values that have been associated to nodes of the AST with 'setUserField'",
          "children": [
            {
              "type": "Object",
              "name": "userField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a String with the type of the join point",
          "children": [
            {
              "type": "String",
              "name": "joinPointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the current join point is an instance of the given type",
          "children": [
            {
              "type": "Boolean",
              "name": "instanceOf"
            },
            {
              "type": "String",
              "name": "name"
            }
          ]
        },
        {
          "type": "select",
          "clazz": "method",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "field",
          "alias": ""
        },
        {
          "type": "action",
          "tooltip": "Adds a method to a class. If the given method has a definition, creates an equivalent declaration and adds it to the class, otherwise simply added the declaration to the class. In both cases, the declaration is only added to the class if there is no declaration already with the same signature.",
          "children": [
            {
              "type": "void",
              "name": "addMethod"
            },
            {
              "type": "method",
              "name": "method",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Adds a field to a record (struct, class).",
          "children": [
            {
              "type": "void",
              "name": "addField"
            },
            {
              "type": "field",
              "name": "field",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the name of this namedDecl",
          "children": [
            {
              "type": "void",
              "name": "setName"
            },
            {
              "type": "String",
              "name": "name",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the qualified name of this namedDecl (changes both the name and qualified prefix)",
          "children": [
            {
              "type": "void",
              "name": "setQualifiedName"
            },
            {
              "type": "String",
              "name": "name",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the qualified prefix of this namedDecl",
          "children": [
            {
              "type": "void",
              "name": "setQualifiedPrefix"
            },
            {
              "type": "String",
              "name": "qualifiedPrefix",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "insert"
            },
            {
              "type": "[before| after| replace]",
              "name": "position",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "def"
            },
            {
              "type": "String",
              "name": "attribute",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, but not of the nodes in its fields",
          "children": [
            {
              "type": "joinpoint",
              "name": "copy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Copies all enumerable own properties from the source object to the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataAssign"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Clears all properties from the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataClear"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, including the nodes in their fields (only the first level of field nodes, this function is not recursive)",
          "children": [
            {
              "type": "joinpoint",
              "name": "deepCopy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the node associated to this joinpoint from the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "detach"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point after this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point before this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Adds a message that will be printed to the user after weaving finishes. Identical messages are removed",
          "children": [
            {
              "type": "void",
              "name": "messageToUser"
            },
            {
              "type": "String",
              "name": "message",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the children of this node",
          "children": [
            {
              "type": "void",
              "name": "removeChildren"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this node with the given node",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of join points",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of strings",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWithStrings"
            },
            {
              "type": "String[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Setting data directly is not supported, this action just emits a warning and does nothing",
          "children": [
            {
              "type": "void",
              "name": "setData"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the first child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setFirstChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String[]",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the last child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setLastChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the type of a node, if it has a type",
          "children": [
            {
              "type": "void",
              "name": "setType"
            },
            {
              "type": "type",
              "name": "type",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Associates arbitrary values to nodes of the AST",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "String",
              "name": "fieldName",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a map",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "Map",
              "name": "fieldNameAndValue",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the value associated with the given property key",
          "children": [
            {
              "type": "joinpoint",
              "name": "setValue"
            },
            {
              "type": "String",
              "name": "key",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "suffix",
              "defaultValue": ""
            }
          ]
        }
      ]
    },
    {
      "type": "joinpoint",
      "name": "clavaException",
      "extends": "joinpoint",
      "tooltip": "Utility joinpoint, to represent certain problems when generating join points",
      "children": [
        {
          "type": "attribute",
          "children": [
            {
              "type": "Object",
              "name": "exception"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String",
              "name": "exceptionType"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String",
              "name": "message"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "attributes"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "selects"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "actions"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "ancestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with a dump of the AST representation starting from this node. This representation corresponds to the internal Java representation of the ClavaAst, where the node names correspond to Java classes. To get an equivalent representation with join point names, use the attribute 'dump'",
          "children": [
            {
              "type": "String",
              "name": "ast"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor AST name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "astAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, considering null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "astChild"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, considering null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "astChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String that uniquely identifies this node",
          "children": [
            {
              "type": "String",
              "name": "astId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if this node is a Java instance of the given name, which corresponds to a simple Java class name of an AST node. For an equivalent function for join point names, use 'instanceOf(joinPointName)'",
          "children": [
            {
              "type": "boolean",
              "name": "astIsInstance"
            },
            {
              "type": "String",
              "name": "className"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the Java class of this node, which is similar to the equivalent node in Clang AST",
          "children": [
            {
              "type": "String",
              "name": "astName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, considering null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "astNumChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "astParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The bit width of the type returned by this join point, in relation to the definitions of its Translation Unit, or undefined if there is no type or bitwidth defined, or if the join point is not in a TranslationUnit",
          "children": [
            {
              "type": "Integer",
              "name": "bitWidth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String list of the names of the join points that form a path from the root to this node",
          "children": [
            {
              "type": "String[]",
              "name": "chain"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the joinpoint chain",
          "children": [
            {
              "type": "joinpoint",
              "name": "chainAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "child"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "children"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the code represented by this node",
          "children": [
            {
              "type": "String",
              "name": "code"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "column"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the given node is a descendant of this node",
          "children": [
            {
              "type": "Boolean",
              "name": "contains"
            },
            {
              "type": "joinpoint",
              "name": "jp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "currentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "JS object associated with this node, containing parsed data of #pragma clava data when the node can be a target of pragmas. This is a special object, managed internally, and cannot be reassigned, to change its contents requires using key-value pairs. If the node can be the target of a pragma, the information stored in this object is persisted between rebuilds.",
          "children": [
            {
              "type": "Object",
              "name": "data"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the depth of this join point in the AST. If it is the root join point returns 0, if it is a child of the root node returns 1, etc.",
          "children": [
            {
              "type": "Integer",
              "name": "depth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves all descendants of the join point",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type, including the node itself",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendantsAndSelf"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endColumn"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endLine"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the file where the code of this node is located, if available",
          "children": [
            {
              "type": "String",
              "name": "filename"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the complete path to the file where the code of this node comes from",
          "children": [
            {
              "type": "String",
              "name": "filepath"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the first child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks in the descendants for the first node of the given type",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstJp"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use 'userField' instead]",
          "children": [
            {
              "type": "Object",
              "name": "getUserField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The value associated with the given property key",
          "children": [
            {
              "type": "Object",
              "name": "getValue"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use hasParent instead]",
          "children": [
            {
              "type": "boolean",
              "name": "hasAstParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the node has children, false otherwise",
          "children": [
            {
              "type": "Boolean",
              "name": "hasChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the given join point or AST node is the same (== test) as the current join point AST node",
          "children": [
            {
              "type": "Boolean",
              "name": "hasNode"
            },
            {
              "type": "Object",
              "name": "nodeOrJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this node has a parent",
          "children": [
            {
              "type": "boolean",
              "name": "hasParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point has a type",
          "children": [
            {
              "type": "Boolean",
              "name": "hasType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns comments that are not explicitly in the AST, but embedded in other nodes",
          "children": [
            {
              "type": "comment[]",
              "name": "inlineComments"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this is a Cilk node (i.e., cilk_spawn, cilk_sync or cilk_for)",
          "children": [
            {
              "type": "Boolean",
              "name": "isCilk"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is part of a system header file",
          "children": [
            {
              "type": "Boolean",
              "name": "isInSystemHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a header (e.g., if condition, for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a loop header (e.g., for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideLoopHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if any descendant or the node itself was defined as a macro",
          "children": [
            {
              "type": "Boolean",
              "name": "isMacro"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the full Java class name of the type of the Java field with the provided name",
          "children": [
            {
              "type": "String",
              "name": "javaFieldType"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'keys' instead, together with 'getValue'] The names of the Java fields of this node. Can be used as key of the attribute 'javaValue'",
          "children": [
            {
              "type": "String[]",
              "name": "javaFields"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'getValue' instead, with the names returned by the attribute 'keys'] Returns the value associated with the provided Java field name",
          "children": [
            {
              "type": "Object",
              "name": "javaValue"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use joinPointType instead (uppercase P)]",
          "children": [
            {
              "type": "String",
              "name": "joinpointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Id that is based on the position of the node in the code, and should remain stable between compilations (warning: only a few nodes - file, function, loop - currently support it)",
          "children": [
            {
              "type": "String",
              "name": "jpId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Java Class instance with the type of the given key",
          "children": [
            {
              "type": "Object",
              "name": "keyType"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A list of the properties currently supported by this node. Can be used as parameter of the attribute 'getValue'",
          "children": [
            {
              "type": "String[]",
              "name": "keys"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[HACK: .descendants(type) does not work in .lara files, after GraalVM update] Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "laraDescendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the last child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "lastChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that came before this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "leftJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "line"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A string with information about the file and code position of this node, if available",
          "children": [
            {
              "type": "String",
              "name": "location"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, ignoring null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "numChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope that is a parent of the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The pragmas associated with this node",
          "children": [
            {
              "type": "pragma[]",
              "name": "pragmas"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that comes after this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "rightJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the 'program' joinpoint",
          "children": [
            {
              "type": "joinpoint",
              "name": "root"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the nodes of the scope of the current join point. If this node has a body (e.g., loop, function) corresponds to the children of the body. Otherwise, returns an empty array",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "scopeNodes"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that came before this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsLeft"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that come after this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsRight"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Converts this join point to a statement, or returns undefined if it was not possible",
          "children": [
            {
              "type": "statement",
              "name": "stmt"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "type",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrives values that have been associated to nodes of the AST with 'setUserField'",
          "children": [
            {
              "type": "Object",
              "name": "userField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a String with the type of the join point",
          "children": [
            {
              "type": "String",
              "name": "joinPointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the current join point is an instance of the given type",
          "children": [
            {
              "type": "Boolean",
              "name": "instanceOf"
            },
            {
              "type": "String",
              "name": "name"
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "insert"
            },
            {
              "type": "[before| after| replace]",
              "name": "position",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "def"
            },
            {
              "type": "String",
              "name": "attribute",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, but not of the nodes in its fields",
          "children": [
            {
              "type": "joinpoint",
              "name": "copy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Copies all enumerable own properties from the source object to the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataAssign"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Clears all properties from the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataClear"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, including the nodes in their fields (only the first level of field nodes, this function is not recursive)",
          "children": [
            {
              "type": "joinpoint",
              "name": "deepCopy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the node associated to this joinpoint from the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "detach"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point after this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point before this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Adds a message that will be printed to the user after weaving finishes. Identical messages are removed",
          "children": [
            {
              "type": "void",
              "name": "messageToUser"
            },
            {
              "type": "String",
              "name": "message",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the children of this node",
          "children": [
            {
              "type": "void",
              "name": "removeChildren"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this node with the given node",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of join points",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of strings",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWithStrings"
            },
            {
              "type": "String[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Setting data directly is not supported, this action just emits a warning and does nothing",
          "children": [
            {
              "type": "void",
              "name": "setData"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the first child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setFirstChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String[]",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the last child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setLastChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the type of a node, if it has a type",
          "children": [
            {
              "type": "void",
              "name": "setType"
            },
            {
              "type": "type",
              "name": "type",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Associates arbitrary values to nodes of the AST",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "String",
              "name": "fieldName",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a map",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "Map",
              "name": "fieldNameAndValue",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the value associated with the given property key",
          "children": [
            {
              "type": "joinpoint",
              "name": "setValue"
            },
            {
              "type": "String",
              "name": "key",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "suffix",
              "defaultValue": ""
            }
          ]
        }
      ]
    },
    {
      "type": "joinpoint",
      "name": "comment",
      "extends": "joinpoint",
      "children": [
        {
          "type": "attribute",
          "children": [
            {
              "type": "String",
              "name": "text"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "attributes"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "selects"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "actions"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "ancestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with a dump of the AST representation starting from this node. This representation corresponds to the internal Java representation of the ClavaAst, where the node names correspond to Java classes. To get an equivalent representation with join point names, use the attribute 'dump'",
          "children": [
            {
              "type": "String",
              "name": "ast"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor AST name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "astAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, considering null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "astChild"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, considering null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "astChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String that uniquely identifies this node",
          "children": [
            {
              "type": "String",
              "name": "astId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if this node is a Java instance of the given name, which corresponds to a simple Java class name of an AST node. For an equivalent function for join point names, use 'instanceOf(joinPointName)'",
          "children": [
            {
              "type": "boolean",
              "name": "astIsInstance"
            },
            {
              "type": "String",
              "name": "className"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the Java class of this node, which is similar to the equivalent node in Clang AST",
          "children": [
            {
              "type": "String",
              "name": "astName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, considering null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "astNumChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "astParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The bit width of the type returned by this join point, in relation to the definitions of its Translation Unit, or undefined if there is no type or bitwidth defined, or if the join point is not in a TranslationUnit",
          "children": [
            {
              "type": "Integer",
              "name": "bitWidth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String list of the names of the join points that form a path from the root to this node",
          "children": [
            {
              "type": "String[]",
              "name": "chain"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the joinpoint chain",
          "children": [
            {
              "type": "joinpoint",
              "name": "chainAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "child"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "children"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the code represented by this node",
          "children": [
            {
              "type": "String",
              "name": "code"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "column"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the given node is a descendant of this node",
          "children": [
            {
              "type": "Boolean",
              "name": "contains"
            },
            {
              "type": "joinpoint",
              "name": "jp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "currentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "JS object associated with this node, containing parsed data of #pragma clava data when the node can be a target of pragmas. This is a special object, managed internally, and cannot be reassigned, to change its contents requires using key-value pairs. If the node can be the target of a pragma, the information stored in this object is persisted between rebuilds.",
          "children": [
            {
              "type": "Object",
              "name": "data"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the depth of this join point in the AST. If it is the root join point returns 0, if it is a child of the root node returns 1, etc.",
          "children": [
            {
              "type": "Integer",
              "name": "depth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves all descendants of the join point",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type, including the node itself",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendantsAndSelf"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endColumn"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endLine"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the file where the code of this node is located, if available",
          "children": [
            {
              "type": "String",
              "name": "filename"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the complete path to the file where the code of this node comes from",
          "children": [
            {
              "type": "String",
              "name": "filepath"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the first child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks in the descendants for the first node of the given type",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstJp"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use 'userField' instead]",
          "children": [
            {
              "type": "Object",
              "name": "getUserField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The value associated with the given property key",
          "children": [
            {
              "type": "Object",
              "name": "getValue"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use hasParent instead]",
          "children": [
            {
              "type": "boolean",
              "name": "hasAstParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the node has children, false otherwise",
          "children": [
            {
              "type": "Boolean",
              "name": "hasChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the given join point or AST node is the same (== test) as the current join point AST node",
          "children": [
            {
              "type": "Boolean",
              "name": "hasNode"
            },
            {
              "type": "Object",
              "name": "nodeOrJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this node has a parent",
          "children": [
            {
              "type": "boolean",
              "name": "hasParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point has a type",
          "children": [
            {
              "type": "Boolean",
              "name": "hasType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns comments that are not explicitly in the AST, but embedded in other nodes",
          "children": [
            {
              "type": "comment[]",
              "name": "inlineComments"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this is a Cilk node (i.e., cilk_spawn, cilk_sync or cilk_for)",
          "children": [
            {
              "type": "Boolean",
              "name": "isCilk"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is part of a system header file",
          "children": [
            {
              "type": "Boolean",
              "name": "isInSystemHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a header (e.g., if condition, for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a loop header (e.g., for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideLoopHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if any descendant or the node itself was defined as a macro",
          "children": [
            {
              "type": "Boolean",
              "name": "isMacro"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the full Java class name of the type of the Java field with the provided name",
          "children": [
            {
              "type": "String",
              "name": "javaFieldType"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'keys' instead, together with 'getValue'] The names of the Java fields of this node. Can be used as key of the attribute 'javaValue'",
          "children": [
            {
              "type": "String[]",
              "name": "javaFields"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'getValue' instead, with the names returned by the attribute 'keys'] Returns the value associated with the provided Java field name",
          "children": [
            {
              "type": "Object",
              "name": "javaValue"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use joinPointType instead (uppercase P)]",
          "children": [
            {
              "type": "String",
              "name": "joinpointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Id that is based on the position of the node in the code, and should remain stable between compilations (warning: only a few nodes - file, function, loop - currently support it)",
          "children": [
            {
              "type": "String",
              "name": "jpId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Java Class instance with the type of the given key",
          "children": [
            {
              "type": "Object",
              "name": "keyType"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A list of the properties currently supported by this node. Can be used as parameter of the attribute 'getValue'",
          "children": [
            {
              "type": "String[]",
              "name": "keys"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[HACK: .descendants(type) does not work in .lara files, after GraalVM update] Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "laraDescendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the last child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "lastChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that came before this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "leftJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "line"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A string with information about the file and code position of this node, if available",
          "children": [
            {
              "type": "String",
              "name": "location"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, ignoring null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "numChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope that is a parent of the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The pragmas associated with this node",
          "children": [
            {
              "type": "pragma[]",
              "name": "pragmas"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that comes after this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "rightJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the 'program' joinpoint",
          "children": [
            {
              "type": "joinpoint",
              "name": "root"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the nodes of the scope of the current join point. If this node has a body (e.g., loop, function) corresponds to the children of the body. Otherwise, returns an empty array",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "scopeNodes"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that came before this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsLeft"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that come after this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsRight"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Converts this join point to a statement, or returns undefined if it was not possible",
          "children": [
            {
              "type": "statement",
              "name": "stmt"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "type",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrives values that have been associated to nodes of the AST with 'setUserField'",
          "children": [
            {
              "type": "Object",
              "name": "userField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a String with the type of the join point",
          "children": [
            {
              "type": "String",
              "name": "joinPointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the current join point is an instance of the given type",
          "children": [
            {
              "type": "Boolean",
              "name": "instanceOf"
            },
            {
              "type": "String",
              "name": "name"
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "setText"
            },
            {
              "type": "String",
              "name": "text",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "insert"
            },
            {
              "type": "[before| after| replace]",
              "name": "position",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "def"
            },
            {
              "type": "String",
              "name": "attribute",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, but not of the nodes in its fields",
          "children": [
            {
              "type": "joinpoint",
              "name": "copy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Copies all enumerable own properties from the source object to the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataAssign"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Clears all properties from the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataClear"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, including the nodes in their fields (only the first level of field nodes, this function is not recursive)",
          "children": [
            {
              "type": "joinpoint",
              "name": "deepCopy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the node associated to this joinpoint from the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "detach"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point after this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point before this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Adds a message that will be printed to the user after weaving finishes. Identical messages are removed",
          "children": [
            {
              "type": "void",
              "name": "messageToUser"
            },
            {
              "type": "String",
              "name": "message",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the children of this node",
          "children": [
            {
              "type": "void",
              "name": "removeChildren"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this node with the given node",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of join points",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of strings",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWithStrings"
            },
            {
              "type": "String[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Setting data directly is not supported, this action just emits a warning and does nothing",
          "children": [
            {
              "type": "void",
              "name": "setData"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the first child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setFirstChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String[]",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the last child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setLastChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the type of a node, if it has a type",
          "children": [
            {
              "type": "void",
              "name": "setType"
            },
            {
              "type": "type",
              "name": "type",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Associates arbitrary values to nodes of the AST",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "String",
              "name": "fieldName",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a map",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "Map",
              "name": "fieldNameAndValue",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the value associated with the given property key",
          "children": [
            {
              "type": "joinpoint",
              "name": "setValue"
            },
            {
              "type": "String",
              "name": "key",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "suffix",
              "defaultValue": ""
            }
          ]
        }
      ]
    },
    {
      "type": "joinpoint",
      "name": "continue",
      "extends": "statement",
      "children": [
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isFirst"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isLast"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "attributes"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "selects"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "actions"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "ancestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with a dump of the AST representation starting from this node. This representation corresponds to the internal Java representation of the ClavaAst, where the node names correspond to Java classes. To get an equivalent representation with join point names, use the attribute 'dump'",
          "children": [
            {
              "type": "String",
              "name": "ast"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor AST name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "astAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, considering null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "astChild"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, considering null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "astChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String that uniquely identifies this node",
          "children": [
            {
              "type": "String",
              "name": "astId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if this node is a Java instance of the given name, which corresponds to a simple Java class name of an AST node. For an equivalent function for join point names, use 'instanceOf(joinPointName)'",
          "children": [
            {
              "type": "boolean",
              "name": "astIsInstance"
            },
            {
              "type": "String",
              "name": "className"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the Java class of this node, which is similar to the equivalent node in Clang AST",
          "children": [
            {
              "type": "String",
              "name": "astName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, considering null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "astNumChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "astParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The bit width of the type returned by this join point, in relation to the definitions of its Translation Unit, or undefined if there is no type or bitwidth defined, or if the join point is not in a TranslationUnit",
          "children": [
            {
              "type": "Integer",
              "name": "bitWidth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String list of the names of the join points that form a path from the root to this node",
          "children": [
            {
              "type": "String[]",
              "name": "chain"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the joinpoint chain",
          "children": [
            {
              "type": "joinpoint",
              "name": "chainAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "child"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "children"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the code represented by this node",
          "children": [
            {
              "type": "String",
              "name": "code"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "column"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the given node is a descendant of this node",
          "children": [
            {
              "type": "Boolean",
              "name": "contains"
            },
            {
              "type": "joinpoint",
              "name": "jp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "currentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "JS object associated with this node, containing parsed data of #pragma clava data when the node can be a target of pragmas. This is a special object, managed internally, and cannot be reassigned, to change its contents requires using key-value pairs. If the node can be the target of a pragma, the information stored in this object is persisted between rebuilds.",
          "children": [
            {
              "type": "Object",
              "name": "data"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the depth of this join point in the AST. If it is the root join point returns 0, if it is a child of the root node returns 1, etc.",
          "children": [
            {
              "type": "Integer",
              "name": "depth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves all descendants of the join point",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type, including the node itself",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendantsAndSelf"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endColumn"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endLine"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the file where the code of this node is located, if available",
          "children": [
            {
              "type": "String",
              "name": "filename"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the complete path to the file where the code of this node comes from",
          "children": [
            {
              "type": "String",
              "name": "filepath"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the first child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks in the descendants for the first node of the given type",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstJp"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use 'userField' instead]",
          "children": [
            {
              "type": "Object",
              "name": "getUserField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The value associated with the given property key",
          "children": [
            {
              "type": "Object",
              "name": "getValue"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use hasParent instead]",
          "children": [
            {
              "type": "boolean",
              "name": "hasAstParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the node has children, false otherwise",
          "children": [
            {
              "type": "Boolean",
              "name": "hasChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the given join point or AST node is the same (== test) as the current join point AST node",
          "children": [
            {
              "type": "Boolean",
              "name": "hasNode"
            },
            {
              "type": "Object",
              "name": "nodeOrJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this node has a parent",
          "children": [
            {
              "type": "boolean",
              "name": "hasParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point has a type",
          "children": [
            {
              "type": "Boolean",
              "name": "hasType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns comments that are not explicitly in the AST, but embedded in other nodes",
          "children": [
            {
              "type": "comment[]",
              "name": "inlineComments"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this is a Cilk node (i.e., cilk_spawn, cilk_sync or cilk_for)",
          "children": [
            {
              "type": "Boolean",
              "name": "isCilk"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is part of a system header file",
          "children": [
            {
              "type": "Boolean",
              "name": "isInSystemHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a header (e.g., if condition, for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a loop header (e.g., for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideLoopHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if any descendant or the node itself was defined as a macro",
          "children": [
            {
              "type": "Boolean",
              "name": "isMacro"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the full Java class name of the type of the Java field with the provided name",
          "children": [
            {
              "type": "String",
              "name": "javaFieldType"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'keys' instead, together with 'getValue'] The names of the Java fields of this node. Can be used as key of the attribute 'javaValue'",
          "children": [
            {
              "type": "String[]",
              "name": "javaFields"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'getValue' instead, with the names returned by the attribute 'keys'] Returns the value associated with the provided Java field name",
          "children": [
            {
              "type": "Object",
              "name": "javaValue"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use joinPointType instead (uppercase P)]",
          "children": [
            {
              "type": "String",
              "name": "joinpointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Id that is based on the position of the node in the code, and should remain stable between compilations (warning: only a few nodes - file, function, loop - currently support it)",
          "children": [
            {
              "type": "String",
              "name": "jpId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Java Class instance with the type of the given key",
          "children": [
            {
              "type": "Object",
              "name": "keyType"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A list of the properties currently supported by this node. Can be used as parameter of the attribute 'getValue'",
          "children": [
            {
              "type": "String[]",
              "name": "keys"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[HACK: .descendants(type) does not work in .lara files, after GraalVM update] Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "laraDescendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the last child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "lastChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that came before this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "leftJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "line"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A string with information about the file and code position of this node, if available",
          "children": [
            {
              "type": "String",
              "name": "location"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, ignoring null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "numChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope that is a parent of the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The pragmas associated with this node",
          "children": [
            {
              "type": "pragma[]",
              "name": "pragmas"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that comes after this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "rightJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the 'program' joinpoint",
          "children": [
            {
              "type": "joinpoint",
              "name": "root"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the nodes of the scope of the current join point. If this node has a body (e.g., loop, function) corresponds to the children of the body. Otherwise, returns an empty array",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "scopeNodes"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that came before this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsLeft"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that come after this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsRight"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Converts this join point to a statement, or returns undefined if it was not possible",
          "children": [
            {
              "type": "statement",
              "name": "stmt"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "type",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrives values that have been associated to nodes of the AST with 'setUserField'",
          "children": [
            {
              "type": "Object",
              "name": "userField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a String with the type of the join point",
          "children": [
            {
              "type": "String",
              "name": "joinPointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the current join point is an instance of the given type",
          "children": [
            {
              "type": "Boolean",
              "name": "instanceOf"
            },
            {
              "type": "String",
              "name": "name"
            }
          ]
        },
        {
          "type": "select",
          "clazz": "expression",
          "alias": "expr"
        },
        {
          "type": "select",
          "clazz": "expression",
          "alias": "childExpr"
        },
        {
          "type": "select",
          "clazz": "call",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "call",
          "alias": "stmtCall"
        },
        {
          "type": "select",
          "clazz": "memberCall",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "memberAccess",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "arrayAccess",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "vardecl",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "varref",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "op",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "binaryOp",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "unaryOp",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "newExpr",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "deleteExpr",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "cilkSpawn",
          "alias": ""
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "insert"
            },
            {
              "type": "[before| after| replace]",
              "name": "position",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "def"
            },
            {
              "type": "String",
              "name": "attribute",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, but not of the nodes in its fields",
          "children": [
            {
              "type": "joinpoint",
              "name": "copy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Copies all enumerable own properties from the source object to the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataAssign"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Clears all properties from the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataClear"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, including the nodes in their fields (only the first level of field nodes, this function is not recursive)",
          "children": [
            {
              "type": "joinpoint",
              "name": "deepCopy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the node associated to this joinpoint from the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "detach"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point after this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point before this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Adds a message that will be printed to the user after weaving finishes. Identical messages are removed",
          "children": [
            {
              "type": "void",
              "name": "messageToUser"
            },
            {
              "type": "String",
              "name": "message",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the children of this node",
          "children": [
            {
              "type": "void",
              "name": "removeChildren"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this node with the given node",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of join points",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of strings",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWithStrings"
            },
            {
              "type": "String[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Setting data directly is not supported, this action just emits a warning and does nothing",
          "children": [
            {
              "type": "void",
              "name": "setData"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the first child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setFirstChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String[]",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the last child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setLastChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the type of a node, if it has a type",
          "children": [
            {
              "type": "void",
              "name": "setType"
            },
            {
              "type": "type",
              "name": "type",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Associates arbitrary values to nodes of the AST",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "String",
              "name": "fieldName",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a map",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "Map",
              "name": "fieldNameAndValue",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the value associated with the given property key",
          "children": [
            {
              "type": "joinpoint",
              "name": "setValue"
            },
            {
              "type": "String",
              "name": "key",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "suffix",
              "defaultValue": ""
            }
          ]
        }
      ]
    },
    {
      "type": "joinpoint",
      "name": "cudaKernelCall",
      "defaultAttr": "name",
      "extends": "call",
      "children": [
        {
          "type": "attribute",
          "children": [
            {
              "type": "expression[]",
              "name": "config"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "expression",
              "name": "arg"
            },
            {
              "type": "int",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "an alias for 'args'",
          "children": [
            {
              "type": "expression[]",
              "name": "argList"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "an array with the arguments of the call",
          "children": [
            {
              "type": "expression[]",
              "name": "args"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a 'function' join point that represents the function of the call that was found, it can return either an implementation or a function prototype; 'undefined' if no declaration was found",
          "children": [
            {
              "type": "function",
              "name": "declaration"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a 'function' join point that represents the function definition of the call; 'undefined' if no definition was found",
          "children": [
            {
              "type": "function",
              "name": "definition"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a function join point that represents the 'raw' function of the call (e.g. if this is a call to a templated function, returns a declaration representing the template specialization, instead of the original function)",
          "children": [
            {
              "type": "function",
              "name": "directCallee"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a function join point associated with this call. If a definition is present, it is given priority over returning a declaration. If only declarations are present, returns a declaration",
          "children": [
            {
              "type": "function",
              "name": "function"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the function type of the call, which includes the return type and the types of the parameters",
          "children": [
            {
              "type": "functionType",
              "name": "functionType"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "boolean",
              "name": "isMemberAccess"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "boolean",
              "name": "isStmtCall"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "memberAccess",
              "name": "memberAccess"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "memberNames"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String",
              "name": "name"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Integer",
              "name": "numArgs"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the return type of the call",
          "children": [
            {
              "type": "type",
              "name": "returnType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "similar to $function.signature, but if no function decl could be found (e.g., function from system include), returns a signature based on just the name of the function",
          "children": [
            {
              "type": "String",
              "name": "signature"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a 'decl' join point that represents the declaration associated with this expression, or undefined if there is none",
          "children": [
            {
              "type": "decl",
              "name": "decl"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "returns a cast joinpoint if this expression has an associated implicit cast, undefined otherwise",
          "children": [
            {
              "type": "cast",
              "name": "implicitCast"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the expression is part of an argument of a function call",
          "children": [
            {
              "type": "Boolean",
              "name": "isFunctionArgument"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "[read| write| readwrite]",
              "name": "use"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "vardecl",
              "name": "vardecl"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "attributes"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "selects"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "actions"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "ancestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with a dump of the AST representation starting from this node. This representation corresponds to the internal Java representation of the ClavaAst, where the node names correspond to Java classes. To get an equivalent representation with join point names, use the attribute 'dump'",
          "children": [
            {
              "type": "String",
              "name": "ast"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor AST name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "astAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, considering null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "astChild"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, considering null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "astChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String that uniquely identifies this node",
          "children": [
            {
              "type": "String",
              "name": "astId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if this node is a Java instance of the given name, which corresponds to a simple Java class name of an AST node. For an equivalent function for join point names, use 'instanceOf(joinPointName)'",
          "children": [
            {
              "type": "boolean",
              "name": "astIsInstance"
            },
            {
              "type": "String",
              "name": "className"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the Java class of this node, which is similar to the equivalent node in Clang AST",
          "children": [
            {
              "type": "String",
              "name": "astName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, considering null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "astNumChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "astParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The bit width of the type returned by this join point, in relation to the definitions of its Translation Unit, or undefined if there is no type or bitwidth defined, or if the join point is not in a TranslationUnit",
          "children": [
            {
              "type": "Integer",
              "name": "bitWidth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String list of the names of the join points that form a path from the root to this node",
          "children": [
            {
              "type": "String[]",
              "name": "chain"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the joinpoint chain",
          "children": [
            {
              "type": "joinpoint",
              "name": "chainAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "child"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "children"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the code represented by this node",
          "children": [
            {
              "type": "String",
              "name": "code"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "column"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the given node is a descendant of this node",
          "children": [
            {
              "type": "Boolean",
              "name": "contains"
            },
            {
              "type": "joinpoint",
              "name": "jp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "currentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "JS object associated with this node, containing parsed data of #pragma clava data when the node can be a target of pragmas. This is a special object, managed internally, and cannot be reassigned, to change its contents requires using key-value pairs. If the node can be the target of a pragma, the information stored in this object is persisted between rebuilds.",
          "children": [
            {
              "type": "Object",
              "name": "data"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the depth of this join point in the AST. If it is the root join point returns 0, if it is a child of the root node returns 1, etc.",
          "children": [
            {
              "type": "Integer",
              "name": "depth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves all descendants of the join point",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type, including the node itself",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendantsAndSelf"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endColumn"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endLine"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the file where the code of this node is located, if available",
          "children": [
            {
              "type": "String",
              "name": "filename"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the complete path to the file where the code of this node comes from",
          "children": [
            {
              "type": "String",
              "name": "filepath"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the first child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks in the descendants for the first node of the given type",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstJp"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use 'userField' instead]",
          "children": [
            {
              "type": "Object",
              "name": "getUserField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The value associated with the given property key",
          "children": [
            {
              "type": "Object",
              "name": "getValue"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use hasParent instead]",
          "children": [
            {
              "type": "boolean",
              "name": "hasAstParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the node has children, false otherwise",
          "children": [
            {
              "type": "Boolean",
              "name": "hasChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the given join point or AST node is the same (== test) as the current join point AST node",
          "children": [
            {
              "type": "Boolean",
              "name": "hasNode"
            },
            {
              "type": "Object",
              "name": "nodeOrJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this node has a parent",
          "children": [
            {
              "type": "boolean",
              "name": "hasParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point has a type",
          "children": [
            {
              "type": "Boolean",
              "name": "hasType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns comments that are not explicitly in the AST, but embedded in other nodes",
          "children": [
            {
              "type": "comment[]",
              "name": "inlineComments"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this is a Cilk node (i.e., cilk_spawn, cilk_sync or cilk_for)",
          "children": [
            {
              "type": "Boolean",
              "name": "isCilk"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is part of a system header file",
          "children": [
            {
              "type": "Boolean",
              "name": "isInSystemHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a header (e.g., if condition, for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a loop header (e.g., for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideLoopHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if any descendant or the node itself was defined as a macro",
          "children": [
            {
              "type": "Boolean",
              "name": "isMacro"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the full Java class name of the type of the Java field with the provided name",
          "children": [
            {
              "type": "String",
              "name": "javaFieldType"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'keys' instead, together with 'getValue'] The names of the Java fields of this node. Can be used as key of the attribute 'javaValue'",
          "children": [
            {
              "type": "String[]",
              "name": "javaFields"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'getValue' instead, with the names returned by the attribute 'keys'] Returns the value associated with the provided Java field name",
          "children": [
            {
              "type": "Object",
              "name": "javaValue"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use joinPointType instead (uppercase P)]",
          "children": [
            {
              "type": "String",
              "name": "joinpointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Id that is based on the position of the node in the code, and should remain stable between compilations (warning: only a few nodes - file, function, loop - currently support it)",
          "children": [
            {
              "type": "String",
              "name": "jpId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Java Class instance with the type of the given key",
          "children": [
            {
              "type": "Object",
              "name": "keyType"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A list of the properties currently supported by this node. Can be used as parameter of the attribute 'getValue'",
          "children": [
            {
              "type": "String[]",
              "name": "keys"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[HACK: .descendants(type) does not work in .lara files, after GraalVM update] Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "laraDescendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the last child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "lastChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that came before this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "leftJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "line"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A string with information about the file and code position of this node, if available",
          "children": [
            {
              "type": "String",
              "name": "location"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, ignoring null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "numChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope that is a parent of the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The pragmas associated with this node",
          "children": [
            {
              "type": "pragma[]",
              "name": "pragmas"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that comes after this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "rightJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the 'program' joinpoint",
          "children": [
            {
              "type": "joinpoint",
              "name": "root"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the nodes of the scope of the current join point. If this node has a body (e.g., loop, function) corresponds to the children of the body. Otherwise, returns an empty array",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "scopeNodes"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that came before this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsLeft"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that come after this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsRight"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Converts this join point to a statement, or returns undefined if it was not possible",
          "children": [
            {
              "type": "statement",
              "name": "stmt"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "type",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrives values that have been associated to nodes of the AST with 'setUserField'",
          "children": [
            {
              "type": "Object",
              "name": "userField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a String with the type of the join point",
          "children": [
            {
              "type": "String",
              "name": "joinPointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the current join point is an instance of the given type",
          "children": [
            {
              "type": "Boolean",
              "name": "instanceOf"
            },
            {
              "type": "String",
              "name": "name"
            }
          ]
        },
        {
          "type": "select",
          "clazz": "expression",
          "alias": "callee"
        },
        {
          "type": "select",
          "clazz": "expression",
          "alias": "arg"
        },
        {
          "type": "select",
          "clazz": "vardecl",
          "alias": ""
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "setConfig"
            },
            {
              "type": "expression[]",
              "name": "args",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "setConfigFromStrings"
            },
            {
              "type": "String[]",
              "name": "args",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Adds an argument at the end of the call, creating an expression using the given code and type",
          "children": [
            {
              "type": "void",
              "name": "addArg"
            },
            {
              "type": "String",
              "name": "argCode",
              "defaultValue": ""
            },
            {
              "type": "type",
              "name": "type",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Adds an argument at the end of the call, creating a literal 'type' from the type string",
          "children": [
            {
              "type": "void",
              "name": "addArg"
            },
            {
              "type": "String",
              "name": "arg",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "type",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Adds an argument at the end of the call, creating an expression using a dummy type",
          "children": [
            {
              "type": "void",
              "name": "addArg"
            },
            {
              "type": "String",
              "name": "argCode",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Tries to inline this call",
          "children": [
            {
              "type": "boolean",
              "name": "inline"
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "setArg"
            },
            {
              "type": "Integer",
              "name": "index",
              "defaultValue": ""
            },
            {
              "type": "expression",
              "name": "expr",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "setArgFromString"
            },
            {
              "type": "int",
              "name": "index",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "expr",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Changes the name of the call",
          "children": [
            {
              "type": "void",
              "name": "setName"
            },
            {
              "type": "String",
              "name": "name",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Wraps this call with a possibly new wrapping function",
          "children": [
            {
              "type": "void",
              "name": "wrap"
            },
            {
              "type": "String",
              "name": "name",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "insert"
            },
            {
              "type": "[before| after| replace]",
              "name": "position",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "def"
            },
            {
              "type": "String",
              "name": "attribute",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, but not of the nodes in its fields",
          "children": [
            {
              "type": "joinpoint",
              "name": "copy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Copies all enumerable own properties from the source object to the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataAssign"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Clears all properties from the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataClear"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, including the nodes in their fields (only the first level of field nodes, this function is not recursive)",
          "children": [
            {
              "type": "joinpoint",
              "name": "deepCopy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the node associated to this joinpoint from the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "detach"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point after this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point before this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Adds a message that will be printed to the user after weaving finishes. Identical messages are removed",
          "children": [
            {
              "type": "void",
              "name": "messageToUser"
            },
            {
              "type": "String",
              "name": "message",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the children of this node",
          "children": [
            {
              "type": "void",
              "name": "removeChildren"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this node with the given node",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of join points",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of strings",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWithStrings"
            },
            {
              "type": "String[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Setting data directly is not supported, this action just emits a warning and does nothing",
          "children": [
            {
              "type": "void",
              "name": "setData"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the first child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setFirstChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String[]",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the last child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setLastChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the type of a node, if it has a type",
          "children": [
            {
              "type": "void",
              "name": "setType"
            },
            {
              "type": "type",
              "name": "type",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Associates arbitrary values to nodes of the AST",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "String",
              "name": "fieldName",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a map",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "Map",
              "name": "fieldNameAndValue",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the value associated with the given property key",
          "children": [
            {
              "type": "joinpoint",
              "name": "setValue"
            },
            {
              "type": "String",
              "name": "key",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "suffix",
              "defaultValue": ""
            }
          ]
        }
      ]
    },
    {
      "type": "joinpoint",
      "name": "decl",
      "extends": "joinpoint",
      "tooltip": "Represents one declaration (e.g., int foo(){return 0;}) or definition (e.g., int foo();) in the code",
      "children": [
        {
          "type": "attribute",
          "tooltip": "The attributes (e.g. Pure, CUDAGlobal) associated to this decl",
          "children": [
            {
              "type": "attribute[]",
              "name": "attrs"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "attributes"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "selects"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "actions"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "ancestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with a dump of the AST representation starting from this node. This representation corresponds to the internal Java representation of the ClavaAst, where the node names correspond to Java classes. To get an equivalent representation with join point names, use the attribute 'dump'",
          "children": [
            {
              "type": "String",
              "name": "ast"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor AST name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "astAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, considering null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "astChild"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, considering null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "astChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String that uniquely identifies this node",
          "children": [
            {
              "type": "String",
              "name": "astId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if this node is a Java instance of the given name, which corresponds to a simple Java class name of an AST node. For an equivalent function for join point names, use 'instanceOf(joinPointName)'",
          "children": [
            {
              "type": "boolean",
              "name": "astIsInstance"
            },
            {
              "type": "String",
              "name": "className"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the Java class of this node, which is similar to the equivalent node in Clang AST",
          "children": [
            {
              "type": "String",
              "name": "astName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, considering null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "astNumChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "astParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The bit width of the type returned by this join point, in relation to the definitions of its Translation Unit, or undefined if there is no type or bitwidth defined, or if the join point is not in a TranslationUnit",
          "children": [
            {
              "type": "Integer",
              "name": "bitWidth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String list of the names of the join points that form a path from the root to this node",
          "children": [
            {
              "type": "String[]",
              "name": "chain"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the joinpoint chain",
          "children": [
            {
              "type": "joinpoint",
              "name": "chainAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "child"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "children"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the code represented by this node",
          "children": [
            {
              "type": "String",
              "name": "code"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "column"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the given node is a descendant of this node",
          "children": [
            {
              "type": "Boolean",
              "name": "contains"
            },
            {
              "type": "joinpoint",
              "name": "jp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "currentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "JS object associated with this node, containing parsed data of #pragma clava data when the node can be a target of pragmas. This is a special object, managed internally, and cannot be reassigned, to change its contents requires using key-value pairs. If the node can be the target of a pragma, the information stored in this object is persisted between rebuilds.",
          "children": [
            {
              "type": "Object",
              "name": "data"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the depth of this join point in the AST. If it is the root join point returns 0, if it is a child of the root node returns 1, etc.",
          "children": [
            {
              "type": "Integer",
              "name": "depth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves all descendants of the join point",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type, including the node itself",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendantsAndSelf"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endColumn"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endLine"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the file where the code of this node is located, if available",
          "children": [
            {
              "type": "String",
              "name": "filename"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the complete path to the file where the code of this node comes from",
          "children": [
            {
              "type": "String",
              "name": "filepath"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the first child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks in the descendants for the first node of the given type",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstJp"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use 'userField' instead]",
          "children": [
            {
              "type": "Object",
              "name": "getUserField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The value associated with the given property key",
          "children": [
            {
              "type": "Object",
              "name": "getValue"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use hasParent instead]",
          "children": [
            {
              "type": "boolean",
              "name": "hasAstParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the node has children, false otherwise",
          "children": [
            {
              "type": "Boolean",
              "name": "hasChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the given join point or AST node is the same (== test) as the current join point AST node",
          "children": [
            {
              "type": "Boolean",
              "name": "hasNode"
            },
            {
              "type": "Object",
              "name": "nodeOrJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this node has a parent",
          "children": [
            {
              "type": "boolean",
              "name": "hasParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point has a type",
          "children": [
            {
              "type": "Boolean",
              "name": "hasType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns comments that are not explicitly in the AST, but embedded in other nodes",
          "children": [
            {
              "type": "comment[]",
              "name": "inlineComments"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this is a Cilk node (i.e., cilk_spawn, cilk_sync or cilk_for)",
          "children": [
            {
              "type": "Boolean",
              "name": "isCilk"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is part of a system header file",
          "children": [
            {
              "type": "Boolean",
              "name": "isInSystemHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a header (e.g., if condition, for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a loop header (e.g., for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideLoopHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if any descendant or the node itself was defined as a macro",
          "children": [
            {
              "type": "Boolean",
              "name": "isMacro"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the full Java class name of the type of the Java field with the provided name",
          "children": [
            {
              "type": "String",
              "name": "javaFieldType"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'keys' instead, together with 'getValue'] The names of the Java fields of this node. Can be used as key of the attribute 'javaValue'",
          "children": [
            {
              "type": "String[]",
              "name": "javaFields"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'getValue' instead, with the names returned by the attribute 'keys'] Returns the value associated with the provided Java field name",
          "children": [
            {
              "type": "Object",
              "name": "javaValue"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use joinPointType instead (uppercase P)]",
          "children": [
            {
              "type": "String",
              "name": "joinpointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Id that is based on the position of the node in the code, and should remain stable between compilations (warning: only a few nodes - file, function, loop - currently support it)",
          "children": [
            {
              "type": "String",
              "name": "jpId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Java Class instance with the type of the given key",
          "children": [
            {
              "type": "Object",
              "name": "keyType"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A list of the properties currently supported by this node. Can be used as parameter of the attribute 'getValue'",
          "children": [
            {
              "type": "String[]",
              "name": "keys"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[HACK: .descendants(type) does not work in .lara files, after GraalVM update] Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "laraDescendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the last child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "lastChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that came before this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "leftJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "line"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A string with information about the file and code position of this node, if available",
          "children": [
            {
              "type": "String",
              "name": "location"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, ignoring null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "numChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope that is a parent of the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The pragmas associated with this node",
          "children": [
            {
              "type": "pragma[]",
              "name": "pragmas"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that comes after this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "rightJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the 'program' joinpoint",
          "children": [
            {
              "type": "joinpoint",
              "name": "root"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the nodes of the scope of the current join point. If this node has a body (e.g., loop, function) corresponds to the children of the body. Otherwise, returns an empty array",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "scopeNodes"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that came before this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsLeft"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that come after this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsRight"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Converts this join point to a statement, or returns undefined if it was not possible",
          "children": [
            {
              "type": "statement",
              "name": "stmt"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "type",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrives values that have been associated to nodes of the AST with 'setUserField'",
          "children": [
            {
              "type": "Object",
              "name": "userField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a String with the type of the join point",
          "children": [
            {
              "type": "String",
              "name": "joinPointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the current join point is an instance of the given type",
          "children": [
            {
              "type": "Boolean",
              "name": "instanceOf"
            },
            {
              "type": "String",
              "name": "name"
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "insert"
            },
            {
              "type": "[before| after| replace]",
              "name": "position",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "def"
            },
            {
              "type": "String",
              "name": "attribute",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, but not of the nodes in its fields",
          "children": [
            {
              "type": "joinpoint",
              "name": "copy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Copies all enumerable own properties from the source object to the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataAssign"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Clears all properties from the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataClear"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, including the nodes in their fields (only the first level of field nodes, this function is not recursive)",
          "children": [
            {
              "type": "joinpoint",
              "name": "deepCopy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the node associated to this joinpoint from the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "detach"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point after this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point before this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Adds a message that will be printed to the user after weaving finishes. Identical messages are removed",
          "children": [
            {
              "type": "void",
              "name": "messageToUser"
            },
            {
              "type": "String",
              "name": "message",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the children of this node",
          "children": [
            {
              "type": "void",
              "name": "removeChildren"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this node with the given node",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of join points",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of strings",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWithStrings"
            },
            {
              "type": "String[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Setting data directly is not supported, this action just emits a warning and does nothing",
          "children": [
            {
              "type": "void",
              "name": "setData"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the first child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setFirstChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String[]",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the last child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setLastChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the type of a node, if it has a type",
          "children": [
            {
              "type": "void",
              "name": "setType"
            },
            {
              "type": "type",
              "name": "type",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Associates arbitrary values to nodes of the AST",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "String",
              "name": "fieldName",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a map",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "Map",
              "name": "fieldNameAndValue",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the value associated with the given property key",
          "children": [
            {
              "type": "joinpoint",
              "name": "setValue"
            },
            {
              "type": "String",
              "name": "key",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "suffix",
              "defaultValue": ""
            }
          ]
        }
      ]
    },
    {
      "type": "joinpoint",
      "name": "declStmt",
      "extends": "statement",
      "children": [
        {
          "type": "attribute",
          "tooltip": "The declarations in this statement",
          "children": [
            {
              "type": "decl[]",
              "name": "decls"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isFirst"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isLast"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "attributes"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "selects"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "actions"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "ancestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with a dump of the AST representation starting from this node. This representation corresponds to the internal Java representation of the ClavaAst, where the node names correspond to Java classes. To get an equivalent representation with join point names, use the attribute 'dump'",
          "children": [
            {
              "type": "String",
              "name": "ast"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor AST name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "astAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, considering null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "astChild"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, considering null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "astChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String that uniquely identifies this node",
          "children": [
            {
              "type": "String",
              "name": "astId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if this node is a Java instance of the given name, which corresponds to a simple Java class name of an AST node. For an equivalent function for join point names, use 'instanceOf(joinPointName)'",
          "children": [
            {
              "type": "boolean",
              "name": "astIsInstance"
            },
            {
              "type": "String",
              "name": "className"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the Java class of this node, which is similar to the equivalent node in Clang AST",
          "children": [
            {
              "type": "String",
              "name": "astName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, considering null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "astNumChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "astParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The bit width of the type returned by this join point, in relation to the definitions of its Translation Unit, or undefined if there is no type or bitwidth defined, or if the join point is not in a TranslationUnit",
          "children": [
            {
              "type": "Integer",
              "name": "bitWidth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String list of the names of the join points that form a path from the root to this node",
          "children": [
            {
              "type": "String[]",
              "name": "chain"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the joinpoint chain",
          "children": [
            {
              "type": "joinpoint",
              "name": "chainAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "child"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "children"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the code represented by this node",
          "children": [
            {
              "type": "String",
              "name": "code"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "column"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the given node is a descendant of this node",
          "children": [
            {
              "type": "Boolean",
              "name": "contains"
            },
            {
              "type": "joinpoint",
              "name": "jp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "currentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "JS object associated with this node, containing parsed data of #pragma clava data when the node can be a target of pragmas. This is a special object, managed internally, and cannot be reassigned, to change its contents requires using key-value pairs. If the node can be the target of a pragma, the information stored in this object is persisted between rebuilds.",
          "children": [
            {
              "type": "Object",
              "name": "data"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the depth of this join point in the AST. If it is the root join point returns 0, if it is a child of the root node returns 1, etc.",
          "children": [
            {
              "type": "Integer",
              "name": "depth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves all descendants of the join point",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type, including the node itself",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendantsAndSelf"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endColumn"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endLine"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the file where the code of this node is located, if available",
          "children": [
            {
              "type": "String",
              "name": "filename"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the complete path to the file where the code of this node comes from",
          "children": [
            {
              "type": "String",
              "name": "filepath"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the first child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks in the descendants for the first node of the given type",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstJp"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use 'userField' instead]",
          "children": [
            {
              "type": "Object",
              "name": "getUserField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The value associated with the given property key",
          "children": [
            {
              "type": "Object",
              "name": "getValue"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use hasParent instead]",
          "children": [
            {
              "type": "boolean",
              "name": "hasAstParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the node has children, false otherwise",
          "children": [
            {
              "type": "Boolean",
              "name": "hasChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the given join point or AST node is the same (== test) as the current join point AST node",
          "children": [
            {
              "type": "Boolean",
              "name": "hasNode"
            },
            {
              "type": "Object",
              "name": "nodeOrJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this node has a parent",
          "children": [
            {
              "type": "boolean",
              "name": "hasParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point has a type",
          "children": [
            {
              "type": "Boolean",
              "name": "hasType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns comments that are not explicitly in the AST, but embedded in other nodes",
          "children": [
            {
              "type": "comment[]",
              "name": "inlineComments"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this is a Cilk node (i.e., cilk_spawn, cilk_sync or cilk_for)",
          "children": [
            {
              "type": "Boolean",
              "name": "isCilk"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is part of a system header file",
          "children": [
            {
              "type": "Boolean",
              "name": "isInSystemHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a header (e.g., if condition, for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a loop header (e.g., for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideLoopHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if any descendant or the node itself was defined as a macro",
          "children": [
            {
              "type": "Boolean",
              "name": "isMacro"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the full Java class name of the type of the Java field with the provided name",
          "children": [
            {
              "type": "String",
              "name": "javaFieldType"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'keys' instead, together with 'getValue'] The names of the Java fields of this node. Can be used as key of the attribute 'javaValue'",
          "children": [
            {
              "type": "String[]",
              "name": "javaFields"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'getValue' instead, with the names returned by the attribute 'keys'] Returns the value associated with the provided Java field name",
          "children": [
            {
              "type": "Object",
              "name": "javaValue"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use joinPointType instead (uppercase P)]",
          "children": [
            {
              "type": "String",
              "name": "joinpointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Id that is based on the position of the node in the code, and should remain stable between compilations (warning: only a few nodes - file, function, loop - currently support it)",
          "children": [
            {
              "type": "String",
              "name": "jpId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Java Class instance with the type of the given key",
          "children": [
            {
              "type": "Object",
              "name": "keyType"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A list of the properties currently supported by this node. Can be used as parameter of the attribute 'getValue'",
          "children": [
            {
              "type": "String[]",
              "name": "keys"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[HACK: .descendants(type) does not work in .lara files, after GraalVM update] Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "laraDescendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the last child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "lastChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that came before this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "leftJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "line"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A string with information about the file and code position of this node, if available",
          "children": [
            {
              "type": "String",
              "name": "location"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, ignoring null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "numChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope that is a parent of the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The pragmas associated with this node",
          "children": [
            {
              "type": "pragma[]",
              "name": "pragmas"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that comes after this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "rightJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the 'program' joinpoint",
          "children": [
            {
              "type": "joinpoint",
              "name": "root"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the nodes of the scope of the current join point. If this node has a body (e.g., loop, function) corresponds to the children of the body. Otherwise, returns an empty array",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "scopeNodes"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that came before this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsLeft"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that come after this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsRight"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Converts this join point to a statement, or returns undefined if it was not possible",
          "children": [
            {
              "type": "statement",
              "name": "stmt"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "type",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrives values that have been associated to nodes of the AST with 'setUserField'",
          "children": [
            {
              "type": "Object",
              "name": "userField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a String with the type of the join point",
          "children": [
            {
              "type": "String",
              "name": "joinPointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the current join point is an instance of the given type",
          "children": [
            {
              "type": "Boolean",
              "name": "instanceOf"
            },
            {
              "type": "String",
              "name": "name"
            }
          ]
        },
        {
          "type": "select",
          "clazz": "expression",
          "alias": "expr"
        },
        {
          "type": "select",
          "clazz": "expression",
          "alias": "childExpr"
        },
        {
          "type": "select",
          "clazz": "call",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "call",
          "alias": "stmtCall"
        },
        {
          "type": "select",
          "clazz": "memberCall",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "memberAccess",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "arrayAccess",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "vardecl",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "varref",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "op",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "binaryOp",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "unaryOp",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "newExpr",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "deleteExpr",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "cilkSpawn",
          "alias": ""
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "insert"
            },
            {
              "type": "[before| after| replace]",
              "name": "position",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "def"
            },
            {
              "type": "String",
              "name": "attribute",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, but not of the nodes in its fields",
          "children": [
            {
              "type": "joinpoint",
              "name": "copy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Copies all enumerable own properties from the source object to the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataAssign"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Clears all properties from the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataClear"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, including the nodes in their fields (only the first level of field nodes, this function is not recursive)",
          "children": [
            {
              "type": "joinpoint",
              "name": "deepCopy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the node associated to this joinpoint from the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "detach"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point after this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point before this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Adds a message that will be printed to the user after weaving finishes. Identical messages are removed",
          "children": [
            {
              "type": "void",
              "name": "messageToUser"
            },
            {
              "type": "String",
              "name": "message",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the children of this node",
          "children": [
            {
              "type": "void",
              "name": "removeChildren"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this node with the given node",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of join points",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of strings",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWithStrings"
            },
            {
              "type": "String[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Setting data directly is not supported, this action just emits a warning and does nothing",
          "children": [
            {
              "type": "void",
              "name": "setData"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the first child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setFirstChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String[]",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the last child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setLastChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the type of a node, if it has a type",
          "children": [
            {
              "type": "void",
              "name": "setType"
            },
            {
              "type": "type",
              "name": "type",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Associates arbitrary values to nodes of the AST",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "String",
              "name": "fieldName",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a map",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "Map",
              "name": "fieldNameAndValue",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the value associated with the given property key",
          "children": [
            {
              "type": "joinpoint",
              "name": "setValue"
            },
            {
              "type": "String",
              "name": "key",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "suffix",
              "defaultValue": ""
            }
          ]
        }
      ]
    },
    {
      "type": "joinpoint",
      "name": "declarator",
      "defaultAttr": "name",
      "extends": "namedDecl",
      "tooltip": "Represents a decl that comes from a declarator (e.g., function, field, variable)",
      "children": [
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isPublic"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String",
              "name": "name"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String",
              "name": "qualifiedName"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String",
              "name": "qualifiedPrefix"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The attributes (e.g. Pure, CUDAGlobal) associated to this decl",
          "children": [
            {
              "type": "attribute[]",
              "name": "attrs"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "attributes"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "selects"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "actions"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "ancestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with a dump of the AST representation starting from this node. This representation corresponds to the internal Java representation of the ClavaAst, where the node names correspond to Java classes. To get an equivalent representation with join point names, use the attribute 'dump'",
          "children": [
            {
              "type": "String",
              "name": "ast"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor AST name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "astAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, considering null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "astChild"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, considering null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "astChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String that uniquely identifies this node",
          "children": [
            {
              "type": "String",
              "name": "astId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if this node is a Java instance of the given name, which corresponds to a simple Java class name of an AST node. For an equivalent function for join point names, use 'instanceOf(joinPointName)'",
          "children": [
            {
              "type": "boolean",
              "name": "astIsInstance"
            },
            {
              "type": "String",
              "name": "className"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the Java class of this node, which is similar to the equivalent node in Clang AST",
          "children": [
            {
              "type": "String",
              "name": "astName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, considering null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "astNumChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "astParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The bit width of the type returned by this join point, in relation to the definitions of its Translation Unit, or undefined if there is no type or bitwidth defined, or if the join point is not in a TranslationUnit",
          "children": [
            {
              "type": "Integer",
              "name": "bitWidth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String list of the names of the join points that form a path from the root to this node",
          "children": [
            {
              "type": "String[]",
              "name": "chain"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the joinpoint chain",
          "children": [
            {
              "type": "joinpoint",
              "name": "chainAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "child"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "children"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the code represented by this node",
          "children": [
            {
              "type": "String",
              "name": "code"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "column"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the given node is a descendant of this node",
          "children": [
            {
              "type": "Boolean",
              "name": "contains"
            },
            {
              "type": "joinpoint",
              "name": "jp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "currentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "JS object associated with this node, containing parsed data of #pragma clava data when the node can be a target of pragmas. This is a special object, managed internally, and cannot be reassigned, to change its contents requires using key-value pairs. If the node can be the target of a pragma, the information stored in this object is persisted between rebuilds.",
          "children": [
            {
              "type": "Object",
              "name": "data"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the depth of this join point in the AST. If it is the root join point returns 0, if it is a child of the root node returns 1, etc.",
          "children": [
            {
              "type": "Integer",
              "name": "depth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves all descendants of the join point",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type, including the node itself",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendantsAndSelf"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endColumn"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endLine"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the file where the code of this node is located, if available",
          "children": [
            {
              "type": "String",
              "name": "filename"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the complete path to the file where the code of this node comes from",
          "children": [
            {
              "type": "String",
              "name": "filepath"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the first child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks in the descendants for the first node of the given type",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstJp"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use 'userField' instead]",
          "children": [
            {
              "type": "Object",
              "name": "getUserField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The value associated with the given property key",
          "children": [
            {
              "type": "Object",
              "name": "getValue"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use hasParent instead]",
          "children": [
            {
              "type": "boolean",
              "name": "hasAstParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the node has children, false otherwise",
          "children": [
            {
              "type": "Boolean",
              "name": "hasChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the given join point or AST node is the same (== test) as the current join point AST node",
          "children": [
            {
              "type": "Boolean",
              "name": "hasNode"
            },
            {
              "type": "Object",
              "name": "nodeOrJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this node has a parent",
          "children": [
            {
              "type": "boolean",
              "name": "hasParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point has a type",
          "children": [
            {
              "type": "Boolean",
              "name": "hasType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns comments that are not explicitly in the AST, but embedded in other nodes",
          "children": [
            {
              "type": "comment[]",
              "name": "inlineComments"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this is a Cilk node (i.e., cilk_spawn, cilk_sync or cilk_for)",
          "children": [
            {
              "type": "Boolean",
              "name": "isCilk"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is part of a system header file",
          "children": [
            {
              "type": "Boolean",
              "name": "isInSystemHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a header (e.g., if condition, for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a loop header (e.g., for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideLoopHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if any descendant or the node itself was defined as a macro",
          "children": [
            {
              "type": "Boolean",
              "name": "isMacro"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the full Java class name of the type of the Java field with the provided name",
          "children": [
            {
              "type": "String",
              "name": "javaFieldType"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'keys' instead, together with 'getValue'] The names of the Java fields of this node. Can be used as key of the attribute 'javaValue'",
          "children": [
            {
              "type": "String[]",
              "name": "javaFields"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'getValue' instead, with the names returned by the attribute 'keys'] Returns the value associated with the provided Java field name",
          "children": [
            {
              "type": "Object",
              "name": "javaValue"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use joinPointType instead (uppercase P)]",
          "children": [
            {
              "type": "String",
              "name": "joinpointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Id that is based on the position of the node in the code, and should remain stable between compilations (warning: only a few nodes - file, function, loop - currently support it)",
          "children": [
            {
              "type": "String",
              "name": "jpId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Java Class instance with the type of the given key",
          "children": [
            {
              "type": "Object",
              "name": "keyType"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A list of the properties currently supported by this node. Can be used as parameter of the attribute 'getValue'",
          "children": [
            {
              "type": "String[]",
              "name": "keys"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[HACK: .descendants(type) does not work in .lara files, after GraalVM update] Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "laraDescendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the last child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "lastChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that came before this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "leftJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "line"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A string with information about the file and code position of this node, if available",
          "children": [
            {
              "type": "String",
              "name": "location"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, ignoring null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "numChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope that is a parent of the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The pragmas associated with this node",
          "children": [
            {
              "type": "pragma[]",
              "name": "pragmas"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that comes after this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "rightJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the 'program' joinpoint",
          "children": [
            {
              "type": "joinpoint",
              "name": "root"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the nodes of the scope of the current join point. If this node has a body (e.g., loop, function) corresponds to the children of the body. Otherwise, returns an empty array",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "scopeNodes"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that came before this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsLeft"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that come after this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsRight"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Converts this join point to a statement, or returns undefined if it was not possible",
          "children": [
            {
              "type": "statement",
              "name": "stmt"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "type",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrives values that have been associated to nodes of the AST with 'setUserField'",
          "children": [
            {
              "type": "Object",
              "name": "userField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a String with the type of the join point",
          "children": [
            {
              "type": "String",
              "name": "joinPointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the current join point is an instance of the given type",
          "children": [
            {
              "type": "Boolean",
              "name": "instanceOf"
            },
            {
              "type": "String",
              "name": "name"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the name of this namedDecl",
          "children": [
            {
              "type": "void",
              "name": "setName"
            },
            {
              "type": "String",
              "name": "name",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the qualified name of this namedDecl (changes both the name and qualified prefix)",
          "children": [
            {
              "type": "void",
              "name": "setQualifiedName"
            },
            {
              "type": "String",
              "name": "name",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the qualified prefix of this namedDecl",
          "children": [
            {
              "type": "void",
              "name": "setQualifiedPrefix"
            },
            {
              "type": "String",
              "name": "qualifiedPrefix",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "insert"
            },
            {
              "type": "[before| after| replace]",
              "name": "position",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "def"
            },
            {
              "type": "String",
              "name": "attribute",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, but not of the nodes in its fields",
          "children": [
            {
              "type": "joinpoint",
              "name": "copy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Copies all enumerable own properties from the source object to the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataAssign"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Clears all properties from the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataClear"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, including the nodes in their fields (only the first level of field nodes, this function is not recursive)",
          "children": [
            {
              "type": "joinpoint",
              "name": "deepCopy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the node associated to this joinpoint from the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "detach"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point after this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point before this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Adds a message that will be printed to the user after weaving finishes. Identical messages are removed",
          "children": [
            {
              "type": "void",
              "name": "messageToUser"
            },
            {
              "type": "String",
              "name": "message",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the children of this node",
          "children": [
            {
              "type": "void",
              "name": "removeChildren"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this node with the given node",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of join points",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of strings",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWithStrings"
            },
            {
              "type": "String[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Setting data directly is not supported, this action just emits a warning and does nothing",
          "children": [
            {
              "type": "void",
              "name": "setData"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the first child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setFirstChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String[]",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the last child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setLastChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the type of a node, if it has a type",
          "children": [
            {
              "type": "void",
              "name": "setType"
            },
            {
              "type": "type",
              "name": "type",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Associates arbitrary values to nodes of the AST",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "String",
              "name": "fieldName",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a map",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "Map",
              "name": "fieldNameAndValue",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the value associated with the given property key",
          "children": [
            {
              "type": "joinpoint",
              "name": "setValue"
            },
            {
              "type": "String",
              "name": "key",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "suffix",
              "defaultValue": ""
            }
          ]
        }
      ]
    },
    {
      "type": "joinpoint",
      "name": "deleteExpr",
      "extends": "expression",
      "children": [
        {
          "type": "attribute",
          "tooltip": "a 'decl' join point that represents the declaration associated with this expression, or undefined if there is none",
          "children": [
            {
              "type": "decl",
              "name": "decl"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "returns a cast joinpoint if this expression has an associated implicit cast, undefined otherwise",
          "children": [
            {
              "type": "cast",
              "name": "implicitCast"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the expression is part of an argument of a function call",
          "children": [
            {
              "type": "Boolean",
              "name": "isFunctionArgument"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "[read| write| readwrite]",
              "name": "use"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "vardecl",
              "name": "vardecl"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "attributes"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "selects"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "actions"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "ancestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with a dump of the AST representation starting from this node. This representation corresponds to the internal Java representation of the ClavaAst, where the node names correspond to Java classes. To get an equivalent representation with join point names, use the attribute 'dump'",
          "children": [
            {
              "type": "String",
              "name": "ast"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor AST name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "astAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, considering null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "astChild"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, considering null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "astChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String that uniquely identifies this node",
          "children": [
            {
              "type": "String",
              "name": "astId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if this node is a Java instance of the given name, which corresponds to a simple Java class name of an AST node. For an equivalent function for join point names, use 'instanceOf(joinPointName)'",
          "children": [
            {
              "type": "boolean",
              "name": "astIsInstance"
            },
            {
              "type": "String",
              "name": "className"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the Java class of this node, which is similar to the equivalent node in Clang AST",
          "children": [
            {
              "type": "String",
              "name": "astName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, considering null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "astNumChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "astParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The bit width of the type returned by this join point, in relation to the definitions of its Translation Unit, or undefined if there is no type or bitwidth defined, or if the join point is not in a TranslationUnit",
          "children": [
            {
              "type": "Integer",
              "name": "bitWidth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String list of the names of the join points that form a path from the root to this node",
          "children": [
            {
              "type": "String[]",
              "name": "chain"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the joinpoint chain",
          "children": [
            {
              "type": "joinpoint",
              "name": "chainAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "child"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "children"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the code represented by this node",
          "children": [
            {
              "type": "String",
              "name": "code"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "column"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the given node is a descendant of this node",
          "children": [
            {
              "type": "Boolean",
              "name": "contains"
            },
            {
              "type": "joinpoint",
              "name": "jp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "currentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "JS object associated with this node, containing parsed data of #pragma clava data when the node can be a target of pragmas. This is a special object, managed internally, and cannot be reassigned, to change its contents requires using key-value pairs. If the node can be the target of a pragma, the information stored in this object is persisted between rebuilds.",
          "children": [
            {
              "type": "Object",
              "name": "data"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the depth of this join point in the AST. If it is the root join point returns 0, if it is a child of the root node returns 1, etc.",
          "children": [
            {
              "type": "Integer",
              "name": "depth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves all descendants of the join point",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type, including the node itself",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendantsAndSelf"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endColumn"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endLine"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the file where the code of this node is located, if available",
          "children": [
            {
              "type": "String",
              "name": "filename"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the complete path to the file where the code of this node comes from",
          "children": [
            {
              "type": "String",
              "name": "filepath"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the first child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks in the descendants for the first node of the given type",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstJp"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use 'userField' instead]",
          "children": [
            {
              "type": "Object",
              "name": "getUserField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The value associated with the given property key",
          "children": [
            {
              "type": "Object",
              "name": "getValue"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use hasParent instead]",
          "children": [
            {
              "type": "boolean",
              "name": "hasAstParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the node has children, false otherwise",
          "children": [
            {
              "type": "Boolean",
              "name": "hasChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the given join point or AST node is the same (== test) as the current join point AST node",
          "children": [
            {
              "type": "Boolean",
              "name": "hasNode"
            },
            {
              "type": "Object",
              "name": "nodeOrJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this node has a parent",
          "children": [
            {
              "type": "boolean",
              "name": "hasParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point has a type",
          "children": [
            {
              "type": "Boolean",
              "name": "hasType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns comments that are not explicitly in the AST, but embedded in other nodes",
          "children": [
            {
              "type": "comment[]",
              "name": "inlineComments"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this is a Cilk node (i.e., cilk_spawn, cilk_sync or cilk_for)",
          "children": [
            {
              "type": "Boolean",
              "name": "isCilk"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is part of a system header file",
          "children": [
            {
              "type": "Boolean",
              "name": "isInSystemHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a header (e.g., if condition, for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a loop header (e.g., for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideLoopHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if any descendant or the node itself was defined as a macro",
          "children": [
            {
              "type": "Boolean",
              "name": "isMacro"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the full Java class name of the type of the Java field with the provided name",
          "children": [
            {
              "type": "String",
              "name": "javaFieldType"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'keys' instead, together with 'getValue'] The names of the Java fields of this node. Can be used as key of the attribute 'javaValue'",
          "children": [
            {
              "type": "String[]",
              "name": "javaFields"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'getValue' instead, with the names returned by the attribute 'keys'] Returns the value associated with the provided Java field name",
          "children": [
            {
              "type": "Object",
              "name": "javaValue"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use joinPointType instead (uppercase P)]",
          "children": [
            {
              "type": "String",
              "name": "joinpointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Id that is based on the position of the node in the code, and should remain stable between compilations (warning: only a few nodes - file, function, loop - currently support it)",
          "children": [
            {
              "type": "String",
              "name": "jpId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Java Class instance with the type of the given key",
          "children": [
            {
              "type": "Object",
              "name": "keyType"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A list of the properties currently supported by this node. Can be used as parameter of the attribute 'getValue'",
          "children": [
            {
              "type": "String[]",
              "name": "keys"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[HACK: .descendants(type) does not work in .lara files, after GraalVM update] Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "laraDescendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the last child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "lastChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that came before this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "leftJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "line"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A string with information about the file and code position of this node, if available",
          "children": [
            {
              "type": "String",
              "name": "location"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, ignoring null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "numChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope that is a parent of the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The pragmas associated with this node",
          "children": [
            {
              "type": "pragma[]",
              "name": "pragmas"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that comes after this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "rightJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the 'program' joinpoint",
          "children": [
            {
              "type": "joinpoint",
              "name": "root"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the nodes of the scope of the current join point. If this node has a body (e.g., loop, function) corresponds to the children of the body. Otherwise, returns an empty array",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "scopeNodes"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that came before this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsLeft"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that come after this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsRight"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Converts this join point to a statement, or returns undefined if it was not possible",
          "children": [
            {
              "type": "statement",
              "name": "stmt"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "type",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrives values that have been associated to nodes of the AST with 'setUserField'",
          "children": [
            {
              "type": "Object",
              "name": "userField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a String with the type of the join point",
          "children": [
            {
              "type": "String",
              "name": "joinPointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the current join point is an instance of the given type",
          "children": [
            {
              "type": "Boolean",
              "name": "instanceOf"
            },
            {
              "type": "String",
              "name": "name"
            }
          ]
        },
        {
          "type": "select",
          "clazz": "vardecl",
          "alias": ""
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "insert"
            },
            {
              "type": "[before| after| replace]",
              "name": "position",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "def"
            },
            {
              "type": "String",
              "name": "attribute",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, but not of the nodes in its fields",
          "children": [
            {
              "type": "joinpoint",
              "name": "copy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Copies all enumerable own properties from the source object to the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataAssign"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Clears all properties from the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataClear"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, including the nodes in their fields (only the first level of field nodes, this function is not recursive)",
          "children": [
            {
              "type": "joinpoint",
              "name": "deepCopy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the node associated to this joinpoint from the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "detach"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point after this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point before this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Adds a message that will be printed to the user after weaving finishes. Identical messages are removed",
          "children": [
            {
              "type": "void",
              "name": "messageToUser"
            },
            {
              "type": "String",
              "name": "message",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the children of this node",
          "children": [
            {
              "type": "void",
              "name": "removeChildren"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this node with the given node",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of join points",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of strings",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWithStrings"
            },
            {
              "type": "String[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Setting data directly is not supported, this action just emits a warning and does nothing",
          "children": [
            {
              "type": "void",
              "name": "setData"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the first child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setFirstChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String[]",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the last child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setLastChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the type of a node, if it has a type",
          "children": [
            {
              "type": "void",
              "name": "setType"
            },
            {
              "type": "type",
              "name": "type",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Associates arbitrary values to nodes of the AST",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "String",
              "name": "fieldName",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a map",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "Map",
              "name": "fieldNameAndValue",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the value associated with the given property key",
          "children": [
            {
              "type": "joinpoint",
              "name": "setValue"
            },
            {
              "type": "String",
              "name": "key",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "suffix",
              "defaultValue": ""
            }
          ]
        }
      ]
    },
    {
      "type": "joinpoint",
      "name": "elaboratedType",
      "extends": "type",
      "tooltip": "Represents a type that was referred to using an elaborated type keyword, e.g., struct S, or via a qualified name, e.g., N::M::type, or both. This type is used to keep track of a type name as written in the source code, including tag keywords and any nested-name-specifiers. The type itself is always 'sugar', used to express what was written in the source code but containing no additional semantic information.",
      "children": [
        {
          "type": "attribute",
          "tooltip": "the keyword of this elaborated type, if present. Can be one of: struct, interface, union, class, enum, typename",
          "children": [
            {
              "type": "String",
              "name": "keyword"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the type that is being prefixed with the qualifier",
          "children": [
            {
              "type": "type",
              "name": "namedType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the qualifier of this elaborated type, if present (e.g., A::)",
          "children": [
            {
              "type": "String",
              "name": "qualifier"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Integer[]",
              "name": "arrayDims"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Integer",
              "name": "arraySize"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The bit width of this type in the Translation Unit of the given join point, or undefined if there is no bitwidth defined",
          "children": [
            {
              "type": "Integer",
              "name": "bitWidth"
            },
            {
              "type": "joinpoint",
              "name": "reference"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "constant"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Single-step desugar. Returns the type itself if it does not have sugar",
          "children": [
            {
              "type": "type",
              "name": "desugar"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Completely desugars the type",
          "children": [
            {
              "type": "type",
              "name": "desugarAll"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A tree representation of the fields of this type",
          "children": [
            {
              "type": "String",
              "name": "fieldTree"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "hasSugar"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "hasTemplateArgs"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isArray"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "True if this is a type declared with the 'auto' keyword",
          "children": [
            {
              "type": "Boolean",
              "name": "isAuto"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isBuiltin"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isPointer"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isTopLevel"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String",
              "name": "kind"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Ignores certain types (e.g., DecayedType)",
          "children": [
            {
              "type": "type",
              "name": "normalize"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "templateArgsStrings"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "type[]",
              "name": "templateArgsTypes"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Maps names of join point fields that represent type join points, to their respective values",
          "children": [
            {
              "type": "Map",
              "name": "typeFields"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "If the type encapsulates another type, returns the encapsulated type",
          "children": [
            {
              "type": "type",
              "name": "unwrap"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "attributes"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "selects"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "actions"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "ancestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with a dump of the AST representation starting from this node. This representation corresponds to the internal Java representation of the ClavaAst, where the node names correspond to Java classes. To get an equivalent representation with join point names, use the attribute 'dump'",
          "children": [
            {
              "type": "String",
              "name": "ast"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor AST name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "astAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, considering null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "astChild"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, considering null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "astChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String that uniquely identifies this node",
          "children": [
            {
              "type": "String",
              "name": "astId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if this node is a Java instance of the given name, which corresponds to a simple Java class name of an AST node. For an equivalent function for join point names, use 'instanceOf(joinPointName)'",
          "children": [
            {
              "type": "boolean",
              "name": "astIsInstance"
            },
            {
              "type": "String",
              "name": "className"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the Java class of this node, which is similar to the equivalent node in Clang AST",
          "children": [
            {
              "type": "String",
              "name": "astName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, considering null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "astNumChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "astParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The bit width of the type returned by this join point, in relation to the definitions of its Translation Unit, or undefined if there is no type or bitwidth defined, or if the join point is not in a TranslationUnit",
          "children": [
            {
              "type": "Integer",
              "name": "bitWidth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String list of the names of the join points that form a path from the root to this node",
          "children": [
            {
              "type": "String[]",
              "name": "chain"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the joinpoint chain",
          "children": [
            {
              "type": "joinpoint",
              "name": "chainAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "child"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "children"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the code represented by this node",
          "children": [
            {
              "type": "String",
              "name": "code"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "column"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the given node is a descendant of this node",
          "children": [
            {
              "type": "Boolean",
              "name": "contains"
            },
            {
              "type": "joinpoint",
              "name": "jp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "currentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "JS object associated with this node, containing parsed data of #pragma clava data when the node can be a target of pragmas. This is a special object, managed internally, and cannot be reassigned, to change its contents requires using key-value pairs. If the node can be the target of a pragma, the information stored in this object is persisted between rebuilds.",
          "children": [
            {
              "type": "Object",
              "name": "data"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the depth of this join point in the AST. If it is the root join point returns 0, if it is a child of the root node returns 1, etc.",
          "children": [
            {
              "type": "Integer",
              "name": "depth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves all descendants of the join point",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type, including the node itself",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendantsAndSelf"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endColumn"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endLine"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the file where the code of this node is located, if available",
          "children": [
            {
              "type": "String",
              "name": "filename"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the complete path to the file where the code of this node comes from",
          "children": [
            {
              "type": "String",
              "name": "filepath"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the first child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks in the descendants for the first node of the given type",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstJp"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use 'userField' instead]",
          "children": [
            {
              "type": "Object",
              "name": "getUserField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The value associated with the given property key",
          "children": [
            {
              "type": "Object",
              "name": "getValue"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use hasParent instead]",
          "children": [
            {
              "type": "boolean",
              "name": "hasAstParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the node has children, false otherwise",
          "children": [
            {
              "type": "Boolean",
              "name": "hasChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the given join point or AST node is the same (== test) as the current join point AST node",
          "children": [
            {
              "type": "Boolean",
              "name": "hasNode"
            },
            {
              "type": "Object",
              "name": "nodeOrJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this node has a parent",
          "children": [
            {
              "type": "boolean",
              "name": "hasParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point has a type",
          "children": [
            {
              "type": "Boolean",
              "name": "hasType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns comments that are not explicitly in the AST, but embedded in other nodes",
          "children": [
            {
              "type": "comment[]",
              "name": "inlineComments"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this is a Cilk node (i.e., cilk_spawn, cilk_sync or cilk_for)",
          "children": [
            {
              "type": "Boolean",
              "name": "isCilk"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is part of a system header file",
          "children": [
            {
              "type": "Boolean",
              "name": "isInSystemHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a header (e.g., if condition, for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a loop header (e.g., for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideLoopHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if any descendant or the node itself was defined as a macro",
          "children": [
            {
              "type": "Boolean",
              "name": "isMacro"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the full Java class name of the type of the Java field with the provided name",
          "children": [
            {
              "type": "String",
              "name": "javaFieldType"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'keys' instead, together with 'getValue'] The names of the Java fields of this node. Can be used as key of the attribute 'javaValue'",
          "children": [
            {
              "type": "String[]",
              "name": "javaFields"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'getValue' instead, with the names returned by the attribute 'keys'] Returns the value associated with the provided Java field name",
          "children": [
            {
              "type": "Object",
              "name": "javaValue"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use joinPointType instead (uppercase P)]",
          "children": [
            {
              "type": "String",
              "name": "joinpointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Id that is based on the position of the node in the code, and should remain stable between compilations (warning: only a few nodes - file, function, loop - currently support it)",
          "children": [
            {
              "type": "String",
              "name": "jpId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Java Class instance with the type of the given key",
          "children": [
            {
              "type": "Object",
              "name": "keyType"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A list of the properties currently supported by this node. Can be used as parameter of the attribute 'getValue'",
          "children": [
            {
              "type": "String[]",
              "name": "keys"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[HACK: .descendants(type) does not work in .lara files, after GraalVM update] Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "laraDescendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the last child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "lastChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that came before this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "leftJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "line"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A string with information about the file and code position of this node, if available",
          "children": [
            {
              "type": "String",
              "name": "location"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, ignoring null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "numChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope that is a parent of the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The pragmas associated with this node",
          "children": [
            {
              "type": "pragma[]",
              "name": "pragmas"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that comes after this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "rightJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the 'program' joinpoint",
          "children": [
            {
              "type": "joinpoint",
              "name": "root"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the nodes of the scope of the current join point. If this node has a body (e.g., loop, function) corresponds to the children of the body. Otherwise, returns an empty array",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "scopeNodes"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that came before this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsLeft"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that come after this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsRight"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Converts this join point to a statement, or returns undefined if it was not possible",
          "children": [
            {
              "type": "statement",
              "name": "stmt"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "type",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrives values that have been associated to nodes of the AST with 'setUserField'",
          "children": [
            {
              "type": "Object",
              "name": "userField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a String with the type of the join point",
          "children": [
            {
              "type": "String",
              "name": "joinPointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the current join point is an instance of the given type",
          "children": [
            {
              "type": "Boolean",
              "name": "instanceOf"
            },
            {
              "type": "String",
              "name": "name"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Returns a copy of this type with the qualifier const",
          "children": [
            {
              "type": "type",
              "name": "asConst"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the desugared type of this type",
          "children": [
            {
              "type": "void",
              "name": "setDesugar"
            },
            {
              "type": "type",
              "name": "desugaredType",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the template argument types of a template type",
          "children": [
            {
              "type": "void",
              "name": "setTemplateArgsTypes"
            },
            {
              "type": "type[]",
              "name": "templateArgTypes",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets a single template argument type of a template type",
          "children": [
            {
              "type": "void",
              "name": "setTemplateArgsTypes"
            },
            {
              "type": "Integer",
              "name": "index",
              "defaultValue": ""
            },
            {
              "type": "type",
              "name": "templateArgType",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Changes a single occurence of a type field that has the current value with new value. Returns true if there was a change",
          "children": [
            {
              "type": "boolean",
              "name": "setTypeFieldByValueRecursive"
            },
            {
              "type": "Object",
              "name": "currentValue",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "newValue",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces an underlying type of this instance with new type, if it matches the old type. Returns true if there were changes",
          "children": [
            {
              "type": "type",
              "name": "setUnderlyingType"
            },
            {
              "type": "type",
              "name": "oldValue",
              "defaultValue": ""
            },
            {
              "type": "type",
              "name": "newValue",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "insert"
            },
            {
              "type": "[before| after| replace]",
              "name": "position",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "def"
            },
            {
              "type": "String",
              "name": "attribute",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, but not of the nodes in its fields",
          "children": [
            {
              "type": "joinpoint",
              "name": "copy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Copies all enumerable own properties from the source object to the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataAssign"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Clears all properties from the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataClear"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, including the nodes in their fields (only the first level of field nodes, this function is not recursive)",
          "children": [
            {
              "type": "joinpoint",
              "name": "deepCopy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the node associated to this joinpoint from the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "detach"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point after this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point before this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Adds a message that will be printed to the user after weaving finishes. Identical messages are removed",
          "children": [
            {
              "type": "void",
              "name": "messageToUser"
            },
            {
              "type": "String",
              "name": "message",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the children of this node",
          "children": [
            {
              "type": "void",
              "name": "removeChildren"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this node with the given node",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of join points",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of strings",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWithStrings"
            },
            {
              "type": "String[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Setting data directly is not supported, this action just emits a warning and does nothing",
          "children": [
            {
              "type": "void",
              "name": "setData"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the first child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setFirstChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String[]",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the last child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setLastChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the type of a node, if it has a type",
          "children": [
            {
              "type": "void",
              "name": "setType"
            },
            {
              "type": "type",
              "name": "type",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Associates arbitrary values to nodes of the AST",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "String",
              "name": "fieldName",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a map",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "Map",
              "name": "fieldNameAndValue",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the value associated with the given property key",
          "children": [
            {
              "type": "joinpoint",
              "name": "setValue"
            },
            {
              "type": "String",
              "name": "key",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "suffix",
              "defaultValue": ""
            }
          ]
        }
      ]
    },
    {
      "type": "joinpoint",
      "name": "empty",
      "extends": "joinpoint",
      "tooltip": "Utility joinpoint, to represent empty nodes when directly accessing the tree",
      "children": [
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "attributes"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "selects"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "actions"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "ancestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with a dump of the AST representation starting from this node. This representation corresponds to the internal Java representation of the ClavaAst, where the node names correspond to Java classes. To get an equivalent representation with join point names, use the attribute 'dump'",
          "children": [
            {
              "type": "String",
              "name": "ast"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor AST name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "astAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, considering null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "astChild"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, considering null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "astChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String that uniquely identifies this node",
          "children": [
            {
              "type": "String",
              "name": "astId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if this node is a Java instance of the given name, which corresponds to a simple Java class name of an AST node. For an equivalent function for join point names, use 'instanceOf(joinPointName)'",
          "children": [
            {
              "type": "boolean",
              "name": "astIsInstance"
            },
            {
              "type": "String",
              "name": "className"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the Java class of this node, which is similar to the equivalent node in Clang AST",
          "children": [
            {
              "type": "String",
              "name": "astName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, considering null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "astNumChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "astParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The bit width of the type returned by this join point, in relation to the definitions of its Translation Unit, or undefined if there is no type or bitwidth defined, or if the join point is not in a TranslationUnit",
          "children": [
            {
              "type": "Integer",
              "name": "bitWidth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String list of the names of the join points that form a path from the root to this node",
          "children": [
            {
              "type": "String[]",
              "name": "chain"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the joinpoint chain",
          "children": [
            {
              "type": "joinpoint",
              "name": "chainAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "child"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "children"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the code represented by this node",
          "children": [
            {
              "type": "String",
              "name": "code"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "column"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the given node is a descendant of this node",
          "children": [
            {
              "type": "Boolean",
              "name": "contains"
            },
            {
              "type": "joinpoint",
              "name": "jp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "currentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "JS object associated with this node, containing parsed data of #pragma clava data when the node can be a target of pragmas. This is a special object, managed internally, and cannot be reassigned, to change its contents requires using key-value pairs. If the node can be the target of a pragma, the information stored in this object is persisted between rebuilds.",
          "children": [
            {
              "type": "Object",
              "name": "data"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the depth of this join point in the AST. If it is the root join point returns 0, if it is a child of the root node returns 1, etc.",
          "children": [
            {
              "type": "Integer",
              "name": "depth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves all descendants of the join point",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type, including the node itself",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendantsAndSelf"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endColumn"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endLine"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the file where the code of this node is located, if available",
          "children": [
            {
              "type": "String",
              "name": "filename"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the complete path to the file where the code of this node comes from",
          "children": [
            {
              "type": "String",
              "name": "filepath"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the first child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks in the descendants for the first node of the given type",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstJp"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use 'userField' instead]",
          "children": [
            {
              "type": "Object",
              "name": "getUserField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The value associated with the given property key",
          "children": [
            {
              "type": "Object",
              "name": "getValue"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use hasParent instead]",
          "children": [
            {
              "type": "boolean",
              "name": "hasAstParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the node has children, false otherwise",
          "children": [
            {
              "type": "Boolean",
              "name": "hasChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the given join point or AST node is the same (== test) as the current join point AST node",
          "children": [
            {
              "type": "Boolean",
              "name": "hasNode"
            },
            {
              "type": "Object",
              "name": "nodeOrJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this node has a parent",
          "children": [
            {
              "type": "boolean",
              "name": "hasParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point has a type",
          "children": [
            {
              "type": "Boolean",
              "name": "hasType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns comments that are not explicitly in the AST, but embedded in other nodes",
          "children": [
            {
              "type": "comment[]",
              "name": "inlineComments"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this is a Cilk node (i.e., cilk_spawn, cilk_sync or cilk_for)",
          "children": [
            {
              "type": "Boolean",
              "name": "isCilk"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is part of a system header file",
          "children": [
            {
              "type": "Boolean",
              "name": "isInSystemHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a header (e.g., if condition, for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a loop header (e.g., for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideLoopHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if any descendant or the node itself was defined as a macro",
          "children": [
            {
              "type": "Boolean",
              "name": "isMacro"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the full Java class name of the type of the Java field with the provided name",
          "children": [
            {
              "type": "String",
              "name": "javaFieldType"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'keys' instead, together with 'getValue'] The names of the Java fields of this node. Can be used as key of the attribute 'javaValue'",
          "children": [
            {
              "type": "String[]",
              "name": "javaFields"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'getValue' instead, with the names returned by the attribute 'keys'] Returns the value associated with the provided Java field name",
          "children": [
            {
              "type": "Object",
              "name": "javaValue"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use joinPointType instead (uppercase P)]",
          "children": [
            {
              "type": "String",
              "name": "joinpointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Id that is based on the position of the node in the code, and should remain stable between compilations (warning: only a few nodes - file, function, loop - currently support it)",
          "children": [
            {
              "type": "String",
              "name": "jpId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Java Class instance with the type of the given key",
          "children": [
            {
              "type": "Object",
              "name": "keyType"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A list of the properties currently supported by this node. Can be used as parameter of the attribute 'getValue'",
          "children": [
            {
              "type": "String[]",
              "name": "keys"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[HACK: .descendants(type) does not work in .lara files, after GraalVM update] Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "laraDescendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the last child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "lastChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that came before this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "leftJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "line"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A string with information about the file and code position of this node, if available",
          "children": [
            {
              "type": "String",
              "name": "location"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, ignoring null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "numChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope that is a parent of the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The pragmas associated with this node",
          "children": [
            {
              "type": "pragma[]",
              "name": "pragmas"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that comes after this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "rightJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the 'program' joinpoint",
          "children": [
            {
              "type": "joinpoint",
              "name": "root"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the nodes of the scope of the current join point. If this node has a body (e.g., loop, function) corresponds to the children of the body. Otherwise, returns an empty array",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "scopeNodes"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that came before this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsLeft"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that come after this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsRight"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Converts this join point to a statement, or returns undefined if it was not possible",
          "children": [
            {
              "type": "statement",
              "name": "stmt"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "type",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrives values that have been associated to nodes of the AST with 'setUserField'",
          "children": [
            {
              "type": "Object",
              "name": "userField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a String with the type of the join point",
          "children": [
            {
              "type": "String",
              "name": "joinPointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the current join point is an instance of the given type",
          "children": [
            {
              "type": "Boolean",
              "name": "instanceOf"
            },
            {
              "type": "String",
              "name": "name"
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "insert"
            },
            {
              "type": "[before| after| replace]",
              "name": "position",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "def"
            },
            {
              "type": "String",
              "name": "attribute",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, but not of the nodes in its fields",
          "children": [
            {
              "type": "joinpoint",
              "name": "copy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Copies all enumerable own properties from the source object to the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataAssign"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Clears all properties from the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataClear"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, including the nodes in their fields (only the first level of field nodes, this function is not recursive)",
          "children": [
            {
              "type": "joinpoint",
              "name": "deepCopy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the node associated to this joinpoint from the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "detach"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point after this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point before this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Adds a message that will be printed to the user after weaving finishes. Identical messages are removed",
          "children": [
            {
              "type": "void",
              "name": "messageToUser"
            },
            {
              "type": "String",
              "name": "message",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the children of this node",
          "children": [
            {
              "type": "void",
              "name": "removeChildren"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this node with the given node",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of join points",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of strings",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWithStrings"
            },
            {
              "type": "String[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Setting data directly is not supported, this action just emits a warning and does nothing",
          "children": [
            {
              "type": "void",
              "name": "setData"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the first child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setFirstChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String[]",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the last child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setLastChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the type of a node, if it has a type",
          "children": [
            {
              "type": "void",
              "name": "setType"
            },
            {
              "type": "type",
              "name": "type",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Associates arbitrary values to nodes of the AST",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "String",
              "name": "fieldName",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a map",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "Map",
              "name": "fieldNameAndValue",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the value associated with the given property key",
          "children": [
            {
              "type": "joinpoint",
              "name": "setValue"
            },
            {
              "type": "String",
              "name": "key",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "suffix",
              "defaultValue": ""
            }
          ]
        }
      ]
    },
    {
      "type": "joinpoint",
      "name": "emptyStmt",
      "extends": "statement",
      "children": [
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isFirst"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isLast"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "attributes"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "selects"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "actions"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "ancestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with a dump of the AST representation starting from this node. This representation corresponds to the internal Java representation of the ClavaAst, where the node names correspond to Java classes. To get an equivalent representation with join point names, use the attribute 'dump'",
          "children": [
            {
              "type": "String",
              "name": "ast"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor AST name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "astAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, considering null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "astChild"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, considering null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "astChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String that uniquely identifies this node",
          "children": [
            {
              "type": "String",
              "name": "astId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if this node is a Java instance of the given name, which corresponds to a simple Java class name of an AST node. For an equivalent function for join point names, use 'instanceOf(joinPointName)'",
          "children": [
            {
              "type": "boolean",
              "name": "astIsInstance"
            },
            {
              "type": "String",
              "name": "className"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the Java class of this node, which is similar to the equivalent node in Clang AST",
          "children": [
            {
              "type": "String",
              "name": "astName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, considering null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "astNumChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "astParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The bit width of the type returned by this join point, in relation to the definitions of its Translation Unit, or undefined if there is no type or bitwidth defined, or if the join point is not in a TranslationUnit",
          "children": [
            {
              "type": "Integer",
              "name": "bitWidth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String list of the names of the join points that form a path from the root to this node",
          "children": [
            {
              "type": "String[]",
              "name": "chain"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the joinpoint chain",
          "children": [
            {
              "type": "joinpoint",
              "name": "chainAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "child"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "children"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the code represented by this node",
          "children": [
            {
              "type": "String",
              "name": "code"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "column"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the given node is a descendant of this node",
          "children": [
            {
              "type": "Boolean",
              "name": "contains"
            },
            {
              "type": "joinpoint",
              "name": "jp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "currentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "JS object associated with this node, containing parsed data of #pragma clava data when the node can be a target of pragmas. This is a special object, managed internally, and cannot be reassigned, to change its contents requires using key-value pairs. If the node can be the target of a pragma, the information stored in this object is persisted between rebuilds.",
          "children": [
            {
              "type": "Object",
              "name": "data"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the depth of this join point in the AST. If it is the root join point returns 0, if it is a child of the root node returns 1, etc.",
          "children": [
            {
              "type": "Integer",
              "name": "depth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves all descendants of the join point",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type, including the node itself",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendantsAndSelf"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endColumn"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endLine"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the file where the code of this node is located, if available",
          "children": [
            {
              "type": "String",
              "name": "filename"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the complete path to the file where the code of this node comes from",
          "children": [
            {
              "type": "String",
              "name": "filepath"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the first child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks in the descendants for the first node of the given type",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstJp"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use 'userField' instead]",
          "children": [
            {
              "type": "Object",
              "name": "getUserField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The value associated with the given property key",
          "children": [
            {
              "type": "Object",
              "name": "getValue"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use hasParent instead]",
          "children": [
            {
              "type": "boolean",
              "name": "hasAstParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the node has children, false otherwise",
          "children": [
            {
              "type": "Boolean",
              "name": "hasChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the given join point or AST node is the same (== test) as the current join point AST node",
          "children": [
            {
              "type": "Boolean",
              "name": "hasNode"
            },
            {
              "type": "Object",
              "name": "nodeOrJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this node has a parent",
          "children": [
            {
              "type": "boolean",
              "name": "hasParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point has a type",
          "children": [
            {
              "type": "Boolean",
              "name": "hasType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns comments that are not explicitly in the AST, but embedded in other nodes",
          "children": [
            {
              "type": "comment[]",
              "name": "inlineComments"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this is a Cilk node (i.e., cilk_spawn, cilk_sync or cilk_for)",
          "children": [
            {
              "type": "Boolean",
              "name": "isCilk"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is part of a system header file",
          "children": [
            {
              "type": "Boolean",
              "name": "isInSystemHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a header (e.g., if condition, for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a loop header (e.g., for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideLoopHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if any descendant or the node itself was defined as a macro",
          "children": [
            {
              "type": "Boolean",
              "name": "isMacro"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the full Java class name of the type of the Java field with the provided name",
          "children": [
            {
              "type": "String",
              "name": "javaFieldType"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'keys' instead, together with 'getValue'] The names of the Java fields of this node. Can be used as key of the attribute 'javaValue'",
          "children": [
            {
              "type": "String[]",
              "name": "javaFields"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'getValue' instead, with the names returned by the attribute 'keys'] Returns the value associated with the provided Java field name",
          "children": [
            {
              "type": "Object",
              "name": "javaValue"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use joinPointType instead (uppercase P)]",
          "children": [
            {
              "type": "String",
              "name": "joinpointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Id that is based on the position of the node in the code, and should remain stable between compilations (warning: only a few nodes - file, function, loop - currently support it)",
          "children": [
            {
              "type": "String",
              "name": "jpId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Java Class instance with the type of the given key",
          "children": [
            {
              "type": "Object",
              "name": "keyType"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A list of the properties currently supported by this node. Can be used as parameter of the attribute 'getValue'",
          "children": [
            {
              "type": "String[]",
              "name": "keys"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[HACK: .descendants(type) does not work in .lara files, after GraalVM update] Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "laraDescendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the last child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "lastChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that came before this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "leftJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "line"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A string with information about the file and code position of this node, if available",
          "children": [
            {
              "type": "String",
              "name": "location"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, ignoring null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "numChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope that is a parent of the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The pragmas associated with this node",
          "children": [
            {
              "type": "pragma[]",
              "name": "pragmas"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that comes after this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "rightJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the 'program' joinpoint",
          "children": [
            {
              "type": "joinpoint",
              "name": "root"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the nodes of the scope of the current join point. If this node has a body (e.g., loop, function) corresponds to the children of the body. Otherwise, returns an empty array",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "scopeNodes"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that came before this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsLeft"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that come after this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsRight"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Converts this join point to a statement, or returns undefined if it was not possible",
          "children": [
            {
              "type": "statement",
              "name": "stmt"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "type",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrives values that have been associated to nodes of the AST with 'setUserField'",
          "children": [
            {
              "type": "Object",
              "name": "userField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a String with the type of the join point",
          "children": [
            {
              "type": "String",
              "name": "joinPointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the current join point is an instance of the given type",
          "children": [
            {
              "type": "Boolean",
              "name": "instanceOf"
            },
            {
              "type": "String",
              "name": "name"
            }
          ]
        },
        {
          "type": "select",
          "clazz": "expression",
          "alias": "expr"
        },
        {
          "type": "select",
          "clazz": "expression",
          "alias": "childExpr"
        },
        {
          "type": "select",
          "clazz": "call",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "call",
          "alias": "stmtCall"
        },
        {
          "type": "select",
          "clazz": "memberCall",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "memberAccess",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "arrayAccess",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "vardecl",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "varref",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "op",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "binaryOp",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "unaryOp",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "newExpr",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "deleteExpr",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "cilkSpawn",
          "alias": ""
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "insert"
            },
            {
              "type": "[before| after| replace]",
              "name": "position",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "def"
            },
            {
              "type": "String",
              "name": "attribute",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, but not of the nodes in its fields",
          "children": [
            {
              "type": "joinpoint",
              "name": "copy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Copies all enumerable own properties from the source object to the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataAssign"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Clears all properties from the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataClear"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, including the nodes in their fields (only the first level of field nodes, this function is not recursive)",
          "children": [
            {
              "type": "joinpoint",
              "name": "deepCopy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the node associated to this joinpoint from the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "detach"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point after this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point before this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Adds a message that will be printed to the user after weaving finishes. Identical messages are removed",
          "children": [
            {
              "type": "void",
              "name": "messageToUser"
            },
            {
              "type": "String",
              "name": "message",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the children of this node",
          "children": [
            {
              "type": "void",
              "name": "removeChildren"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this node with the given node",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of join points",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of strings",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWithStrings"
            },
            {
              "type": "String[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Setting data directly is not supported, this action just emits a warning and does nothing",
          "children": [
            {
              "type": "void",
              "name": "setData"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the first child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setFirstChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String[]",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the last child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setLastChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the type of a node, if it has a type",
          "children": [
            {
              "type": "void",
              "name": "setType"
            },
            {
              "type": "type",
              "name": "type",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Associates arbitrary values to nodes of the AST",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "String",
              "name": "fieldName",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a map",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "Map",
              "name": "fieldNameAndValue",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the value associated with the given property key",
          "children": [
            {
              "type": "joinpoint",
              "name": "setValue"
            },
            {
              "type": "String",
              "name": "key",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "suffix",
              "defaultValue": ""
            }
          ]
        }
      ]
    },
    {
      "type": "joinpoint",
      "name": "enumDecl",
      "defaultAttr": "name",
      "extends": "namedDecl",
      "tooltip": "Represents an enum",
      "children": [
        {
          "type": "attribute",
          "children": [
            {
              "type": "enumeratorDecl[]",
              "name": "enumerators"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isPublic"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String",
              "name": "name"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String",
              "name": "qualifiedName"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String",
              "name": "qualifiedPrefix"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The attributes (e.g. Pure, CUDAGlobal) associated to this decl",
          "children": [
            {
              "type": "attribute[]",
              "name": "attrs"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "attributes"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "selects"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "actions"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "ancestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with a dump of the AST representation starting from this node. This representation corresponds to the internal Java representation of the ClavaAst, where the node names correspond to Java classes. To get an equivalent representation with join point names, use the attribute 'dump'",
          "children": [
            {
              "type": "String",
              "name": "ast"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor AST name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "astAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, considering null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "astChild"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, considering null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "astChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String that uniquely identifies this node",
          "children": [
            {
              "type": "String",
              "name": "astId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if this node is a Java instance of the given name, which corresponds to a simple Java class name of an AST node. For an equivalent function for join point names, use 'instanceOf(joinPointName)'",
          "children": [
            {
              "type": "boolean",
              "name": "astIsInstance"
            },
            {
              "type": "String",
              "name": "className"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the Java class of this node, which is similar to the equivalent node in Clang AST",
          "children": [
            {
              "type": "String",
              "name": "astName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, considering null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "astNumChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "astParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The bit width of the type returned by this join point, in relation to the definitions of its Translation Unit, or undefined if there is no type or bitwidth defined, or if the join point is not in a TranslationUnit",
          "children": [
            {
              "type": "Integer",
              "name": "bitWidth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String list of the names of the join points that form a path from the root to this node",
          "children": [
            {
              "type": "String[]",
              "name": "chain"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the joinpoint chain",
          "children": [
            {
              "type": "joinpoint",
              "name": "chainAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "child"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "children"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the code represented by this node",
          "children": [
            {
              "type": "String",
              "name": "code"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "column"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the given node is a descendant of this node",
          "children": [
            {
              "type": "Boolean",
              "name": "contains"
            },
            {
              "type": "joinpoint",
              "name": "jp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "currentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "JS object associated with this node, containing parsed data of #pragma clava data when the node can be a target of pragmas. This is a special object, managed internally, and cannot be reassigned, to change its contents requires using key-value pairs. If the node can be the target of a pragma, the information stored in this object is persisted between rebuilds.",
          "children": [
            {
              "type": "Object",
              "name": "data"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the depth of this join point in the AST. If it is the root join point returns 0, if it is a child of the root node returns 1, etc.",
          "children": [
            {
              "type": "Integer",
              "name": "depth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves all descendants of the join point",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type, including the node itself",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendantsAndSelf"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endColumn"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endLine"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the file where the code of this node is located, if available",
          "children": [
            {
              "type": "String",
              "name": "filename"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the complete path to the file where the code of this node comes from",
          "children": [
            {
              "type": "String",
              "name": "filepath"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the first child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks in the descendants for the first node of the given type",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstJp"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use 'userField' instead]",
          "children": [
            {
              "type": "Object",
              "name": "getUserField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The value associated with the given property key",
          "children": [
            {
              "type": "Object",
              "name": "getValue"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use hasParent instead]",
          "children": [
            {
              "type": "boolean",
              "name": "hasAstParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the node has children, false otherwise",
          "children": [
            {
              "type": "Boolean",
              "name": "hasChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the given join point or AST node is the same (== test) as the current join point AST node",
          "children": [
            {
              "type": "Boolean",
              "name": "hasNode"
            },
            {
              "type": "Object",
              "name": "nodeOrJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this node has a parent",
          "children": [
            {
              "type": "boolean",
              "name": "hasParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point has a type",
          "children": [
            {
              "type": "Boolean",
              "name": "hasType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns comments that are not explicitly in the AST, but embedded in other nodes",
          "children": [
            {
              "type": "comment[]",
              "name": "inlineComments"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this is a Cilk node (i.e., cilk_spawn, cilk_sync or cilk_for)",
          "children": [
            {
              "type": "Boolean",
              "name": "isCilk"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is part of a system header file",
          "children": [
            {
              "type": "Boolean",
              "name": "isInSystemHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a header (e.g., if condition, for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a loop header (e.g., for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideLoopHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if any descendant or the node itself was defined as a macro",
          "children": [
            {
              "type": "Boolean",
              "name": "isMacro"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the full Java class name of the type of the Java field with the provided name",
          "children": [
            {
              "type": "String",
              "name": "javaFieldType"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'keys' instead, together with 'getValue'] The names of the Java fields of this node. Can be used as key of the attribute 'javaValue'",
          "children": [
            {
              "type": "String[]",
              "name": "javaFields"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'getValue' instead, with the names returned by the attribute 'keys'] Returns the value associated with the provided Java field name",
          "children": [
            {
              "type": "Object",
              "name": "javaValue"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use joinPointType instead (uppercase P)]",
          "children": [
            {
              "type": "String",
              "name": "joinpointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Id that is based on the position of the node in the code, and should remain stable between compilations (warning: only a few nodes - file, function, loop - currently support it)",
          "children": [
            {
              "type": "String",
              "name": "jpId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Java Class instance with the type of the given key",
          "children": [
            {
              "type": "Object",
              "name": "keyType"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A list of the properties currently supported by this node. Can be used as parameter of the attribute 'getValue'",
          "children": [
            {
              "type": "String[]",
              "name": "keys"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[HACK: .descendants(type) does not work in .lara files, after GraalVM update] Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "laraDescendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the last child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "lastChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that came before this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "leftJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "line"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A string with information about the file and code position of this node, if available",
          "children": [
            {
              "type": "String",
              "name": "location"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, ignoring null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "numChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope that is a parent of the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The pragmas associated with this node",
          "children": [
            {
              "type": "pragma[]",
              "name": "pragmas"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that comes after this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "rightJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the 'program' joinpoint",
          "children": [
            {
              "type": "joinpoint",
              "name": "root"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the nodes of the scope of the current join point. If this node has a body (e.g., loop, function) corresponds to the children of the body. Otherwise, returns an empty array",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "scopeNodes"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that came before this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsLeft"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that come after this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsRight"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Converts this join point to a statement, or returns undefined if it was not possible",
          "children": [
            {
              "type": "statement",
              "name": "stmt"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "type",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrives values that have been associated to nodes of the AST with 'setUserField'",
          "children": [
            {
              "type": "Object",
              "name": "userField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a String with the type of the join point",
          "children": [
            {
              "type": "String",
              "name": "joinPointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the current join point is an instance of the given type",
          "children": [
            {
              "type": "Boolean",
              "name": "instanceOf"
            },
            {
              "type": "String",
              "name": "name"
            }
          ]
        },
        {
          "type": "select",
          "clazz": "enumeratorDecl",
          "alias": "enumerator"
        },
        {
          "type": "action",
          "tooltip": "Sets the name of this namedDecl",
          "children": [
            {
              "type": "void",
              "name": "setName"
            },
            {
              "type": "String",
              "name": "name",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the qualified name of this namedDecl (changes both the name and qualified prefix)",
          "children": [
            {
              "type": "void",
              "name": "setQualifiedName"
            },
            {
              "type": "String",
              "name": "name",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the qualified prefix of this namedDecl",
          "children": [
            {
              "type": "void",
              "name": "setQualifiedPrefix"
            },
            {
              "type": "String",
              "name": "qualifiedPrefix",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "insert"
            },
            {
              "type": "[before| after| replace]",
              "name": "position",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "def"
            },
            {
              "type": "String",
              "name": "attribute",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, but not of the nodes in its fields",
          "children": [
            {
              "type": "joinpoint",
              "name": "copy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Copies all enumerable own properties from the source object to the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataAssign"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Clears all properties from the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataClear"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, including the nodes in their fields (only the first level of field nodes, this function is not recursive)",
          "children": [
            {
              "type": "joinpoint",
              "name": "deepCopy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the node associated to this joinpoint from the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "detach"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point after this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point before this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Adds a message that will be printed to the user after weaving finishes. Identical messages are removed",
          "children": [
            {
              "type": "void",
              "name": "messageToUser"
            },
            {
              "type": "String",
              "name": "message",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the children of this node",
          "children": [
            {
              "type": "void",
              "name": "removeChildren"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this node with the given node",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of join points",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of strings",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWithStrings"
            },
            {
              "type": "String[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Setting data directly is not supported, this action just emits a warning and does nothing",
          "children": [
            {
              "type": "void",
              "name": "setData"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the first child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setFirstChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String[]",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the last child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setLastChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the type of a node, if it has a type",
          "children": [
            {
              "type": "void",
              "name": "setType"
            },
            {
              "type": "type",
              "name": "type",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Associates arbitrary values to nodes of the AST",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "String",
              "name": "fieldName",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a map",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "Map",
              "name": "fieldNameAndValue",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the value associated with the given property key",
          "children": [
            {
              "type": "joinpoint",
              "name": "setValue"
            },
            {
              "type": "String",
              "name": "key",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "suffix",
              "defaultValue": ""
            }
          ]
        }
      ]
    },
    {
      "type": "joinpoint",
      "name": "enumType",
      "extends": "tagType",
      "children": [
        {
          "type": "attribute",
          "children": [
            {
              "type": "type",
              "name": "integerType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a 'decl' join point that represents the declaration of this tag type",
          "children": [
            {
              "type": "decl",
              "name": "decl"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String",
              "name": "name"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Integer[]",
              "name": "arrayDims"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Integer",
              "name": "arraySize"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The bit width of this type in the Translation Unit of the given join point, or undefined if there is no bitwidth defined",
          "children": [
            {
              "type": "Integer",
              "name": "bitWidth"
            },
            {
              "type": "joinpoint",
              "name": "reference"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "constant"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Single-step desugar. Returns the type itself if it does not have sugar",
          "children": [
            {
              "type": "type",
              "name": "desugar"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Completely desugars the type",
          "children": [
            {
              "type": "type",
              "name": "desugarAll"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A tree representation of the fields of this type",
          "children": [
            {
              "type": "String",
              "name": "fieldTree"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "hasSugar"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "hasTemplateArgs"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isArray"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "True if this is a type declared with the 'auto' keyword",
          "children": [
            {
              "type": "Boolean",
              "name": "isAuto"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isBuiltin"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isPointer"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isTopLevel"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String",
              "name": "kind"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Ignores certain types (e.g., DecayedType)",
          "children": [
            {
              "type": "type",
              "name": "normalize"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "templateArgsStrings"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "type[]",
              "name": "templateArgsTypes"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Maps names of join point fields that represent type join points, to their respective values",
          "children": [
            {
              "type": "Map",
              "name": "typeFields"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "If the type encapsulates another type, returns the encapsulated type",
          "children": [
            {
              "type": "type",
              "name": "unwrap"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "attributes"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "selects"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "actions"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "ancestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with a dump of the AST representation starting from this node. This representation corresponds to the internal Java representation of the ClavaAst, where the node names correspond to Java classes. To get an equivalent representation with join point names, use the attribute 'dump'",
          "children": [
            {
              "type": "String",
              "name": "ast"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor AST name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "astAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, considering null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "astChild"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, considering null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "astChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String that uniquely identifies this node",
          "children": [
            {
              "type": "String",
              "name": "astId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if this node is a Java instance of the given name, which corresponds to a simple Java class name of an AST node. For an equivalent function for join point names, use 'instanceOf(joinPointName)'",
          "children": [
            {
              "type": "boolean",
              "name": "astIsInstance"
            },
            {
              "type": "String",
              "name": "className"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the Java class of this node, which is similar to the equivalent node in Clang AST",
          "children": [
            {
              "type": "String",
              "name": "astName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, considering null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "astNumChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "astParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The bit width of the type returned by this join point, in relation to the definitions of its Translation Unit, or undefined if there is no type or bitwidth defined, or if the join point is not in a TranslationUnit",
          "children": [
            {
              "type": "Integer",
              "name": "bitWidth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String list of the names of the join points that form a path from the root to this node",
          "children": [
            {
              "type": "String[]",
              "name": "chain"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the joinpoint chain",
          "children": [
            {
              "type": "joinpoint",
              "name": "chainAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "child"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "children"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the code represented by this node",
          "children": [
            {
              "type": "String",
              "name": "code"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "column"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the given node is a descendant of this node",
          "children": [
            {
              "type": "Boolean",
              "name": "contains"
            },
            {
              "type": "joinpoint",
              "name": "jp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "currentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "JS object associated with this node, containing parsed data of #pragma clava data when the node can be a target of pragmas. This is a special object, managed internally, and cannot be reassigned, to change its contents requires using key-value pairs. If the node can be the target of a pragma, the information stored in this object is persisted between rebuilds.",
          "children": [
            {
              "type": "Object",
              "name": "data"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the depth of this join point in the AST. If it is the root join point returns 0, if it is a child of the root node returns 1, etc.",
          "children": [
            {
              "type": "Integer",
              "name": "depth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves all descendants of the join point",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type, including the node itself",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendantsAndSelf"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endColumn"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endLine"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the file where the code of this node is located, if available",
          "children": [
            {
              "type": "String",
              "name": "filename"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the complete path to the file where the code of this node comes from",
          "children": [
            {
              "type": "String",
              "name": "filepath"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the first child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks in the descendants for the first node of the given type",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstJp"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use 'userField' instead]",
          "children": [
            {
              "type": "Object",
              "name": "getUserField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The value associated with the given property key",
          "children": [
            {
              "type": "Object",
              "name": "getValue"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use hasParent instead]",
          "children": [
            {
              "type": "boolean",
              "name": "hasAstParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the node has children, false otherwise",
          "children": [
            {
              "type": "Boolean",
              "name": "hasChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the given join point or AST node is the same (== test) as the current join point AST node",
          "children": [
            {
              "type": "Boolean",
              "name": "hasNode"
            },
            {
              "type": "Object",
              "name": "nodeOrJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this node has a parent",
          "children": [
            {
              "type": "boolean",
              "name": "hasParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point has a type",
          "children": [
            {
              "type": "Boolean",
              "name": "hasType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns comments that are not explicitly in the AST, but embedded in other nodes",
          "children": [
            {
              "type": "comment[]",
              "name": "inlineComments"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this is a Cilk node (i.e., cilk_spawn, cilk_sync or cilk_for)",
          "children": [
            {
              "type": "Boolean",
              "name": "isCilk"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is part of a system header file",
          "children": [
            {
              "type": "Boolean",
              "name": "isInSystemHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a header (e.g., if condition, for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a loop header (e.g., for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideLoopHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if any descendant or the node itself was defined as a macro",
          "children": [
            {
              "type": "Boolean",
              "name": "isMacro"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the full Java class name of the type of the Java field with the provided name",
          "children": [
            {
              "type": "String",
              "name": "javaFieldType"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'keys' instead, together with 'getValue'] The names of the Java fields of this node. Can be used as key of the attribute 'javaValue'",
          "children": [
            {
              "type": "String[]",
              "name": "javaFields"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'getValue' instead, with the names returned by the attribute 'keys'] Returns the value associated with the provided Java field name",
          "children": [
            {
              "type": "Object",
              "name": "javaValue"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use joinPointType instead (uppercase P)]",
          "children": [
            {
              "type": "String",
              "name": "joinpointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Id that is based on the position of the node in the code, and should remain stable between compilations (warning: only a few nodes - file, function, loop - currently support it)",
          "children": [
            {
              "type": "String",
              "name": "jpId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Java Class instance with the type of the given key",
          "children": [
            {
              "type": "Object",
              "name": "keyType"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A list of the properties currently supported by this node. Can be used as parameter of the attribute 'getValue'",
          "children": [
            {
              "type": "String[]",
              "name": "keys"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[HACK: .descendants(type) does not work in .lara files, after GraalVM update] Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "laraDescendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the last child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "lastChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that came before this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "leftJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "line"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A string with information about the file and code position of this node, if available",
          "children": [
            {
              "type": "String",
              "name": "location"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, ignoring null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "numChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope that is a parent of the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The pragmas associated with this node",
          "children": [
            {
              "type": "pragma[]",
              "name": "pragmas"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that comes after this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "rightJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the 'program' joinpoint",
          "children": [
            {
              "type": "joinpoint",
              "name": "root"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the nodes of the scope of the current join point. If this node has a body (e.g., loop, function) corresponds to the children of the body. Otherwise, returns an empty array",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "scopeNodes"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that came before this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsLeft"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that come after this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsRight"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Converts this join point to a statement, or returns undefined if it was not possible",
          "children": [
            {
              "type": "statement",
              "name": "stmt"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "type",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrives values that have been associated to nodes of the AST with 'setUserField'",
          "children": [
            {
              "type": "Object",
              "name": "userField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a String with the type of the join point",
          "children": [
            {
              "type": "String",
              "name": "joinPointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the current join point is an instance of the given type",
          "children": [
            {
              "type": "Boolean",
              "name": "instanceOf"
            },
            {
              "type": "String",
              "name": "name"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Returns a copy of this type with the qualifier const",
          "children": [
            {
              "type": "type",
              "name": "asConst"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the desugared type of this type",
          "children": [
            {
              "type": "void",
              "name": "setDesugar"
            },
            {
              "type": "type",
              "name": "desugaredType",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the template argument types of a template type",
          "children": [
            {
              "type": "void",
              "name": "setTemplateArgsTypes"
            },
            {
              "type": "type[]",
              "name": "templateArgTypes",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets a single template argument type of a template type",
          "children": [
            {
              "type": "void",
              "name": "setTemplateArgsTypes"
            },
            {
              "type": "Integer",
              "name": "index",
              "defaultValue": ""
            },
            {
              "type": "type",
              "name": "templateArgType",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Changes a single occurence of a type field that has the current value with new value. Returns true if there was a change",
          "children": [
            {
              "type": "boolean",
              "name": "setTypeFieldByValueRecursive"
            },
            {
              "type": "Object",
              "name": "currentValue",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "newValue",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces an underlying type of this instance with new type, if it matches the old type. Returns true if there were changes",
          "children": [
            {
              "type": "type",
              "name": "setUnderlyingType"
            },
            {
              "type": "type",
              "name": "oldValue",
              "defaultValue": ""
            },
            {
              "type": "type",
              "name": "newValue",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "insert"
            },
            {
              "type": "[before| after| replace]",
              "name": "position",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "def"
            },
            {
              "type": "String",
              "name": "attribute",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, but not of the nodes in its fields",
          "children": [
            {
              "type": "joinpoint",
              "name": "copy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Copies all enumerable own properties from the source object to the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataAssign"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Clears all properties from the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataClear"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, including the nodes in their fields (only the first level of field nodes, this function is not recursive)",
          "children": [
            {
              "type": "joinpoint",
              "name": "deepCopy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the node associated to this joinpoint from the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "detach"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point after this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point before this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Adds a message that will be printed to the user after weaving finishes. Identical messages are removed",
          "children": [
            {
              "type": "void",
              "name": "messageToUser"
            },
            {
              "type": "String",
              "name": "message",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the children of this node",
          "children": [
            {
              "type": "void",
              "name": "removeChildren"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this node with the given node",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of join points",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of strings",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWithStrings"
            },
            {
              "type": "String[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Setting data directly is not supported, this action just emits a warning and does nothing",
          "children": [
            {
              "type": "void",
              "name": "setData"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the first child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setFirstChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String[]",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the last child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setLastChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the type of a node, if it has a type",
          "children": [
            {
              "type": "void",
              "name": "setType"
            },
            {
              "type": "type",
              "name": "type",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Associates arbitrary values to nodes of the AST",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "String",
              "name": "fieldName",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a map",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "Map",
              "name": "fieldNameAndValue",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the value associated with the given property key",
          "children": [
            {
              "type": "joinpoint",
              "name": "setValue"
            },
            {
              "type": "String",
              "name": "key",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "suffix",
              "defaultValue": ""
            }
          ]
        }
      ]
    },
    {
      "type": "joinpoint",
      "name": "enumeratorDecl",
      "defaultAttr": "name",
      "extends": "namedDecl",
      "children": [
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isPublic"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String",
              "name": "name"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String",
              "name": "qualifiedName"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String",
              "name": "qualifiedPrefix"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The attributes (e.g. Pure, CUDAGlobal) associated to this decl",
          "children": [
            {
              "type": "attribute[]",
              "name": "attrs"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "attributes"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "selects"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "actions"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "ancestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with a dump of the AST representation starting from this node. This representation corresponds to the internal Java representation of the ClavaAst, where the node names correspond to Java classes. To get an equivalent representation with join point names, use the attribute 'dump'",
          "children": [
            {
              "type": "String",
              "name": "ast"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor AST name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "astAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, considering null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "astChild"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, considering null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "astChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String that uniquely identifies this node",
          "children": [
            {
              "type": "String",
              "name": "astId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if this node is a Java instance of the given name, which corresponds to a simple Java class name of an AST node. For an equivalent function for join point names, use 'instanceOf(joinPointName)'",
          "children": [
            {
              "type": "boolean",
              "name": "astIsInstance"
            },
            {
              "type": "String",
              "name": "className"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the Java class of this node, which is similar to the equivalent node in Clang AST",
          "children": [
            {
              "type": "String",
              "name": "astName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, considering null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "astNumChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "astParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The bit width of the type returned by this join point, in relation to the definitions of its Translation Unit, or undefined if there is no type or bitwidth defined, or if the join point is not in a TranslationUnit",
          "children": [
            {
              "type": "Integer",
              "name": "bitWidth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String list of the names of the join points that form a path from the root to this node",
          "children": [
            {
              "type": "String[]",
              "name": "chain"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the joinpoint chain",
          "children": [
            {
              "type": "joinpoint",
              "name": "chainAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "child"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "children"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the code represented by this node",
          "children": [
            {
              "type": "String",
              "name": "code"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "column"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the given node is a descendant of this node",
          "children": [
            {
              "type": "Boolean",
              "name": "contains"
            },
            {
              "type": "joinpoint",
              "name": "jp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "currentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "JS object associated with this node, containing parsed data of #pragma clava data when the node can be a target of pragmas. This is a special object, managed internally, and cannot be reassigned, to change its contents requires using key-value pairs. If the node can be the target of a pragma, the information stored in this object is persisted between rebuilds.",
          "children": [
            {
              "type": "Object",
              "name": "data"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the depth of this join point in the AST. If it is the root join point returns 0, if it is a child of the root node returns 1, etc.",
          "children": [
            {
              "type": "Integer",
              "name": "depth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves all descendants of the join point",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type, including the node itself",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendantsAndSelf"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endColumn"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endLine"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the file where the code of this node is located, if available",
          "children": [
            {
              "type": "String",
              "name": "filename"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the complete path to the file where the code of this node comes from",
          "children": [
            {
              "type": "String",
              "name": "filepath"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the first child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks in the descendants for the first node of the given type",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstJp"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use 'userField' instead]",
          "children": [
            {
              "type": "Object",
              "name": "getUserField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The value associated with the given property key",
          "children": [
            {
              "type": "Object",
              "name": "getValue"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use hasParent instead]",
          "children": [
            {
              "type": "boolean",
              "name": "hasAstParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the node has children, false otherwise",
          "children": [
            {
              "type": "Boolean",
              "name": "hasChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the given join point or AST node is the same (== test) as the current join point AST node",
          "children": [
            {
              "type": "Boolean",
              "name": "hasNode"
            },
            {
              "type": "Object",
              "name": "nodeOrJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this node has a parent",
          "children": [
            {
              "type": "boolean",
              "name": "hasParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point has a type",
          "children": [
            {
              "type": "Boolean",
              "name": "hasType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns comments that are not explicitly in the AST, but embedded in other nodes",
          "children": [
            {
              "type": "comment[]",
              "name": "inlineComments"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this is a Cilk node (i.e., cilk_spawn, cilk_sync or cilk_for)",
          "children": [
            {
              "type": "Boolean",
              "name": "isCilk"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is part of a system header file",
          "children": [
            {
              "type": "Boolean",
              "name": "isInSystemHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a header (e.g., if condition, for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a loop header (e.g., for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideLoopHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if any descendant or the node itself was defined as a macro",
          "children": [
            {
              "type": "Boolean",
              "name": "isMacro"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the full Java class name of the type of the Java field with the provided name",
          "children": [
            {
              "type": "String",
              "name": "javaFieldType"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'keys' instead, together with 'getValue'] The names of the Java fields of this node. Can be used as key of the attribute 'javaValue'",
          "children": [
            {
              "type": "String[]",
              "name": "javaFields"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'getValue' instead, with the names returned by the attribute 'keys'] Returns the value associated with the provided Java field name",
          "children": [
            {
              "type": "Object",
              "name": "javaValue"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use joinPointType instead (uppercase P)]",
          "children": [
            {
              "type": "String",
              "name": "joinpointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Id that is based on the position of the node in the code, and should remain stable between compilations (warning: only a few nodes - file, function, loop - currently support it)",
          "children": [
            {
              "type": "String",
              "name": "jpId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Java Class instance with the type of the given key",
          "children": [
            {
              "type": "Object",
              "name": "keyType"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A list of the properties currently supported by this node. Can be used as parameter of the attribute 'getValue'",
          "children": [
            {
              "type": "String[]",
              "name": "keys"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[HACK: .descendants(type) does not work in .lara files, after GraalVM update] Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "laraDescendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the last child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "lastChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that came before this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "leftJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "line"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A string with information about the file and code position of this node, if available",
          "children": [
            {
              "type": "String",
              "name": "location"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, ignoring null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "numChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope that is a parent of the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The pragmas associated with this node",
          "children": [
            {
              "type": "pragma[]",
              "name": "pragmas"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that comes after this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "rightJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the 'program' joinpoint",
          "children": [
            {
              "type": "joinpoint",
              "name": "root"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the nodes of the scope of the current join point. If this node has a body (e.g., loop, function) corresponds to the children of the body. Otherwise, returns an empty array",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "scopeNodes"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that came before this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsLeft"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that come after this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsRight"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Converts this join point to a statement, or returns undefined if it was not possible",
          "children": [
            {
              "type": "statement",
              "name": "stmt"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "type",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrives values that have been associated to nodes of the AST with 'setUserField'",
          "children": [
            {
              "type": "Object",
              "name": "userField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a String with the type of the join point",
          "children": [
            {
              "type": "String",
              "name": "joinPointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the current join point is an instance of the given type",
          "children": [
            {
              "type": "Boolean",
              "name": "instanceOf"
            },
            {
              "type": "String",
              "name": "name"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the name of this namedDecl",
          "children": [
            {
              "type": "void",
              "name": "setName"
            },
            {
              "type": "String",
              "name": "name",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the qualified name of this namedDecl (changes both the name and qualified prefix)",
          "children": [
            {
              "type": "void",
              "name": "setQualifiedName"
            },
            {
              "type": "String",
              "name": "name",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the qualified prefix of this namedDecl",
          "children": [
            {
              "type": "void",
              "name": "setQualifiedPrefix"
            },
            {
              "type": "String",
              "name": "qualifiedPrefix",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "insert"
            },
            {
              "type": "[before| after| replace]",
              "name": "position",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "def"
            },
            {
              "type": "String",
              "name": "attribute",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, but not of the nodes in its fields",
          "children": [
            {
              "type": "joinpoint",
              "name": "copy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Copies all enumerable own properties from the source object to the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataAssign"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Clears all properties from the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataClear"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, including the nodes in their fields (only the first level of field nodes, this function is not recursive)",
          "children": [
            {
              "type": "joinpoint",
              "name": "deepCopy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the node associated to this joinpoint from the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "detach"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point after this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point before this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Adds a message that will be printed to the user after weaving finishes. Identical messages are removed",
          "children": [
            {
              "type": "void",
              "name": "messageToUser"
            },
            {
              "type": "String",
              "name": "message",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the children of this node",
          "children": [
            {
              "type": "void",
              "name": "removeChildren"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this node with the given node",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of join points",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of strings",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWithStrings"
            },
            {
              "type": "String[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Setting data directly is not supported, this action just emits a warning and does nothing",
          "children": [
            {
              "type": "void",
              "name": "setData"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the first child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setFirstChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String[]",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the last child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setLastChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the type of a node, if it has a type",
          "children": [
            {
              "type": "void",
              "name": "setType"
            },
            {
              "type": "type",
              "name": "type",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Associates arbitrary values to nodes of the AST",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "String",
              "name": "fieldName",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a map",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "Map",
              "name": "fieldNameAndValue",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the value associated with the given property key",
          "children": [
            {
              "type": "joinpoint",
              "name": "setValue"
            },
            {
              "type": "String",
              "name": "key",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "suffix",
              "defaultValue": ""
            }
          ]
        }
      ]
    },
    {
      "type": "joinpoint",
      "name": "exprStmt",
      "extends": "statement",
      "children": [
        {
          "type": "attribute",
          "tooltip": "The expression join point associated to this exprStmt",
          "children": [
            {
              "type": "expression",
              "name": "expr"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isFirst"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isLast"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "attributes"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "selects"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "actions"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "ancestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with a dump of the AST representation starting from this node. This representation corresponds to the internal Java representation of the ClavaAst, where the node names correspond to Java classes. To get an equivalent representation with join point names, use the attribute 'dump'",
          "children": [
            {
              "type": "String",
              "name": "ast"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor AST name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "astAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, considering null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "astChild"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, considering null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "astChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String that uniquely identifies this node",
          "children": [
            {
              "type": "String",
              "name": "astId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if this node is a Java instance of the given name, which corresponds to a simple Java class name of an AST node. For an equivalent function for join point names, use 'instanceOf(joinPointName)'",
          "children": [
            {
              "type": "boolean",
              "name": "astIsInstance"
            },
            {
              "type": "String",
              "name": "className"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the Java class of this node, which is similar to the equivalent node in Clang AST",
          "children": [
            {
              "type": "String",
              "name": "astName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, considering null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "astNumChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "astParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The bit width of the type returned by this join point, in relation to the definitions of its Translation Unit, or undefined if there is no type or bitwidth defined, or if the join point is not in a TranslationUnit",
          "children": [
            {
              "type": "Integer",
              "name": "bitWidth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String list of the names of the join points that form a path from the root to this node",
          "children": [
            {
              "type": "String[]",
              "name": "chain"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the joinpoint chain",
          "children": [
            {
              "type": "joinpoint",
              "name": "chainAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "child"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "children"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the code represented by this node",
          "children": [
            {
              "type": "String",
              "name": "code"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "column"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the given node is a descendant of this node",
          "children": [
            {
              "type": "Boolean",
              "name": "contains"
            },
            {
              "type": "joinpoint",
              "name": "jp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "currentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "JS object associated with this node, containing parsed data of #pragma clava data when the node can be a target of pragmas. This is a special object, managed internally, and cannot be reassigned, to change its contents requires using key-value pairs. If the node can be the target of a pragma, the information stored in this object is persisted between rebuilds.",
          "children": [
            {
              "type": "Object",
              "name": "data"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the depth of this join point in the AST. If it is the root join point returns 0, if it is a child of the root node returns 1, etc.",
          "children": [
            {
              "type": "Integer",
              "name": "depth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves all descendants of the join point",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type, including the node itself",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendantsAndSelf"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endColumn"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endLine"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the file where the code of this node is located, if available",
          "children": [
            {
              "type": "String",
              "name": "filename"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the complete path to the file where the code of this node comes from",
          "children": [
            {
              "type": "String",
              "name": "filepath"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the first child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks in the descendants for the first node of the given type",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstJp"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use 'userField' instead]",
          "children": [
            {
              "type": "Object",
              "name": "getUserField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The value associated with the given property key",
          "children": [
            {
              "type": "Object",
              "name": "getValue"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use hasParent instead]",
          "children": [
            {
              "type": "boolean",
              "name": "hasAstParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the node has children, false otherwise",
          "children": [
            {
              "type": "Boolean",
              "name": "hasChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the given join point or AST node is the same (== test) as the current join point AST node",
          "children": [
            {
              "type": "Boolean",
              "name": "hasNode"
            },
            {
              "type": "Object",
              "name": "nodeOrJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this node has a parent",
          "children": [
            {
              "type": "boolean",
              "name": "hasParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point has a type",
          "children": [
            {
              "type": "Boolean",
              "name": "hasType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns comments that are not explicitly in the AST, but embedded in other nodes",
          "children": [
            {
              "type": "comment[]",
              "name": "inlineComments"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this is a Cilk node (i.e., cilk_spawn, cilk_sync or cilk_for)",
          "children": [
            {
              "type": "Boolean",
              "name": "isCilk"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is part of a system header file",
          "children": [
            {
              "type": "Boolean",
              "name": "isInSystemHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a header (e.g., if condition, for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a loop header (e.g., for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideLoopHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if any descendant or the node itself was defined as a macro",
          "children": [
            {
              "type": "Boolean",
              "name": "isMacro"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the full Java class name of the type of the Java field with the provided name",
          "children": [
            {
              "type": "String",
              "name": "javaFieldType"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'keys' instead, together with 'getValue'] The names of the Java fields of this node. Can be used as key of the attribute 'javaValue'",
          "children": [
            {
              "type": "String[]",
              "name": "javaFields"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'getValue' instead, with the names returned by the attribute 'keys'] Returns the value associated with the provided Java field name",
          "children": [
            {
              "type": "Object",
              "name": "javaValue"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use joinPointType instead (uppercase P)]",
          "children": [
            {
              "type": "String",
              "name": "joinpointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Id that is based on the position of the node in the code, and should remain stable between compilations (warning: only a few nodes - file, function, loop - currently support it)",
          "children": [
            {
              "type": "String",
              "name": "jpId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Java Class instance with the type of the given key",
          "children": [
            {
              "type": "Object",
              "name": "keyType"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A list of the properties currently supported by this node. Can be used as parameter of the attribute 'getValue'",
          "children": [
            {
              "type": "String[]",
              "name": "keys"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[HACK: .descendants(type) does not work in .lara files, after GraalVM update] Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "laraDescendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the last child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "lastChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that came before this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "leftJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "line"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A string with information about the file and code position of this node, if available",
          "children": [
            {
              "type": "String",
              "name": "location"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, ignoring null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "numChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope that is a parent of the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The pragmas associated with this node",
          "children": [
            {
              "type": "pragma[]",
              "name": "pragmas"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that comes after this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "rightJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the 'program' joinpoint",
          "children": [
            {
              "type": "joinpoint",
              "name": "root"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the nodes of the scope of the current join point. If this node has a body (e.g., loop, function) corresponds to the children of the body. Otherwise, returns an empty array",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "scopeNodes"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that came before this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsLeft"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that come after this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsRight"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Converts this join point to a statement, or returns undefined if it was not possible",
          "children": [
            {
              "type": "statement",
              "name": "stmt"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "type",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrives values that have been associated to nodes of the AST with 'setUserField'",
          "children": [
            {
              "type": "Object",
              "name": "userField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a String with the type of the join point",
          "children": [
            {
              "type": "String",
              "name": "joinPointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the current join point is an instance of the given type",
          "children": [
            {
              "type": "Boolean",
              "name": "instanceOf"
            },
            {
              "type": "String",
              "name": "name"
            }
          ]
        },
        {
          "type": "select",
          "clazz": "expression",
          "alias": "expr"
        },
        {
          "type": "select",
          "clazz": "expression",
          "alias": "childExpr"
        },
        {
          "type": "select",
          "clazz": "call",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "call",
          "alias": "stmtCall"
        },
        {
          "type": "select",
          "clazz": "memberCall",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "memberAccess",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "arrayAccess",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "vardecl",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "varref",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "op",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "binaryOp",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "unaryOp",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "newExpr",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "deleteExpr",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "cilkSpawn",
          "alias": ""
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "insert"
            },
            {
              "type": "[before| after| replace]",
              "name": "position",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "def"
            },
            {
              "type": "String",
              "name": "attribute",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, but not of the nodes in its fields",
          "children": [
            {
              "type": "joinpoint",
              "name": "copy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Copies all enumerable own properties from the source object to the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataAssign"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Clears all properties from the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataClear"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, including the nodes in their fields (only the first level of field nodes, this function is not recursive)",
          "children": [
            {
              "type": "joinpoint",
              "name": "deepCopy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the node associated to this joinpoint from the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "detach"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point after this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point before this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Adds a message that will be printed to the user after weaving finishes. Identical messages are removed",
          "children": [
            {
              "type": "void",
              "name": "messageToUser"
            },
            {
              "type": "String",
              "name": "message",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the children of this node",
          "children": [
            {
              "type": "void",
              "name": "removeChildren"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this node with the given node",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of join points",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of strings",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWithStrings"
            },
            {
              "type": "String[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Setting data directly is not supported, this action just emits a warning and does nothing",
          "children": [
            {
              "type": "void",
              "name": "setData"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the first child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setFirstChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String[]",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the last child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setLastChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the type of a node, if it has a type",
          "children": [
            {
              "type": "void",
              "name": "setType"
            },
            {
              "type": "type",
              "name": "type",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Associates arbitrary values to nodes of the AST",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "String",
              "name": "fieldName",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a map",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "Map",
              "name": "fieldNameAndValue",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the value associated with the given property key",
          "children": [
            {
              "type": "joinpoint",
              "name": "setValue"
            },
            {
              "type": "String",
              "name": "key",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "suffix",
              "defaultValue": ""
            }
          ]
        }
      ]
    },
    {
      "type": "joinpoint",
      "name": "expression",
      "extends": "joinpoint",
      "children": [
        {
          "type": "attribute",
          "tooltip": "a 'decl' join point that represents the declaration associated with this expression, or undefined if there is none",
          "children": [
            {
              "type": "decl",
              "name": "decl"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "returns a cast joinpoint if this expression has an associated implicit cast, undefined otherwise",
          "children": [
            {
              "type": "cast",
              "name": "implicitCast"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the expression is part of an argument of a function call",
          "children": [
            {
              "type": "Boolean",
              "name": "isFunctionArgument"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "[read| write| readwrite]",
              "name": "use"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "vardecl",
              "name": "vardecl"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "attributes"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "selects"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "actions"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "ancestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with a dump of the AST representation starting from this node. This representation corresponds to the internal Java representation of the ClavaAst, where the node names correspond to Java classes. To get an equivalent representation with join point names, use the attribute 'dump'",
          "children": [
            {
              "type": "String",
              "name": "ast"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor AST name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "astAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, considering null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "astChild"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, considering null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "astChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String that uniquely identifies this node",
          "children": [
            {
              "type": "String",
              "name": "astId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if this node is a Java instance of the given name, which corresponds to a simple Java class name of an AST node. For an equivalent function for join point names, use 'instanceOf(joinPointName)'",
          "children": [
            {
              "type": "boolean",
              "name": "astIsInstance"
            },
            {
              "type": "String",
              "name": "className"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the Java class of this node, which is similar to the equivalent node in Clang AST",
          "children": [
            {
              "type": "String",
              "name": "astName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, considering null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "astNumChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "astParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The bit width of the type returned by this join point, in relation to the definitions of its Translation Unit, or undefined if there is no type or bitwidth defined, or if the join point is not in a TranslationUnit",
          "children": [
            {
              "type": "Integer",
              "name": "bitWidth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String list of the names of the join points that form a path from the root to this node",
          "children": [
            {
              "type": "String[]",
              "name": "chain"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the joinpoint chain",
          "children": [
            {
              "type": "joinpoint",
              "name": "chainAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "child"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "children"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the code represented by this node",
          "children": [
            {
              "type": "String",
              "name": "code"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "column"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the given node is a descendant of this node",
          "children": [
            {
              "type": "Boolean",
              "name": "contains"
            },
            {
              "type": "joinpoint",
              "name": "jp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "currentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "JS object associated with this node, containing parsed data of #pragma clava data when the node can be a target of pragmas. This is a special object, managed internally, and cannot be reassigned, to change its contents requires using key-value pairs. If the node can be the target of a pragma, the information stored in this object is persisted between rebuilds.",
          "children": [
            {
              "type": "Object",
              "name": "data"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the depth of this join point in the AST. If it is the root join point returns 0, if it is a child of the root node returns 1, etc.",
          "children": [
            {
              "type": "Integer",
              "name": "depth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves all descendants of the join point",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type, including the node itself",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendantsAndSelf"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endColumn"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endLine"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the file where the code of this node is located, if available",
          "children": [
            {
              "type": "String",
              "name": "filename"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the complete path to the file where the code of this node comes from",
          "children": [
            {
              "type": "String",
              "name": "filepath"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the first child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks in the descendants for the first node of the given type",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstJp"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use 'userField' instead]",
          "children": [
            {
              "type": "Object",
              "name": "getUserField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The value associated with the given property key",
          "children": [
            {
              "type": "Object",
              "name": "getValue"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use hasParent instead]",
          "children": [
            {
              "type": "boolean",
              "name": "hasAstParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the node has children, false otherwise",
          "children": [
            {
              "type": "Boolean",
              "name": "hasChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the given join point or AST node is the same (== test) as the current join point AST node",
          "children": [
            {
              "type": "Boolean",
              "name": "hasNode"
            },
            {
              "type": "Object",
              "name": "nodeOrJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this node has a parent",
          "children": [
            {
              "type": "boolean",
              "name": "hasParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point has a type",
          "children": [
            {
              "type": "Boolean",
              "name": "hasType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns comments that are not explicitly in the AST, but embedded in other nodes",
          "children": [
            {
              "type": "comment[]",
              "name": "inlineComments"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this is a Cilk node (i.e., cilk_spawn, cilk_sync or cilk_for)",
          "children": [
            {
              "type": "Boolean",
              "name": "isCilk"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is part of a system header file",
          "children": [
            {
              "type": "Boolean",
              "name": "isInSystemHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a header (e.g., if condition, for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a loop header (e.g., for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideLoopHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if any descendant or the node itself was defined as a macro",
          "children": [
            {
              "type": "Boolean",
              "name": "isMacro"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the full Java class name of the type of the Java field with the provided name",
          "children": [
            {
              "type": "String",
              "name": "javaFieldType"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'keys' instead, together with 'getValue'] The names of the Java fields of this node. Can be used as key of the attribute 'javaValue'",
          "children": [
            {
              "type": "String[]",
              "name": "javaFields"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'getValue' instead, with the names returned by the attribute 'keys'] Returns the value associated with the provided Java field name",
          "children": [
            {
              "type": "Object",
              "name": "javaValue"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use joinPointType instead (uppercase P)]",
          "children": [
            {
              "type": "String",
              "name": "joinpointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Id that is based on the position of the node in the code, and should remain stable between compilations (warning: only a few nodes - file, function, loop - currently support it)",
          "children": [
            {
              "type": "String",
              "name": "jpId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Java Class instance with the type of the given key",
          "children": [
            {
              "type": "Object",
              "name": "keyType"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A list of the properties currently supported by this node. Can be used as parameter of the attribute 'getValue'",
          "children": [
            {
              "type": "String[]",
              "name": "keys"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[HACK: .descendants(type) does not work in .lara files, after GraalVM update] Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "laraDescendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the last child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "lastChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that came before this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "leftJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "line"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A string with information about the file and code position of this node, if available",
          "children": [
            {
              "type": "String",
              "name": "location"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, ignoring null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "numChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope that is a parent of the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The pragmas associated with this node",
          "children": [
            {
              "type": "pragma[]",
              "name": "pragmas"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that comes after this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "rightJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the 'program' joinpoint",
          "children": [
            {
              "type": "joinpoint",
              "name": "root"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the nodes of the scope of the current join point. If this node has a body (e.g., loop, function) corresponds to the children of the body. Otherwise, returns an empty array",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "scopeNodes"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that came before this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsLeft"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that come after this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsRight"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Converts this join point to a statement, or returns undefined if it was not possible",
          "children": [
            {
              "type": "statement",
              "name": "stmt"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "type",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrives values that have been associated to nodes of the AST with 'setUserField'",
          "children": [
            {
              "type": "Object",
              "name": "userField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a String with the type of the join point",
          "children": [
            {
              "type": "String",
              "name": "joinPointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the current join point is an instance of the given type",
          "children": [
            {
              "type": "Boolean",
              "name": "instanceOf"
            },
            {
              "type": "String",
              "name": "name"
            }
          ]
        },
        {
          "type": "select",
          "clazz": "vardecl",
          "alias": ""
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "insert"
            },
            {
              "type": "[before| after| replace]",
              "name": "position",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "def"
            },
            {
              "type": "String",
              "name": "attribute",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, but not of the nodes in its fields",
          "children": [
            {
              "type": "joinpoint",
              "name": "copy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Copies all enumerable own properties from the source object to the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataAssign"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Clears all properties from the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataClear"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, including the nodes in their fields (only the first level of field nodes, this function is not recursive)",
          "children": [
            {
              "type": "joinpoint",
              "name": "deepCopy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the node associated to this joinpoint from the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "detach"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point after this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point before this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Adds a message that will be printed to the user after weaving finishes. Identical messages are removed",
          "children": [
            {
              "type": "void",
              "name": "messageToUser"
            },
            {
              "type": "String",
              "name": "message",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the children of this node",
          "children": [
            {
              "type": "void",
              "name": "removeChildren"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this node with the given node",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of join points",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of strings",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWithStrings"
            },
            {
              "type": "String[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Setting data directly is not supported, this action just emits a warning and does nothing",
          "children": [
            {
              "type": "void",
              "name": "setData"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the first child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setFirstChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String[]",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the last child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setLastChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the type of a node, if it has a type",
          "children": [
            {
              "type": "void",
              "name": "setType"
            },
            {
              "type": "type",
              "name": "type",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Associates arbitrary values to nodes of the AST",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "String",
              "name": "fieldName",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a map",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "Map",
              "name": "fieldNameAndValue",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the value associated with the given property key",
          "children": [
            {
              "type": "joinpoint",
              "name": "setValue"
            },
            {
              "type": "String",
              "name": "key",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "suffix",
              "defaultValue": ""
            }
          ]
        }
      ]
    },
    {
      "type": "joinpoint",
      "name": "field",
      "defaultAttr": "name",
      "extends": "declarator",
      "tooltip": "Represents a member of a struct/union/class",
      "children": [
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isPublic"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String",
              "name": "name"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String",
              "name": "qualifiedName"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String",
              "name": "qualifiedPrefix"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The attributes (e.g. Pure, CUDAGlobal) associated to this decl",
          "children": [
            {
              "type": "attribute[]",
              "name": "attrs"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "attributes"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "selects"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "actions"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "ancestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with a dump of the AST representation starting from this node. This representation corresponds to the internal Java representation of the ClavaAst, where the node names correspond to Java classes. To get an equivalent representation with join point names, use the attribute 'dump'",
          "children": [
            {
              "type": "String",
              "name": "ast"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor AST name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "astAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, considering null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "astChild"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, considering null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "astChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String that uniquely identifies this node",
          "children": [
            {
              "type": "String",
              "name": "astId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if this node is a Java instance of the given name, which corresponds to a simple Java class name of an AST node. For an equivalent function for join point names, use 'instanceOf(joinPointName)'",
          "children": [
            {
              "type": "boolean",
              "name": "astIsInstance"
            },
            {
              "type": "String",
              "name": "className"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the Java class of this node, which is similar to the equivalent node in Clang AST",
          "children": [
            {
              "type": "String",
              "name": "astName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, considering null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "astNumChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "astParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The bit width of the type returned by this join point, in relation to the definitions of its Translation Unit, or undefined if there is no type or bitwidth defined, or if the join point is not in a TranslationUnit",
          "children": [
            {
              "type": "Integer",
              "name": "bitWidth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String list of the names of the join points that form a path from the root to this node",
          "children": [
            {
              "type": "String[]",
              "name": "chain"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the joinpoint chain",
          "children": [
            {
              "type": "joinpoint",
              "name": "chainAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "child"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "children"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the code represented by this node",
          "children": [
            {
              "type": "String",
              "name": "code"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "column"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the given node is a descendant of this node",
          "children": [
            {
              "type": "Boolean",
              "name": "contains"
            },
            {
              "type": "joinpoint",
              "name": "jp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "currentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "JS object associated with this node, containing parsed data of #pragma clava data when the node can be a target of pragmas. This is a special object, managed internally, and cannot be reassigned, to change its contents requires using key-value pairs. If the node can be the target of a pragma, the information stored in this object is persisted between rebuilds.",
          "children": [
            {
              "type": "Object",
              "name": "data"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the depth of this join point in the AST. If it is the root join point returns 0, if it is a child of the root node returns 1, etc.",
          "children": [
            {
              "type": "Integer",
              "name": "depth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves all descendants of the join point",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type, including the node itself",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendantsAndSelf"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endColumn"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endLine"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the file where the code of this node is located, if available",
          "children": [
            {
              "type": "String",
              "name": "filename"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the complete path to the file where the code of this node comes from",
          "children": [
            {
              "type": "String",
              "name": "filepath"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the first child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks in the descendants for the first node of the given type",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstJp"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use 'userField' instead]",
          "children": [
            {
              "type": "Object",
              "name": "getUserField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The value associated with the given property key",
          "children": [
            {
              "type": "Object",
              "name": "getValue"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use hasParent instead]",
          "children": [
            {
              "type": "boolean",
              "name": "hasAstParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the node has children, false otherwise",
          "children": [
            {
              "type": "Boolean",
              "name": "hasChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the given join point or AST node is the same (== test) as the current join point AST node",
          "children": [
            {
              "type": "Boolean",
              "name": "hasNode"
            },
            {
              "type": "Object",
              "name": "nodeOrJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this node has a parent",
          "children": [
            {
              "type": "boolean",
              "name": "hasParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point has a type",
          "children": [
            {
              "type": "Boolean",
              "name": "hasType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns comments that are not explicitly in the AST, but embedded in other nodes",
          "children": [
            {
              "type": "comment[]",
              "name": "inlineComments"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this is a Cilk node (i.e., cilk_spawn, cilk_sync or cilk_for)",
          "children": [
            {
              "type": "Boolean",
              "name": "isCilk"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is part of a system header file",
          "children": [
            {
              "type": "Boolean",
              "name": "isInSystemHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a header (e.g., if condition, for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a loop header (e.g., for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideLoopHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if any descendant or the node itself was defined as a macro",
          "children": [
            {
              "type": "Boolean",
              "name": "isMacro"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the full Java class name of the type of the Java field with the provided name",
          "children": [
            {
              "type": "String",
              "name": "javaFieldType"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'keys' instead, together with 'getValue'] The names of the Java fields of this node. Can be used as key of the attribute 'javaValue'",
          "children": [
            {
              "type": "String[]",
              "name": "javaFields"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'getValue' instead, with the names returned by the attribute 'keys'] Returns the value associated with the provided Java field name",
          "children": [
            {
              "type": "Object",
              "name": "javaValue"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use joinPointType instead (uppercase P)]",
          "children": [
            {
              "type": "String",
              "name": "joinpointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Id that is based on the position of the node in the code, and should remain stable between compilations (warning: only a few nodes - file, function, loop - currently support it)",
          "children": [
            {
              "type": "String",
              "name": "jpId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Java Class instance with the type of the given key",
          "children": [
            {
              "type": "Object",
              "name": "keyType"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A list of the properties currently supported by this node. Can be used as parameter of the attribute 'getValue'",
          "children": [
            {
              "type": "String[]",
              "name": "keys"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[HACK: .descendants(type) does not work in .lara files, after GraalVM update] Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "laraDescendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the last child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "lastChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that came before this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "leftJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "line"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A string with information about the file and code position of this node, if available",
          "children": [
            {
              "type": "String",
              "name": "location"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, ignoring null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "numChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope that is a parent of the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The pragmas associated with this node",
          "children": [
            {
              "type": "pragma[]",
              "name": "pragmas"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that comes after this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "rightJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the 'program' joinpoint",
          "children": [
            {
              "type": "joinpoint",
              "name": "root"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the nodes of the scope of the current join point. If this node has a body (e.g., loop, function) corresponds to the children of the body. Otherwise, returns an empty array",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "scopeNodes"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that came before this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsLeft"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that come after this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsRight"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Converts this join point to a statement, or returns undefined if it was not possible",
          "children": [
            {
              "type": "statement",
              "name": "stmt"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "type",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrives values that have been associated to nodes of the AST with 'setUserField'",
          "children": [
            {
              "type": "Object",
              "name": "userField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a String with the type of the join point",
          "children": [
            {
              "type": "String",
              "name": "joinPointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the current join point is an instance of the given type",
          "children": [
            {
              "type": "Boolean",
              "name": "instanceOf"
            },
            {
              "type": "String",
              "name": "name"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the name of this namedDecl",
          "children": [
            {
              "type": "void",
              "name": "setName"
            },
            {
              "type": "String",
              "name": "name",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the qualified name of this namedDecl (changes both the name and qualified prefix)",
          "children": [
            {
              "type": "void",
              "name": "setQualifiedName"
            },
            {
              "type": "String",
              "name": "name",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the qualified prefix of this namedDecl",
          "children": [
            {
              "type": "void",
              "name": "setQualifiedPrefix"
            },
            {
              "type": "String",
              "name": "qualifiedPrefix",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "insert"
            },
            {
              "type": "[before| after| replace]",
              "name": "position",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "def"
            },
            {
              "type": "String",
              "name": "attribute",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, but not of the nodes in its fields",
          "children": [
            {
              "type": "joinpoint",
              "name": "copy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Copies all enumerable own properties from the source object to the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataAssign"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Clears all properties from the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataClear"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, including the nodes in their fields (only the first level of field nodes, this function is not recursive)",
          "children": [
            {
              "type": "joinpoint",
              "name": "deepCopy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the node associated to this joinpoint from the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "detach"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point after this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point before this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Adds a message that will be printed to the user after weaving finishes. Identical messages are removed",
          "children": [
            {
              "type": "void",
              "name": "messageToUser"
            },
            {
              "type": "String",
              "name": "message",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the children of this node",
          "children": [
            {
              "type": "void",
              "name": "removeChildren"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this node with the given node",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of join points",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of strings",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWithStrings"
            },
            {
              "type": "String[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Setting data directly is not supported, this action just emits a warning and does nothing",
          "children": [
            {
              "type": "void",
              "name": "setData"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the first child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setFirstChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String[]",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the last child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setLastChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the type of a node, if it has a type",
          "children": [
            {
              "type": "void",
              "name": "setType"
            },
            {
              "type": "type",
              "name": "type",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Associates arbitrary values to nodes of the AST",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "String",
              "name": "fieldName",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a map",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "Map",
              "name": "fieldNameAndValue",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the value associated with the given property key",
          "children": [
            {
              "type": "joinpoint",
              "name": "setValue"
            },
            {
              "type": "String",
              "name": "key",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "suffix",
              "defaultValue": ""
            }
          ]
        }
      ]
    },
    {
      "type": "joinpoint",
      "name": "file",
      "defaultAttr": "name",
      "extends": "joinpoint",
      "tooltip": "Represents a source file (.c, .cpp., .cl, etc)",
      "children": [
        {
          "type": "attribute",
          "tooltip": "the path to the source folder that was given as the base folder of this file",
          "children": [
            {
              "type": "String",
              "name": "baseSourcePath"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the complete path to the file that will be generated by the weaver",
          "children": [
            {
              "type": "String",
              "name": "destinationFilepath"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the complete path to the generated file, given a destination folder",
          "children": [
            {
              "type": "String",
              "name": "destinationFilepath"
            },
            {
              "type": "String",
              "name": "destinationFolderpath"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the output of the parser if there were errors during parsing",
          "children": [
            {
              "type": "String",
              "name": "errorOutput"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a Java file to the file that originated this translation unit",
          "children": [
            {
              "type": "Object",
              "name": "file"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this file contains a 'main' method",
          "children": [
            {
              "type": "Boolean",
              "name": "hasMain"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if there were errors during parsing",
          "children": [
            {
              "type": "Boolean",
              "name": "hasParsingErrors"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the includes of this file",
          "children": [
            {
              "type": "include[]",
              "name": "includes"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this file is considered a C++ file",
          "children": [
            {
              "type": "Boolean",
              "name": "isCxx"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this file is considered a header file",
          "children": [
            {
              "type": "Boolean",
              "name": "isHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this file is an OpenCL filetype",
          "children": [
            {
              "type": "Boolean",
              "name": "isOpenCL"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the name of the file",
          "children": [
            {
              "type": "String",
              "name": "name"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the folder of the source file",
          "children": [
            {
              "type": "String",
              "name": "path"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the path to the file relative to the base source path",
          "children": [
            {
              "type": "String",
              "name": "relativeFilepath"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the path to the folder of the source file relative to the base source path",
          "children": [
            {
              "type": "String",
              "name": "relativeFolderpath"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the name of the source folder of this file, or undefined if it has none",
          "children": [
            {
              "type": "String",
              "name": "sourceFoldername"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "attributes"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "selects"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "actions"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "ancestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with a dump of the AST representation starting from this node. This representation corresponds to the internal Java representation of the ClavaAst, where the node names correspond to Java classes. To get an equivalent representation with join point names, use the attribute 'dump'",
          "children": [
            {
              "type": "String",
              "name": "ast"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor AST name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "astAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, considering null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "astChild"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, considering null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "astChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String that uniquely identifies this node",
          "children": [
            {
              "type": "String",
              "name": "astId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if this node is a Java instance of the given name, which corresponds to a simple Java class name of an AST node. For an equivalent function for join point names, use 'instanceOf(joinPointName)'",
          "children": [
            {
              "type": "boolean",
              "name": "astIsInstance"
            },
            {
              "type": "String",
              "name": "className"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the Java class of this node, which is similar to the equivalent node in Clang AST",
          "children": [
            {
              "type": "String",
              "name": "astName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, considering null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "astNumChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "astParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The bit width of the type returned by this join point, in relation to the definitions of its Translation Unit, or undefined if there is no type or bitwidth defined, or if the join point is not in a TranslationUnit",
          "children": [
            {
              "type": "Integer",
              "name": "bitWidth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String list of the names of the join points that form a path from the root to this node",
          "children": [
            {
              "type": "String[]",
              "name": "chain"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the joinpoint chain",
          "children": [
            {
              "type": "joinpoint",
              "name": "chainAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "child"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "children"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the code represented by this node",
          "children": [
            {
              "type": "String",
              "name": "code"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "column"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the given node is a descendant of this node",
          "children": [
            {
              "type": "Boolean",
              "name": "contains"
            },
            {
              "type": "joinpoint",
              "name": "jp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "currentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "JS object associated with this node, containing parsed data of #pragma clava data when the node can be a target of pragmas. This is a special object, managed internally, and cannot be reassigned, to change its contents requires using key-value pairs. If the node can be the target of a pragma, the information stored in this object is persisted between rebuilds.",
          "children": [
            {
              "type": "Object",
              "name": "data"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the depth of this join point in the AST. If it is the root join point returns 0, if it is a child of the root node returns 1, etc.",
          "children": [
            {
              "type": "Integer",
              "name": "depth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves all descendants of the join point",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type, including the node itself",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendantsAndSelf"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endColumn"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endLine"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the file where the code of this node is located, if available",
          "children": [
            {
              "type": "String",
              "name": "filename"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the complete path to the file where the code of this node comes from",
          "children": [
            {
              "type": "String",
              "name": "filepath"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the first child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks in the descendants for the first node of the given type",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstJp"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use 'userField' instead]",
          "children": [
            {
              "type": "Object",
              "name": "getUserField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The value associated with the given property key",
          "children": [
            {
              "type": "Object",
              "name": "getValue"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use hasParent instead]",
          "children": [
            {
              "type": "boolean",
              "name": "hasAstParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the node has children, false otherwise",
          "children": [
            {
              "type": "Boolean",
              "name": "hasChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the given join point or AST node is the same (== test) as the current join point AST node",
          "children": [
            {
              "type": "Boolean",
              "name": "hasNode"
            },
            {
              "type": "Object",
              "name": "nodeOrJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this node has a parent",
          "children": [
            {
              "type": "boolean",
              "name": "hasParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point has a type",
          "children": [
            {
              "type": "Boolean",
              "name": "hasType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns comments that are not explicitly in the AST, but embedded in other nodes",
          "children": [
            {
              "type": "comment[]",
              "name": "inlineComments"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this is a Cilk node (i.e., cilk_spawn, cilk_sync or cilk_for)",
          "children": [
            {
              "type": "Boolean",
              "name": "isCilk"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is part of a system header file",
          "children": [
            {
              "type": "Boolean",
              "name": "isInSystemHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a header (e.g., if condition, for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a loop header (e.g., for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideLoopHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if any descendant or the node itself was defined as a macro",
          "children": [
            {
              "type": "Boolean",
              "name": "isMacro"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the full Java class name of the type of the Java field with the provided name",
          "children": [
            {
              "type": "String",
              "name": "javaFieldType"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'keys' instead, together with 'getValue'] The names of the Java fields of this node. Can be used as key of the attribute 'javaValue'",
          "children": [
            {
              "type": "String[]",
              "name": "javaFields"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'getValue' instead, with the names returned by the attribute 'keys'] Returns the value associated with the provided Java field name",
          "children": [
            {
              "type": "Object",
              "name": "javaValue"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use joinPointType instead (uppercase P)]",
          "children": [
            {
              "type": "String",
              "name": "joinpointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Id that is based on the position of the node in the code, and should remain stable between compilations (warning: only a few nodes - file, function, loop - currently support it)",
          "children": [
            {
              "type": "String",
              "name": "jpId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Java Class instance with the type of the given key",
          "children": [
            {
              "type": "Object",
              "name": "keyType"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A list of the properties currently supported by this node. Can be used as parameter of the attribute 'getValue'",
          "children": [
            {
              "type": "String[]",
              "name": "keys"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[HACK: .descendants(type) does not work in .lara files, after GraalVM update] Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "laraDescendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the last child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "lastChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that came before this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "leftJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "line"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A string with information about the file and code position of this node, if available",
          "children": [
            {
              "type": "String",
              "name": "location"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, ignoring null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "numChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope that is a parent of the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The pragmas associated with this node",
          "children": [
            {
              "type": "pragma[]",
              "name": "pragmas"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that comes after this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "rightJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the 'program' joinpoint",
          "children": [
            {
              "type": "joinpoint",
              "name": "root"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the nodes of the scope of the current join point. If this node has a body (e.g., loop, function) corresponds to the children of the body. Otherwise, returns an empty array",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "scopeNodes"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that came before this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsLeft"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that come after this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsRight"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Converts this join point to a statement, or returns undefined if it was not possible",
          "children": [
            {
              "type": "statement",
              "name": "stmt"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "type",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrives values that have been associated to nodes of the AST with 'setUserField'",
          "children": [
            {
              "type": "Object",
              "name": "userField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a String with the type of the join point",
          "children": [
            {
              "type": "String",
              "name": "joinPointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the current join point is an instance of the given type",
          "children": [
            {
              "type": "Boolean",
              "name": "instanceOf"
            },
            {
              "type": "String",
              "name": "name"
            }
          ]
        },
        {
          "type": "select",
          "clazz": "statement",
          "alias": "stmt"
        },
        {
          "type": "select",
          "clazz": "statement",
          "alias": "childStmt"
        },
        {
          "type": "select",
          "clazz": "function",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "method",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "record",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "struct",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "class",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "pragma",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "marker",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "tag",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "vardecl",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "comment",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "include",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "typedefDecl",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "decl",
          "alias": ""
        },
        {
          "type": "action",
          "tooltip": "Adds a C include to the current file. If the file already has the include, it does nothing",
          "children": [
            {
              "type": "void",
              "name": "addCInclude"
            },
            {
              "type": "String",
              "name": "name",
              "defaultValue": ""
            },
            {
              "type": "boolean",
              "name": "isAngled",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which sets 'isAngled' to false",
          "children": [
            {
              "type": "void",
              "name": "addCInclude"
            },
            {
              "type": "String",
              "name": "name",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Adds a function to the file that returns void and has no parameters",
          "children": [
            {
              "type": "joinpoint",
              "name": "addFunction"
            },
            {
              "type": "String",
              "name": "name",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Adds a global variable to this file",
          "children": [
            {
              "type": "vardecl",
              "name": "addGlobal"
            },
            {
              "type": "String",
              "name": "name",
              "defaultValue": ""
            },
            {
              "type": "joinpoint",
              "name": "type",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "initValue",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Adds an include to the current file. If the file already has the include, it does nothing",
          "children": [
            {
              "type": "void",
              "name": "addInclude"
            },
            {
              "type": "String",
              "name": "name",
              "defaultValue": ""
            },
            {
              "type": "boolean",
              "name": "isAngled",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which sets 'isAngled' to false",
          "children": [
            {
              "type": "void",
              "name": "addInclude"
            },
            {
              "type": "String",
              "name": "name",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload of addInclude which accepts a join point",
          "children": [
            {
              "type": "void",
              "name": "addIncludeJp"
            },
            {
              "type": "joinpoint",
              "name": "jp",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Adds the node in the join point to the start of the file",
          "children": [
            {
              "type": "void",
              "name": "insertBegin"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Adds the String as a Decl to the end of the file",
          "children": [
            {
              "type": "void",
              "name": "insertBegin"
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Adds the node in the join point to the end of the file",
          "children": [
            {
              "type": "void",
              "name": "insertEnd"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Adds the String as a Decl to the end of the file",
          "children": [
            {
              "type": "void",
              "name": "insertEnd"
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Recompiles only this file, returns a join point to the new recompiled file, or throws an exception if a problem happens",
          "children": [
            {
              "type": "file",
              "name": "rebuild"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Recompiles only this file, returns a join point to the new recompiled file, or returns a clavaException join point if a problem happens",
          "children": [
            {
              "type": "joinpoint",
              "name": "rebuildTry"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Changes the name of the file",
          "children": [
            {
              "type": "void",
              "name": "setName"
            },
            {
              "type": "String",
              "name": "filename",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the path to the folder of the source file relative to the base source path",
          "children": [
            {
              "type": "void",
              "name": "setRelativeFolderpath"
            },
            {
              "type": "String",
              "name": "path",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Writes the code of this file to a given folder",
          "children": [
            {
              "type": "String",
              "name": "write"
            },
            {
              "type": "String",
              "name": "destinationFoldername",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "insert"
            },
            {
              "type": "[before| after| replace]",
              "name": "position",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "def"
            },
            {
              "type": "String",
              "name": "attribute",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, but not of the nodes in its fields",
          "children": [
            {
              "type": "joinpoint",
              "name": "copy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Copies all enumerable own properties from the source object to the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataAssign"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Clears all properties from the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataClear"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, including the nodes in their fields (only the first level of field nodes, this function is not recursive)",
          "children": [
            {
              "type": "joinpoint",
              "name": "deepCopy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the node associated to this joinpoint from the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "detach"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point after this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point before this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Adds a message that will be printed to the user after weaving finishes. Identical messages are removed",
          "children": [
            {
              "type": "void",
              "name": "messageToUser"
            },
            {
              "type": "String",
              "name": "message",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the children of this node",
          "children": [
            {
              "type": "void",
              "name": "removeChildren"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this node with the given node",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of join points",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of strings",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWithStrings"
            },
            {
              "type": "String[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Setting data directly is not supported, this action just emits a warning and does nothing",
          "children": [
            {
              "type": "void",
              "name": "setData"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the first child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setFirstChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String[]",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the last child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setLastChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the type of a node, if it has a type",
          "children": [
            {
              "type": "void",
              "name": "setType"
            },
            {
              "type": "type",
              "name": "type",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Associates arbitrary values to nodes of the AST",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "String",
              "name": "fieldName",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a map",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "Map",
              "name": "fieldNameAndValue",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the value associated with the given property key",
          "children": [
            {
              "type": "joinpoint",
              "name": "setValue"
            },
            {
              "type": "String",
              "name": "key",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "suffix",
              "defaultValue": ""
            }
          ]
        }
      ]
    },
    {
      "type": "joinpoint",
      "name": "floatLiteral",
      "extends": "literal",
      "children": [
        {
          "type": "attribute",
          "children": [
            {
              "type": "Double",
              "name": "value"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a 'decl' join point that represents the declaration associated with this expression, or undefined if there is none",
          "children": [
            {
              "type": "decl",
              "name": "decl"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "returns a cast joinpoint if this expression has an associated implicit cast, undefined otherwise",
          "children": [
            {
              "type": "cast",
              "name": "implicitCast"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the expression is part of an argument of a function call",
          "children": [
            {
              "type": "Boolean",
              "name": "isFunctionArgument"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "[read| write| readwrite]",
              "name": "use"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "vardecl",
              "name": "vardecl"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "attributes"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "selects"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "actions"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "ancestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with a dump of the AST representation starting from this node. This representation corresponds to the internal Java representation of the ClavaAst, where the node names correspond to Java classes. To get an equivalent representation with join point names, use the attribute 'dump'",
          "children": [
            {
              "type": "String",
              "name": "ast"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor AST name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "astAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, considering null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "astChild"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, considering null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "astChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String that uniquely identifies this node",
          "children": [
            {
              "type": "String",
              "name": "astId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if this node is a Java instance of the given name, which corresponds to a simple Java class name of an AST node. For an equivalent function for join point names, use 'instanceOf(joinPointName)'",
          "children": [
            {
              "type": "boolean",
              "name": "astIsInstance"
            },
            {
              "type": "String",
              "name": "className"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the Java class of this node, which is similar to the equivalent node in Clang AST",
          "children": [
            {
              "type": "String",
              "name": "astName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, considering null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "astNumChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "astParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The bit width of the type returned by this join point, in relation to the definitions of its Translation Unit, or undefined if there is no type or bitwidth defined, or if the join point is not in a TranslationUnit",
          "children": [
            {
              "type": "Integer",
              "name": "bitWidth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String list of the names of the join points that form a path from the root to this node",
          "children": [
            {
              "type": "String[]",
              "name": "chain"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the joinpoint chain",
          "children": [
            {
              "type": "joinpoint",
              "name": "chainAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "child"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "children"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the code represented by this node",
          "children": [
            {
              "type": "String",
              "name": "code"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "column"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the given node is a descendant of this node",
          "children": [
            {
              "type": "Boolean",
              "name": "contains"
            },
            {
              "type": "joinpoint",
              "name": "jp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "currentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "JS object associated with this node, containing parsed data of #pragma clava data when the node can be a target of pragmas. This is a special object, managed internally, and cannot be reassigned, to change its contents requires using key-value pairs. If the node can be the target of a pragma, the information stored in this object is persisted between rebuilds.",
          "children": [
            {
              "type": "Object",
              "name": "data"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the depth of this join point in the AST. If it is the root join point returns 0, if it is a child of the root node returns 1, etc.",
          "children": [
            {
              "type": "Integer",
              "name": "depth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves all descendants of the join point",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type, including the node itself",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendantsAndSelf"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endColumn"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endLine"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the file where the code of this node is located, if available",
          "children": [
            {
              "type": "String",
              "name": "filename"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the complete path to the file where the code of this node comes from",
          "children": [
            {
              "type": "String",
              "name": "filepath"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the first child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks in the descendants for the first node of the given type",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstJp"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use 'userField' instead]",
          "children": [
            {
              "type": "Object",
              "name": "getUserField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The value associated with the given property key",
          "children": [
            {
              "type": "Object",
              "name": "getValue"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use hasParent instead]",
          "children": [
            {
              "type": "boolean",
              "name": "hasAstParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the node has children, false otherwise",
          "children": [
            {
              "type": "Boolean",
              "name": "hasChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the given join point or AST node is the same (== test) as the current join point AST node",
          "children": [
            {
              "type": "Boolean",
              "name": "hasNode"
            },
            {
              "type": "Object",
              "name": "nodeOrJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this node has a parent",
          "children": [
            {
              "type": "boolean",
              "name": "hasParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point has a type",
          "children": [
            {
              "type": "Boolean",
              "name": "hasType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns comments that are not explicitly in the AST, but embedded in other nodes",
          "children": [
            {
              "type": "comment[]",
              "name": "inlineComments"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this is a Cilk node (i.e., cilk_spawn, cilk_sync or cilk_for)",
          "children": [
            {
              "type": "Boolean",
              "name": "isCilk"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is part of a system header file",
          "children": [
            {
              "type": "Boolean",
              "name": "isInSystemHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a header (e.g., if condition, for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a loop header (e.g., for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideLoopHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if any descendant or the node itself was defined as a macro",
          "children": [
            {
              "type": "Boolean",
              "name": "isMacro"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the full Java class name of the type of the Java field with the provided name",
          "children": [
            {
              "type": "String",
              "name": "javaFieldType"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'keys' instead, together with 'getValue'] The names of the Java fields of this node. Can be used as key of the attribute 'javaValue'",
          "children": [
            {
              "type": "String[]",
              "name": "javaFields"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'getValue' instead, with the names returned by the attribute 'keys'] Returns the value associated with the provided Java field name",
          "children": [
            {
              "type": "Object",
              "name": "javaValue"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use joinPointType instead (uppercase P)]",
          "children": [
            {
              "type": "String",
              "name": "joinpointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Id that is based on the position of the node in the code, and should remain stable between compilations (warning: only a few nodes - file, function, loop - currently support it)",
          "children": [
            {
              "type": "String",
              "name": "jpId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Java Class instance with the type of the given key",
          "children": [
            {
              "type": "Object",
              "name": "keyType"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A list of the properties currently supported by this node. Can be used as parameter of the attribute 'getValue'",
          "children": [
            {
              "type": "String[]",
              "name": "keys"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[HACK: .descendants(type) does not work in .lara files, after GraalVM update] Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "laraDescendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the last child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "lastChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that came before this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "leftJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "line"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A string with information about the file and code position of this node, if available",
          "children": [
            {
              "type": "String",
              "name": "location"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, ignoring null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "numChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope that is a parent of the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The pragmas associated with this node",
          "children": [
            {
              "type": "pragma[]",
              "name": "pragmas"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that comes after this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "rightJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the 'program' joinpoint",
          "children": [
            {
              "type": "joinpoint",
              "name": "root"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the nodes of the scope of the current join point. If this node has a body (e.g., loop, function) corresponds to the children of the body. Otherwise, returns an empty array",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "scopeNodes"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that came before this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsLeft"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that come after this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsRight"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Converts this join point to a statement, or returns undefined if it was not possible",
          "children": [
            {
              "type": "statement",
              "name": "stmt"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "type",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrives values that have been associated to nodes of the AST with 'setUserField'",
          "children": [
            {
              "type": "Object",
              "name": "userField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a String with the type of the join point",
          "children": [
            {
              "type": "String",
              "name": "joinPointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the current join point is an instance of the given type",
          "children": [
            {
              "type": "Boolean",
              "name": "instanceOf"
            },
            {
              "type": "String",
              "name": "name"
            }
          ]
        },
        {
          "type": "select",
          "clazz": "vardecl",
          "alias": ""
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "insert"
            },
            {
              "type": "[before| after| replace]",
              "name": "position",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "def"
            },
            {
              "type": "String",
              "name": "attribute",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, but not of the nodes in its fields",
          "children": [
            {
              "type": "joinpoint",
              "name": "copy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Copies all enumerable own properties from the source object to the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataAssign"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Clears all properties from the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataClear"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, including the nodes in their fields (only the first level of field nodes, this function is not recursive)",
          "children": [
            {
              "type": "joinpoint",
              "name": "deepCopy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the node associated to this joinpoint from the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "detach"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point after this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point before this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Adds a message that will be printed to the user after weaving finishes. Identical messages are removed",
          "children": [
            {
              "type": "void",
              "name": "messageToUser"
            },
            {
              "type": "String",
              "name": "message",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the children of this node",
          "children": [
            {
              "type": "void",
              "name": "removeChildren"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this node with the given node",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of join points",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of strings",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWithStrings"
            },
            {
              "type": "String[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Setting data directly is not supported, this action just emits a warning and does nothing",
          "children": [
            {
              "type": "void",
              "name": "setData"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the first child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setFirstChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String[]",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the last child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setLastChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the type of a node, if it has a type",
          "children": [
            {
              "type": "void",
              "name": "setType"
            },
            {
              "type": "type",
              "name": "type",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Associates arbitrary values to nodes of the AST",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "String",
              "name": "fieldName",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a map",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "Map",
              "name": "fieldNameAndValue",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the value associated with the given property key",
          "children": [
            {
              "type": "joinpoint",
              "name": "setValue"
            },
            {
              "type": "String",
              "name": "key",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "suffix",
              "defaultValue": ""
            }
          ]
        }
      ]
    },
    {
      "type": "joinpoint",
      "name": "function",
      "defaultAttr": "name",
      "extends": "declarator",
      "tooltip": "Represents a function declaration or definition",
      "children": [
        {
          "type": "attribute",
          "children": [
            {
              "type": "scope",
              "name": "body"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "call[]",
              "name": "calls"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Function join points can either represent declarations or definitions, returns the definition of this function, if present, or the first declaration, if only declarations are present",
          "children": [
            {
              "type": "function",
              "name": "canonical"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String",
              "name": "declaration"
            },
            {
              "type": "Boolean",
              "name": "withReturnType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the first prototype of this function that could be found, or undefined if there is none",
          "children": [
            {
              "type": "function",
              "name": "declarationJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the prototypes of this function that are present in the code. If there are none, returns an empty array",
          "children": [
            {
              "type": "function[]",
              "name": "declarationJps"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the implementation of this function if there is one, or undefined otherwise",
          "children": [
            {
              "type": "function",
              "name": "definitionJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the type of the call, which includes the return type and the types of the parameters",
          "children": [
            {
              "type": "functionType",
              "name": "functionType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: Use .isImplementation instead] True if this particular function join point has a body, false otherwise",
          "children": [
            {
              "type": "Boolean",
              "name": "hasDefinition"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String",
              "name": "id"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if this is the function returned by the 'canonical' attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isCanonical"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isCudaKernel"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isDelete"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this particular function join point is an implementation (i.e. has a body), false otherwise",
          "children": [
            {
              "type": "Boolean",
              "name": "isImplementation"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isInline"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isModulePrivate"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this particular function join point is a prototype (i.e. does not have a body), false otherwise",
          "children": [
            {
              "type": "Boolean",
              "name": "isPrototype"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isPure"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isVirtual"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "paramNames"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "param[]",
              "name": "params"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "type",
              "name": "returnType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a string with the signature of this function (e.g., name of the function, plus the parameters types)",
          "children": [
            {
              "type": "String",
              "name": "signature"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "StorageClass",
              "name": "storageClass"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isPublic"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String",
              "name": "name"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String",
              "name": "qualifiedName"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String",
              "name": "qualifiedPrefix"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The attributes (e.g. Pure, CUDAGlobal) associated to this decl",
          "children": [
            {
              "type": "attribute[]",
              "name": "attrs"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "attributes"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "selects"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "actions"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "ancestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with a dump of the AST representation starting from this node. This representation corresponds to the internal Java representation of the ClavaAst, where the node names correspond to Java classes. To get an equivalent representation with join point names, use the attribute 'dump'",
          "children": [
            {
              "type": "String",
              "name": "ast"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor AST name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "astAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, considering null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "astChild"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, considering null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "astChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String that uniquely identifies this node",
          "children": [
            {
              "type": "String",
              "name": "astId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if this node is a Java instance of the given name, which corresponds to a simple Java class name of an AST node. For an equivalent function for join point names, use 'instanceOf(joinPointName)'",
          "children": [
            {
              "type": "boolean",
              "name": "astIsInstance"
            },
            {
              "type": "String",
              "name": "className"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the Java class of this node, which is similar to the equivalent node in Clang AST",
          "children": [
            {
              "type": "String",
              "name": "astName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, considering null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "astNumChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "astParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The bit width of the type returned by this join point, in relation to the definitions of its Translation Unit, or undefined if there is no type or bitwidth defined, or if the join point is not in a TranslationUnit",
          "children": [
            {
              "type": "Integer",
              "name": "bitWidth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String list of the names of the join points that form a path from the root to this node",
          "children": [
            {
              "type": "String[]",
              "name": "chain"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the joinpoint chain",
          "children": [
            {
              "type": "joinpoint",
              "name": "chainAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "child"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "children"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the code represented by this node",
          "children": [
            {
              "type": "String",
              "name": "code"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "column"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the given node is a descendant of this node",
          "children": [
            {
              "type": "Boolean",
              "name": "contains"
            },
            {
              "type": "joinpoint",
              "name": "jp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "currentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "JS object associated with this node, containing parsed data of #pragma clava data when the node can be a target of pragmas. This is a special object, managed internally, and cannot be reassigned, to change its contents requires using key-value pairs. If the node can be the target of a pragma, the information stored in this object is persisted between rebuilds.",
          "children": [
            {
              "type": "Object",
              "name": "data"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the depth of this join point in the AST. If it is the root join point returns 0, if it is a child of the root node returns 1, etc.",
          "children": [
            {
              "type": "Integer",
              "name": "depth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves all descendants of the join point",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type, including the node itself",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendantsAndSelf"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endColumn"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endLine"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the file where the code of this node is located, if available",
          "children": [
            {
              "type": "String",
              "name": "filename"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the complete path to the file where the code of this node comes from",
          "children": [
            {
              "type": "String",
              "name": "filepath"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the first child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks in the descendants for the first node of the given type",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstJp"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use 'userField' instead]",
          "children": [
            {
              "type": "Object",
              "name": "getUserField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The value associated with the given property key",
          "children": [
            {
              "type": "Object",
              "name": "getValue"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use hasParent instead]",
          "children": [
            {
              "type": "boolean",
              "name": "hasAstParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the node has children, false otherwise",
          "children": [
            {
              "type": "Boolean",
              "name": "hasChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the given join point or AST node is the same (== test) as the current join point AST node",
          "children": [
            {
              "type": "Boolean",
              "name": "hasNode"
            },
            {
              "type": "Object",
              "name": "nodeOrJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this node has a parent",
          "children": [
            {
              "type": "boolean",
              "name": "hasParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point has a type",
          "children": [
            {
              "type": "Boolean",
              "name": "hasType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns comments that are not explicitly in the AST, but embedded in other nodes",
          "children": [
            {
              "type": "comment[]",
              "name": "inlineComments"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this is a Cilk node (i.e., cilk_spawn, cilk_sync or cilk_for)",
          "children": [
            {
              "type": "Boolean",
              "name": "isCilk"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is part of a system header file",
          "children": [
            {
              "type": "Boolean",
              "name": "isInSystemHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a header (e.g., if condition, for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a loop header (e.g., for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideLoopHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if any descendant or the node itself was defined as a macro",
          "children": [
            {
              "type": "Boolean",
              "name": "isMacro"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the full Java class name of the type of the Java field with the provided name",
          "children": [
            {
              "type": "String",
              "name": "javaFieldType"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'keys' instead, together with 'getValue'] The names of the Java fields of this node. Can be used as key of the attribute 'javaValue'",
          "children": [
            {
              "type": "String[]",
              "name": "javaFields"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'getValue' instead, with the names returned by the attribute 'keys'] Returns the value associated with the provided Java field name",
          "children": [
            {
              "type": "Object",
              "name": "javaValue"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use joinPointType instead (uppercase P)]",
          "children": [
            {
              "type": "String",
              "name": "joinpointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Id that is based on the position of the node in the code, and should remain stable between compilations (warning: only a few nodes - file, function, loop - currently support it)",
          "children": [
            {
              "type": "String",
              "name": "jpId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Java Class instance with the type of the given key",
          "children": [
            {
              "type": "Object",
              "name": "keyType"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A list of the properties currently supported by this node. Can be used as parameter of the attribute 'getValue'",
          "children": [
            {
              "type": "String[]",
              "name": "keys"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[HACK: .descendants(type) does not work in .lara files, after GraalVM update] Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "laraDescendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the last child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "lastChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that came before this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "leftJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "line"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A string with information about the file and code position of this node, if available",
          "children": [
            {
              "type": "String",
              "name": "location"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, ignoring null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "numChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope that is a parent of the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The pragmas associated with this node",
          "children": [
            {
              "type": "pragma[]",
              "name": "pragmas"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that comes after this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "rightJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the 'program' joinpoint",
          "children": [
            {
              "type": "joinpoint",
              "name": "root"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the nodes of the scope of the current join point. If this node has a body (e.g., loop, function) corresponds to the children of the body. Otherwise, returns an empty array",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "scopeNodes"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that came before this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsLeft"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that come after this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsRight"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Converts this join point to a statement, or returns undefined if it was not possible",
          "children": [
            {
              "type": "statement",
              "name": "stmt"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "type",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrives values that have been associated to nodes of the AST with 'setUserField'",
          "children": [
            {
              "type": "Object",
              "name": "userField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a String with the type of the join point",
          "children": [
            {
              "type": "String",
              "name": "joinPointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the current join point is an instance of the given type",
          "children": [
            {
              "type": "Boolean",
              "name": "instanceOf"
            },
            {
              "type": "String",
              "name": "name"
            }
          ]
        },
        {
          "type": "select",
          "clazz": "body",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "param",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "decl",
          "alias": ""
        },
        {
          "type": "action",
          "tooltip": "Adds a new parameter to the function",
          "children": [
            {
              "type": "void",
              "name": "addParam"
            },
            {
              "type": "String",
              "name": "param",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Adds a new parameter to the function",
          "children": [
            {
              "type": "void",
              "name": "addParam"
            },
            {
              "type": "param",
              "name": "param",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Adds a new parameter to the function",
          "children": [
            {
              "type": "void",
              "name": "addParam"
            },
            {
              "type": "String",
              "name": "name",
              "defaultValue": ""
            },
            {
              "type": "type",
              "name": "type",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Clones this function assigning it a new name, inserts the cloned function after the original function. If the name is the same and the original method, automatically removes the cloned method from the class",
          "children": [
            {
              "type": "function",
              "name": "clone"
            },
            {
              "type": "String",
              "name": "newName",
              "defaultValue": ""
            },
            {
              "type": "Boolean",
              "name": "insert",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which inserts the cloned function by default",
          "children": [
            {
              "type": "function",
              "name": "clone"
            },
            {
              "type": "String",
              "name": "newName",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Generates a clone of the provided function on a new file (with a weaver-generated name).",
          "children": [
            {
              "type": "function",
              "name": "cloneOnFile"
            },
            {
              "type": "String",
              "name": "newName",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Generates a clone of the provided function on a new file (with the provided name).",
          "children": [
            {
              "type": "function",
              "name": "cloneOnFile"
            },
            {
              "type": "String",
              "name": "newName",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "fileName",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Generates a clone of the provided function on a new file (with the provided join point).",
          "children": [
            {
              "type": "function",
              "name": "cloneOnFile"
            },
            {
              "type": "String",
              "name": "newName",
              "defaultValue": ""
            },
            {
              "type": "file",
              "name": "fileName",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the joinpoint before the return points of the function (return statements and implicitly, at the end of the function). Returns the last inserted node",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertReturn"
            },
            {
              "type": "joinpoint",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts code as a literal statement before the return points of the function (return statements and implicitly, at the end of the function). Returns the last inserted node",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertReturn"
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Creates a new call to this function",
          "children": [
            {
              "type": "call",
              "name": "newCall"
            },
            {
              "type": "joinpoint[]",
              "name": "args",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the body of the function",
          "children": [
            {
              "type": "void",
              "name": "setBody"
            },
            {
              "type": "scope",
              "name": "body",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the type of the function",
          "children": [
            {
              "type": "void",
              "name": "setFunctionType"
            },
            {
              "type": "functionType",
              "name": "functionType",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the parameter of the function at the given position",
          "children": [
            {
              "type": "void",
              "name": "setParam"
            },
            {
              "type": "Integer",
              "name": "index",
              "defaultValue": ""
            },
            {
              "type": "param",
              "name": "param",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the parameter of the function at the given position (overload that accepts a String)",
          "children": [
            {
              "type": "void",
              "name": "setParam"
            },
            {
              "type": "Integer",
              "name": "index",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "param",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the parameter of the function at the given position (overload that accepts a String and a Type)",
          "children": [
            {
              "type": "void",
              "name": "setParam"
            },
            {
              "type": "Integer",
              "name": "index",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "name",
              "defaultValue": ""
            },
            {
              "type": "type",
              "name": "type",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the type of a parameter of the function",
          "children": [
            {
              "type": "void",
              "name": "setParamType"
            },
            {
              "type": "Integer",
              "name": "index",
              "defaultValue": ""
            },
            {
              "type": "type",
              "name": "newType",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the parameters of the function",
          "children": [
            {
              "type": "void",
              "name": "setParams"
            },
            {
              "type": "param[]",
              "name": "params",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload that accepts strings that represent type-varname pairs (e.g., int param1)",
          "children": [
            {
              "type": "void",
              "name": "setParamsFromStrings"
            },
            {
              "type": "String[]",
              "name": "params",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the return type of the function",
          "children": [
            {
              "type": "void",
              "name": "setReturnType"
            },
            {
              "type": "type",
              "name": "returnType",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the name of this namedDecl",
          "children": [
            {
              "type": "void",
              "name": "setName"
            },
            {
              "type": "String",
              "name": "name",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the qualified name of this namedDecl (changes both the name and qualified prefix)",
          "children": [
            {
              "type": "void",
              "name": "setQualifiedName"
            },
            {
              "type": "String",
              "name": "name",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the qualified prefix of this namedDecl",
          "children": [
            {
              "type": "void",
              "name": "setQualifiedPrefix"
            },
            {
              "type": "String",
              "name": "qualifiedPrefix",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "insert"
            },
            {
              "type": "[before| after| replace]",
              "name": "position",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "def"
            },
            {
              "type": "String",
              "name": "attribute",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, but not of the nodes in its fields",
          "children": [
            {
              "type": "joinpoint",
              "name": "copy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Copies all enumerable own properties from the source object to the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataAssign"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Clears all properties from the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataClear"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, including the nodes in their fields (only the first level of field nodes, this function is not recursive)",
          "children": [
            {
              "type": "joinpoint",
              "name": "deepCopy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the node associated to this joinpoint from the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "detach"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point after this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point before this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Adds a message that will be printed to the user after weaving finishes. Identical messages are removed",
          "children": [
            {
              "type": "void",
              "name": "messageToUser"
            },
            {
              "type": "String",
              "name": "message",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the children of this node",
          "children": [
            {
              "type": "void",
              "name": "removeChildren"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this node with the given node",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of join points",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of strings",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWithStrings"
            },
            {
              "type": "String[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Setting data directly is not supported, this action just emits a warning and does nothing",
          "children": [
            {
              "type": "void",
              "name": "setData"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the first child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setFirstChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String[]",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the last child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setLastChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the type of a node, if it has a type",
          "children": [
            {
              "type": "void",
              "name": "setType"
            },
            {
              "type": "type",
              "name": "type",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Associates arbitrary values to nodes of the AST",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "String",
              "name": "fieldName",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a map",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "Map",
              "name": "fieldNameAndValue",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the value associated with the given property key",
          "children": [
            {
              "type": "joinpoint",
              "name": "setValue"
            },
            {
              "type": "String",
              "name": "key",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "suffix",
              "defaultValue": ""
            }
          ]
        }
      ]
    },
    {
      "type": "joinpoint",
      "name": "functionType",
      "extends": "type",
      "children": [
        {
          "type": "attribute",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "paramTypes"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "type",
              "name": "returnType"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Integer[]",
              "name": "arrayDims"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Integer",
              "name": "arraySize"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The bit width of this type in the Translation Unit of the given join point, or undefined if there is no bitwidth defined",
          "children": [
            {
              "type": "Integer",
              "name": "bitWidth"
            },
            {
              "type": "joinpoint",
              "name": "reference"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "constant"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Single-step desugar. Returns the type itself if it does not have sugar",
          "children": [
            {
              "type": "type",
              "name": "desugar"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Completely desugars the type",
          "children": [
            {
              "type": "type",
              "name": "desugarAll"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A tree representation of the fields of this type",
          "children": [
            {
              "type": "String",
              "name": "fieldTree"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "hasSugar"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "hasTemplateArgs"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isArray"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "True if this is a type declared with the 'auto' keyword",
          "children": [
            {
              "type": "Boolean",
              "name": "isAuto"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isBuiltin"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isPointer"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isTopLevel"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String",
              "name": "kind"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Ignores certain types (e.g., DecayedType)",
          "children": [
            {
              "type": "type",
              "name": "normalize"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "templateArgsStrings"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "type[]",
              "name": "templateArgsTypes"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Maps names of join point fields that represent type join points, to their respective values",
          "children": [
            {
              "type": "Map",
              "name": "typeFields"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "If the type encapsulates another type, returns the encapsulated type",
          "children": [
            {
              "type": "type",
              "name": "unwrap"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "attributes"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "selects"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "actions"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "ancestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with a dump of the AST representation starting from this node. This representation corresponds to the internal Java representation of the ClavaAst, where the node names correspond to Java classes. To get an equivalent representation with join point names, use the attribute 'dump'",
          "children": [
            {
              "type": "String",
              "name": "ast"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor AST name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "astAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, considering null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "astChild"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, considering null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "astChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String that uniquely identifies this node",
          "children": [
            {
              "type": "String",
              "name": "astId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if this node is a Java instance of the given name, which corresponds to a simple Java class name of an AST node. For an equivalent function for join point names, use 'instanceOf(joinPointName)'",
          "children": [
            {
              "type": "boolean",
              "name": "astIsInstance"
            },
            {
              "type": "String",
              "name": "className"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the Java class of this node, which is similar to the equivalent node in Clang AST",
          "children": [
            {
              "type": "String",
              "name": "astName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, considering null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "astNumChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "astParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The bit width of the type returned by this join point, in relation to the definitions of its Translation Unit, or undefined if there is no type or bitwidth defined, or if the join point is not in a TranslationUnit",
          "children": [
            {
              "type": "Integer",
              "name": "bitWidth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String list of the names of the join points that form a path from the root to this node",
          "children": [
            {
              "type": "String[]",
              "name": "chain"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the joinpoint chain",
          "children": [
            {
              "type": "joinpoint",
              "name": "chainAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "child"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "children"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the code represented by this node",
          "children": [
            {
              "type": "String",
              "name": "code"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "column"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the given node is a descendant of this node",
          "children": [
            {
              "type": "Boolean",
              "name": "contains"
            },
            {
              "type": "joinpoint",
              "name": "jp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "currentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "JS object associated with this node, containing parsed data of #pragma clava data when the node can be a target of pragmas. This is a special object, managed internally, and cannot be reassigned, to change its contents requires using key-value pairs. If the node can be the target of a pragma, the information stored in this object is persisted between rebuilds.",
          "children": [
            {
              "type": "Object",
              "name": "data"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the depth of this join point in the AST. If it is the root join point returns 0, if it is a child of the root node returns 1, etc.",
          "children": [
            {
              "type": "Integer",
              "name": "depth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves all descendants of the join point",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type, including the node itself",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendantsAndSelf"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endColumn"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endLine"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the file where the code of this node is located, if available",
          "children": [
            {
              "type": "String",
              "name": "filename"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the complete path to the file where the code of this node comes from",
          "children": [
            {
              "type": "String",
              "name": "filepath"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the first child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks in the descendants for the first node of the given type",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstJp"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use 'userField' instead]",
          "children": [
            {
              "type": "Object",
              "name": "getUserField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The value associated with the given property key",
          "children": [
            {
              "type": "Object",
              "name": "getValue"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use hasParent instead]",
          "children": [
            {
              "type": "boolean",
              "name": "hasAstParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the node has children, false otherwise",
          "children": [
            {
              "type": "Boolean",
              "name": "hasChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the given join point or AST node is the same (== test) as the current join point AST node",
          "children": [
            {
              "type": "Boolean",
              "name": "hasNode"
            },
            {
              "type": "Object",
              "name": "nodeOrJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this node has a parent",
          "children": [
            {
              "type": "boolean",
              "name": "hasParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point has a type",
          "children": [
            {
              "type": "Boolean",
              "name": "hasType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns comments that are not explicitly in the AST, but embedded in other nodes",
          "children": [
            {
              "type": "comment[]",
              "name": "inlineComments"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this is a Cilk node (i.e., cilk_spawn, cilk_sync or cilk_for)",
          "children": [
            {
              "type": "Boolean",
              "name": "isCilk"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is part of a system header file",
          "children": [
            {
              "type": "Boolean",
              "name": "isInSystemHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a header (e.g., if condition, for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a loop header (e.g., for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideLoopHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if any descendant or the node itself was defined as a macro",
          "children": [
            {
              "type": "Boolean",
              "name": "isMacro"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the full Java class name of the type of the Java field with the provided name",
          "children": [
            {
              "type": "String",
              "name": "javaFieldType"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'keys' instead, together with 'getValue'] The names of the Java fields of this node. Can be used as key of the attribute 'javaValue'",
          "children": [
            {
              "type": "String[]",
              "name": "javaFields"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'getValue' instead, with the names returned by the attribute 'keys'] Returns the value associated with the provided Java field name",
          "children": [
            {
              "type": "Object",
              "name": "javaValue"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use joinPointType instead (uppercase P)]",
          "children": [
            {
              "type": "String",
              "name": "joinpointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Id that is based on the position of the node in the code, and should remain stable between compilations (warning: only a few nodes - file, function, loop - currently support it)",
          "children": [
            {
              "type": "String",
              "name": "jpId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Java Class instance with the type of the given key",
          "children": [
            {
              "type": "Object",
              "name": "keyType"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A list of the properties currently supported by this node. Can be used as parameter of the attribute 'getValue'",
          "children": [
            {
              "type": "String[]",
              "name": "keys"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[HACK: .descendants(type) does not work in .lara files, after GraalVM update] Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "laraDescendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the last child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "lastChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that came before this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "leftJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "line"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A string with information about the file and code position of this node, if available",
          "children": [
            {
              "type": "String",
              "name": "location"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, ignoring null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "numChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope that is a parent of the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The pragmas associated with this node",
          "children": [
            {
              "type": "pragma[]",
              "name": "pragmas"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that comes after this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "rightJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the 'program' joinpoint",
          "children": [
            {
              "type": "joinpoint",
              "name": "root"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the nodes of the scope of the current join point. If this node has a body (e.g., loop, function) corresponds to the children of the body. Otherwise, returns an empty array",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "scopeNodes"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that came before this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsLeft"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that come after this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsRight"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Converts this join point to a statement, or returns undefined if it was not possible",
          "children": [
            {
              "type": "statement",
              "name": "stmt"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "type",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrives values that have been associated to nodes of the AST with 'setUserField'",
          "children": [
            {
              "type": "Object",
              "name": "userField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a String with the type of the join point",
          "children": [
            {
              "type": "String",
              "name": "joinPointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the current join point is an instance of the given type",
          "children": [
            {
              "type": "Boolean",
              "name": "instanceOf"
            },
            {
              "type": "String",
              "name": "name"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the type of a parameter of the FunctionType. Be careful that if you directly change the type of a paramemter and the function type is associated with a function declaration, this change will not be reflected in the function. If you want to change the type of a parameter of a function declaration, use $function.setParaType",
          "children": [
            {
              "type": "void",
              "name": "setParamType"
            },
            {
              "type": "Integer",
              "name": "index",
              "defaultValue": ""
            },
            {
              "type": "type",
              "name": "newType",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the return type of the FunctionType",
          "children": [
            {
              "type": "void",
              "name": "setReturnType"
            },
            {
              "type": "type",
              "name": "newType",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Returns a copy of this type with the qualifier const",
          "children": [
            {
              "type": "type",
              "name": "asConst"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the desugared type of this type",
          "children": [
            {
              "type": "void",
              "name": "setDesugar"
            },
            {
              "type": "type",
              "name": "desugaredType",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the template argument types of a template type",
          "children": [
            {
              "type": "void",
              "name": "setTemplateArgsTypes"
            },
            {
              "type": "type[]",
              "name": "templateArgTypes",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets a single template argument type of a template type",
          "children": [
            {
              "type": "void",
              "name": "setTemplateArgsTypes"
            },
            {
              "type": "Integer",
              "name": "index",
              "defaultValue": ""
            },
            {
              "type": "type",
              "name": "templateArgType",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Changes a single occurence of a type field that has the current value with new value. Returns true if there was a change",
          "children": [
            {
              "type": "boolean",
              "name": "setTypeFieldByValueRecursive"
            },
            {
              "type": "Object",
              "name": "currentValue",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "newValue",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces an underlying type of this instance with new type, if it matches the old type. Returns true if there were changes",
          "children": [
            {
              "type": "type",
              "name": "setUnderlyingType"
            },
            {
              "type": "type",
              "name": "oldValue",
              "defaultValue": ""
            },
            {
              "type": "type",
              "name": "newValue",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "insert"
            },
            {
              "type": "[before| after| replace]",
              "name": "position",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "def"
            },
            {
              "type": "String",
              "name": "attribute",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, but not of the nodes in its fields",
          "children": [
            {
              "type": "joinpoint",
              "name": "copy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Copies all enumerable own properties from the source object to the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataAssign"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Clears all properties from the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataClear"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, including the nodes in their fields (only the first level of field nodes, this function is not recursive)",
          "children": [
            {
              "type": "joinpoint",
              "name": "deepCopy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the node associated to this joinpoint from the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "detach"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point after this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point before this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Adds a message that will be printed to the user after weaving finishes. Identical messages are removed",
          "children": [
            {
              "type": "void",
              "name": "messageToUser"
            },
            {
              "type": "String",
              "name": "message",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the children of this node",
          "children": [
            {
              "type": "void",
              "name": "removeChildren"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this node with the given node",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of join points",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of strings",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWithStrings"
            },
            {
              "type": "String[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Setting data directly is not supported, this action just emits a warning and does nothing",
          "children": [
            {
              "type": "void",
              "name": "setData"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the first child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setFirstChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String[]",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the last child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setLastChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the type of a node, if it has a type",
          "children": [
            {
              "type": "void",
              "name": "setType"
            },
            {
              "type": "type",
              "name": "type",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Associates arbitrary values to nodes of the AST",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "String",
              "name": "fieldName",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a map",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "Map",
              "name": "fieldNameAndValue",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the value associated with the given property key",
          "children": [
            {
              "type": "joinpoint",
              "name": "setValue"
            },
            {
              "type": "String",
              "name": "key",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "suffix",
              "defaultValue": ""
            }
          ]
        }
      ]
    },
    {
      "type": "joinpoint",
      "name": "gotoStmt",
      "extends": "statement",
      "children": [
        {
          "type": "attribute",
          "children": [
            {
              "type": "labelDecl",
              "name": "label"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isFirst"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isLast"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "attributes"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "selects"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "actions"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "ancestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with a dump of the AST representation starting from this node. This representation corresponds to the internal Java representation of the ClavaAst, where the node names correspond to Java classes. To get an equivalent representation with join point names, use the attribute 'dump'",
          "children": [
            {
              "type": "String",
              "name": "ast"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor AST name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "astAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, considering null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "astChild"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, considering null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "astChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String that uniquely identifies this node",
          "children": [
            {
              "type": "String",
              "name": "astId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if this node is a Java instance of the given name, which corresponds to a simple Java class name of an AST node. For an equivalent function for join point names, use 'instanceOf(joinPointName)'",
          "children": [
            {
              "type": "boolean",
              "name": "astIsInstance"
            },
            {
              "type": "String",
              "name": "className"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the Java class of this node, which is similar to the equivalent node in Clang AST",
          "children": [
            {
              "type": "String",
              "name": "astName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, considering null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "astNumChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "astParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The bit width of the type returned by this join point, in relation to the definitions of its Translation Unit, or undefined if there is no type or bitwidth defined, or if the join point is not in a TranslationUnit",
          "children": [
            {
              "type": "Integer",
              "name": "bitWidth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String list of the names of the join points that form a path from the root to this node",
          "children": [
            {
              "type": "String[]",
              "name": "chain"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the joinpoint chain",
          "children": [
            {
              "type": "joinpoint",
              "name": "chainAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "child"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "children"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the code represented by this node",
          "children": [
            {
              "type": "String",
              "name": "code"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "column"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the given node is a descendant of this node",
          "children": [
            {
              "type": "Boolean",
              "name": "contains"
            },
            {
              "type": "joinpoint",
              "name": "jp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "currentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "JS object associated with this node, containing parsed data of #pragma clava data when the node can be a target of pragmas. This is a special object, managed internally, and cannot be reassigned, to change its contents requires using key-value pairs. If the node can be the target of a pragma, the information stored in this object is persisted between rebuilds.",
          "children": [
            {
              "type": "Object",
              "name": "data"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the depth of this join point in the AST. If it is the root join point returns 0, if it is a child of the root node returns 1, etc.",
          "children": [
            {
              "type": "Integer",
              "name": "depth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves all descendants of the join point",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type, including the node itself",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendantsAndSelf"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endColumn"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endLine"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the file where the code of this node is located, if available",
          "children": [
            {
              "type": "String",
              "name": "filename"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the complete path to the file where the code of this node comes from",
          "children": [
            {
              "type": "String",
              "name": "filepath"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the first child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks in the descendants for the first node of the given type",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstJp"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use 'userField' instead]",
          "children": [
            {
              "type": "Object",
              "name": "getUserField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The value associated with the given property key",
          "children": [
            {
              "type": "Object",
              "name": "getValue"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use hasParent instead]",
          "children": [
            {
              "type": "boolean",
              "name": "hasAstParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the node has children, false otherwise",
          "children": [
            {
              "type": "Boolean",
              "name": "hasChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the given join point or AST node is the same (== test) as the current join point AST node",
          "children": [
            {
              "type": "Boolean",
              "name": "hasNode"
            },
            {
              "type": "Object",
              "name": "nodeOrJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this node has a parent",
          "children": [
            {
              "type": "boolean",
              "name": "hasParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point has a type",
          "children": [
            {
              "type": "Boolean",
              "name": "hasType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns comments that are not explicitly in the AST, but embedded in other nodes",
          "children": [
            {
              "type": "comment[]",
              "name": "inlineComments"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this is a Cilk node (i.e., cilk_spawn, cilk_sync or cilk_for)",
          "children": [
            {
              "type": "Boolean",
              "name": "isCilk"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is part of a system header file",
          "children": [
            {
              "type": "Boolean",
              "name": "isInSystemHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a header (e.g., if condition, for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a loop header (e.g., for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideLoopHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if any descendant or the node itself was defined as a macro",
          "children": [
            {
              "type": "Boolean",
              "name": "isMacro"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the full Java class name of the type of the Java field with the provided name",
          "children": [
            {
              "type": "String",
              "name": "javaFieldType"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'keys' instead, together with 'getValue'] The names of the Java fields of this node. Can be used as key of the attribute 'javaValue'",
          "children": [
            {
              "type": "String[]",
              "name": "javaFields"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'getValue' instead, with the names returned by the attribute 'keys'] Returns the value associated with the provided Java field name",
          "children": [
            {
              "type": "Object",
              "name": "javaValue"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use joinPointType instead (uppercase P)]",
          "children": [
            {
              "type": "String",
              "name": "joinpointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Id that is based on the position of the node in the code, and should remain stable between compilations (warning: only a few nodes - file, function, loop - currently support it)",
          "children": [
            {
              "type": "String",
              "name": "jpId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Java Class instance with the type of the given key",
          "children": [
            {
              "type": "Object",
              "name": "keyType"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A list of the properties currently supported by this node. Can be used as parameter of the attribute 'getValue'",
          "children": [
            {
              "type": "String[]",
              "name": "keys"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[HACK: .descendants(type) does not work in .lara files, after GraalVM update] Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "laraDescendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the last child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "lastChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that came before this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "leftJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "line"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A string with information about the file and code position of this node, if available",
          "children": [
            {
              "type": "String",
              "name": "location"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, ignoring null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "numChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope that is a parent of the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The pragmas associated with this node",
          "children": [
            {
              "type": "pragma[]",
              "name": "pragmas"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that comes after this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "rightJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the 'program' joinpoint",
          "children": [
            {
              "type": "joinpoint",
              "name": "root"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the nodes of the scope of the current join point. If this node has a body (e.g., loop, function) corresponds to the children of the body. Otherwise, returns an empty array",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "scopeNodes"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that came before this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsLeft"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that come after this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsRight"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Converts this join point to a statement, or returns undefined if it was not possible",
          "children": [
            {
              "type": "statement",
              "name": "stmt"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "type",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrives values that have been associated to nodes of the AST with 'setUserField'",
          "children": [
            {
              "type": "Object",
              "name": "userField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a String with the type of the join point",
          "children": [
            {
              "type": "String",
              "name": "joinPointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the current join point is an instance of the given type",
          "children": [
            {
              "type": "Boolean",
              "name": "instanceOf"
            },
            {
              "type": "String",
              "name": "name"
            }
          ]
        },
        {
          "type": "select",
          "clazz": "expression",
          "alias": "expr"
        },
        {
          "type": "select",
          "clazz": "expression",
          "alias": "childExpr"
        },
        {
          "type": "select",
          "clazz": "call",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "call",
          "alias": "stmtCall"
        },
        {
          "type": "select",
          "clazz": "memberCall",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "memberAccess",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "arrayAccess",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "vardecl",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "varref",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "op",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "binaryOp",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "unaryOp",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "newExpr",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "deleteExpr",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "cilkSpawn",
          "alias": ""
        },
        {
          "type": "action",
          "tooltip": "sets the label of the goto",
          "children": [
            {
              "type": "void",
              "name": "setLabel"
            },
            {
              "type": "labelDecl",
              "name": "label",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "insert"
            },
            {
              "type": "[before| after| replace]",
              "name": "position",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "def"
            },
            {
              "type": "String",
              "name": "attribute",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, but not of the nodes in its fields",
          "children": [
            {
              "type": "joinpoint",
              "name": "copy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Copies all enumerable own properties from the source object to the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataAssign"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Clears all properties from the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataClear"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, including the nodes in their fields (only the first level of field nodes, this function is not recursive)",
          "children": [
            {
              "type": "joinpoint",
              "name": "deepCopy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the node associated to this joinpoint from the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "detach"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point after this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point before this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Adds a message that will be printed to the user after weaving finishes. Identical messages are removed",
          "children": [
            {
              "type": "void",
              "name": "messageToUser"
            },
            {
              "type": "String",
              "name": "message",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the children of this node",
          "children": [
            {
              "type": "void",
              "name": "removeChildren"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this node with the given node",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of join points",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of strings",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWithStrings"
            },
            {
              "type": "String[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Setting data directly is not supported, this action just emits a warning and does nothing",
          "children": [
            {
              "type": "void",
              "name": "setData"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the first child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setFirstChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String[]",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the last child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setLastChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the type of a node, if it has a type",
          "children": [
            {
              "type": "void",
              "name": "setType"
            },
            {
              "type": "type",
              "name": "type",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Associates arbitrary values to nodes of the AST",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "String",
              "name": "fieldName",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a map",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "Map",
              "name": "fieldNameAndValue",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the value associated with the given property key",
          "children": [
            {
              "type": "joinpoint",
              "name": "setValue"
            },
            {
              "type": "String",
              "name": "key",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "suffix",
              "defaultValue": ""
            }
          ]
        }
      ]
    },
    {
      "type": "joinpoint",
      "name": "if",
      "extends": "statement",
      "children": [
        {
          "type": "attribute",
          "children": [
            {
              "type": "expression",
              "name": "cond"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "vardecl",
              "name": "condDecl"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "scope",
              "name": "else"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "scope",
              "name": "then"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isFirst"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isLast"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "attributes"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "selects"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "actions"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "ancestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with a dump of the AST representation starting from this node. This representation corresponds to the internal Java representation of the ClavaAst, where the node names correspond to Java classes. To get an equivalent representation with join point names, use the attribute 'dump'",
          "children": [
            {
              "type": "String",
              "name": "ast"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor AST name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "astAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, considering null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "astChild"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, considering null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "astChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String that uniquely identifies this node",
          "children": [
            {
              "type": "String",
              "name": "astId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if this node is a Java instance of the given name, which corresponds to a simple Java class name of an AST node. For an equivalent function for join point names, use 'instanceOf(joinPointName)'",
          "children": [
            {
              "type": "boolean",
              "name": "astIsInstance"
            },
            {
              "type": "String",
              "name": "className"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the Java class of this node, which is similar to the equivalent node in Clang AST",
          "children": [
            {
              "type": "String",
              "name": "astName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, considering null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "astNumChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "astParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The bit width of the type returned by this join point, in relation to the definitions of its Translation Unit, or undefined if there is no type or bitwidth defined, or if the join point is not in a TranslationUnit",
          "children": [
            {
              "type": "Integer",
              "name": "bitWidth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String list of the names of the join points that form a path from the root to this node",
          "children": [
            {
              "type": "String[]",
              "name": "chain"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the joinpoint chain",
          "children": [
            {
              "type": "joinpoint",
              "name": "chainAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "child"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "children"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the code represented by this node",
          "children": [
            {
              "type": "String",
              "name": "code"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "column"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the given node is a descendant of this node",
          "children": [
            {
              "type": "Boolean",
              "name": "contains"
            },
            {
              "type": "joinpoint",
              "name": "jp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "currentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "JS object associated with this node, containing parsed data of #pragma clava data when the node can be a target of pragmas. This is a special object, managed internally, and cannot be reassigned, to change its contents requires using key-value pairs. If the node can be the target of a pragma, the information stored in this object is persisted between rebuilds.",
          "children": [
            {
              "type": "Object",
              "name": "data"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the depth of this join point in the AST. If it is the root join point returns 0, if it is a child of the root node returns 1, etc.",
          "children": [
            {
              "type": "Integer",
              "name": "depth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves all descendants of the join point",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type, including the node itself",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendantsAndSelf"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endColumn"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endLine"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the file where the code of this node is located, if available",
          "children": [
            {
              "type": "String",
              "name": "filename"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the complete path to the file where the code of this node comes from",
          "children": [
            {
              "type": "String",
              "name": "filepath"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the first child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks in the descendants for the first node of the given type",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstJp"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use 'userField' instead]",
          "children": [
            {
              "type": "Object",
              "name": "getUserField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The value associated with the given property key",
          "children": [
            {
              "type": "Object",
              "name": "getValue"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use hasParent instead]",
          "children": [
            {
              "type": "boolean",
              "name": "hasAstParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the node has children, false otherwise",
          "children": [
            {
              "type": "Boolean",
              "name": "hasChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the given join point or AST node is the same (== test) as the current join point AST node",
          "children": [
            {
              "type": "Boolean",
              "name": "hasNode"
            },
            {
              "type": "Object",
              "name": "nodeOrJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this node has a parent",
          "children": [
            {
              "type": "boolean",
              "name": "hasParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point has a type",
          "children": [
            {
              "type": "Boolean",
              "name": "hasType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns comments that are not explicitly in the AST, but embedded in other nodes",
          "children": [
            {
              "type": "comment[]",
              "name": "inlineComments"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this is a Cilk node (i.e., cilk_spawn, cilk_sync or cilk_for)",
          "children": [
            {
              "type": "Boolean",
              "name": "isCilk"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is part of a system header file",
          "children": [
            {
              "type": "Boolean",
              "name": "isInSystemHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a header (e.g., if condition, for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a loop header (e.g., for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideLoopHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if any descendant or the node itself was defined as a macro",
          "children": [
            {
              "type": "Boolean",
              "name": "isMacro"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the full Java class name of the type of the Java field with the provided name",
          "children": [
            {
              "type": "String",
              "name": "javaFieldType"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'keys' instead, together with 'getValue'] The names of the Java fields of this node. Can be used as key of the attribute 'javaValue'",
          "children": [
            {
              "type": "String[]",
              "name": "javaFields"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'getValue' instead, with the names returned by the attribute 'keys'] Returns the value associated with the provided Java field name",
          "children": [
            {
              "type": "Object",
              "name": "javaValue"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use joinPointType instead (uppercase P)]",
          "children": [
            {
              "type": "String",
              "name": "joinpointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Id that is based on the position of the node in the code, and should remain stable between compilations (warning: only a few nodes - file, function, loop - currently support it)",
          "children": [
            {
              "type": "String",
              "name": "jpId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Java Class instance with the type of the given key",
          "children": [
            {
              "type": "Object",
              "name": "keyType"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A list of the properties currently supported by this node. Can be used as parameter of the attribute 'getValue'",
          "children": [
            {
              "type": "String[]",
              "name": "keys"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[HACK: .descendants(type) does not work in .lara files, after GraalVM update] Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "laraDescendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the last child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "lastChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that came before this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "leftJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "line"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A string with information about the file and code position of this node, if available",
          "children": [
            {
              "type": "String",
              "name": "location"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, ignoring null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "numChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope that is a parent of the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The pragmas associated with this node",
          "children": [
            {
              "type": "pragma[]",
              "name": "pragmas"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that comes after this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "rightJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the 'program' joinpoint",
          "children": [
            {
              "type": "joinpoint",
              "name": "root"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the nodes of the scope of the current join point. If this node has a body (e.g., loop, function) corresponds to the children of the body. Otherwise, returns an empty array",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "scopeNodes"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that came before this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsLeft"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that come after this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsRight"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Converts this join point to a statement, or returns undefined if it was not possible",
          "children": [
            {
              "type": "statement",
              "name": "stmt"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "type",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrives values that have been associated to nodes of the AST with 'setUserField'",
          "children": [
            {
              "type": "Object",
              "name": "userField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a String with the type of the join point",
          "children": [
            {
              "type": "String",
              "name": "joinPointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the current join point is an instance of the given type",
          "children": [
            {
              "type": "Boolean",
              "name": "instanceOf"
            },
            {
              "type": "String",
              "name": "name"
            }
          ]
        },
        {
          "type": "select",
          "clazz": "expression",
          "alias": "cond"
        },
        {
          "type": "select",
          "clazz": "vardecl",
          "alias": "condDecl"
        },
        {
          "type": "select",
          "clazz": "scope",
          "alias": "then"
        },
        {
          "type": "select",
          "clazz": "scope",
          "alias": "else"
        },
        {
          "type": "select",
          "clazz": "scope",
          "alias": "body"
        },
        {
          "type": "select",
          "clazz": "expression",
          "alias": "expr"
        },
        {
          "type": "select",
          "clazz": "expression",
          "alias": "childExpr"
        },
        {
          "type": "select",
          "clazz": "call",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "call",
          "alias": "stmtCall"
        },
        {
          "type": "select",
          "clazz": "memberCall",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "memberAccess",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "arrayAccess",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "vardecl",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "varref",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "op",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "binaryOp",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "unaryOp",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "newExpr",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "deleteExpr",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "cilkSpawn",
          "alias": ""
        },
        {
          "type": "action",
          "tooltip": "sets the condition of the if",
          "children": [
            {
              "type": "void",
              "name": "setCond"
            },
            {
              "type": "expression",
              "name": "cond",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "sets the body of the else",
          "children": [
            {
              "type": "void",
              "name": "setElse"
            },
            {
              "type": "statement",
              "name": "else",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "sets the body of the if",
          "children": [
            {
              "type": "void",
              "name": "setThen"
            },
            {
              "type": "statement",
              "name": "then",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "insert"
            },
            {
              "type": "[before| after| replace]",
              "name": "position",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "def"
            },
            {
              "type": "String",
              "name": "attribute",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, but not of the nodes in its fields",
          "children": [
            {
              "type": "joinpoint",
              "name": "copy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Copies all enumerable own properties from the source object to the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataAssign"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Clears all properties from the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataClear"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, including the nodes in their fields (only the first level of field nodes, this function is not recursive)",
          "children": [
            {
              "type": "joinpoint",
              "name": "deepCopy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the node associated to this joinpoint from the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "detach"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point after this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point before this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Adds a message that will be printed to the user after weaving finishes. Identical messages are removed",
          "children": [
            {
              "type": "void",
              "name": "messageToUser"
            },
            {
              "type": "String",
              "name": "message",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the children of this node",
          "children": [
            {
              "type": "void",
              "name": "removeChildren"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this node with the given node",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of join points",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of strings",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWithStrings"
            },
            {
              "type": "String[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Setting data directly is not supported, this action just emits a warning and does nothing",
          "children": [
            {
              "type": "void",
              "name": "setData"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the first child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setFirstChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String[]",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the last child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setLastChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the type of a node, if it has a type",
          "children": [
            {
              "type": "void",
              "name": "setType"
            },
            {
              "type": "type",
              "name": "type",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Associates arbitrary values to nodes of the AST",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "String",
              "name": "fieldName",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a map",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "Map",
              "name": "fieldNameAndValue",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the value associated with the given property key",
          "children": [
            {
              "type": "joinpoint",
              "name": "setValue"
            },
            {
              "type": "String",
              "name": "key",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "suffix",
              "defaultValue": ""
            }
          ]
        }
      ]
    },
    {
      "type": "joinpoint",
      "name": "include",
      "defaultAttr": "name",
      "extends": "decl",
      "tooltip": "Represents an include directive (e.g., #include <stdio.h>)",
      "children": [
        {
          "type": "attribute",
          "tooltip": "true if this is an angled include (i.e., system include)",
          "children": [
            {
              "type": "Boolean",
              "name": "isAngled"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the name of the include",
          "children": [
            {
              "type": "String",
              "name": "name"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the path to the folder of the source file of the include, relative to the name of the include",
          "children": [
            {
              "type": "String",
              "name": "relativeFolderpath"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The attributes (e.g. Pure, CUDAGlobal) associated to this decl",
          "children": [
            {
              "type": "attribute[]",
              "name": "attrs"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "attributes"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "selects"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "actions"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "ancestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with a dump of the AST representation starting from this node. This representation corresponds to the internal Java representation of the ClavaAst, where the node names correspond to Java classes. To get an equivalent representation with join point names, use the attribute 'dump'",
          "children": [
            {
              "type": "String",
              "name": "ast"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor AST name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "astAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, considering null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "astChild"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, considering null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "astChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String that uniquely identifies this node",
          "children": [
            {
              "type": "String",
              "name": "astId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if this node is a Java instance of the given name, which corresponds to a simple Java class name of an AST node. For an equivalent function for join point names, use 'instanceOf(joinPointName)'",
          "children": [
            {
              "type": "boolean",
              "name": "astIsInstance"
            },
            {
              "type": "String",
              "name": "className"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the Java class of this node, which is similar to the equivalent node in Clang AST",
          "children": [
            {
              "type": "String",
              "name": "astName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, considering null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "astNumChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "astParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The bit width of the type returned by this join point, in relation to the definitions of its Translation Unit, or undefined if there is no type or bitwidth defined, or if the join point is not in a TranslationUnit",
          "children": [
            {
              "type": "Integer",
              "name": "bitWidth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String list of the names of the join points that form a path from the root to this node",
          "children": [
            {
              "type": "String[]",
              "name": "chain"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the joinpoint chain",
          "children": [
            {
              "type": "joinpoint",
              "name": "chainAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "child"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "children"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the code represented by this node",
          "children": [
            {
              "type": "String",
              "name": "code"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "column"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the given node is a descendant of this node",
          "children": [
            {
              "type": "Boolean",
              "name": "contains"
            },
            {
              "type": "joinpoint",
              "name": "jp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "currentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "JS object associated with this node, containing parsed data of #pragma clava data when the node can be a target of pragmas. This is a special object, managed internally, and cannot be reassigned, to change its contents requires using key-value pairs. If the node can be the target of a pragma, the information stored in this object is persisted between rebuilds.",
          "children": [
            {
              "type": "Object",
              "name": "data"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the depth of this join point in the AST. If it is the root join point returns 0, if it is a child of the root node returns 1, etc.",
          "children": [
            {
              "type": "Integer",
              "name": "depth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves all descendants of the join point",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type, including the node itself",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendantsAndSelf"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endColumn"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endLine"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the file where the code of this node is located, if available",
          "children": [
            {
              "type": "String",
              "name": "filename"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the complete path to the file where the code of this node comes from",
          "children": [
            {
              "type": "String",
              "name": "filepath"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the first child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks in the descendants for the first node of the given type",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstJp"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use 'userField' instead]",
          "children": [
            {
              "type": "Object",
              "name": "getUserField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The value associated with the given property key",
          "children": [
            {
              "type": "Object",
              "name": "getValue"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use hasParent instead]",
          "children": [
            {
              "type": "boolean",
              "name": "hasAstParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the node has children, false otherwise",
          "children": [
            {
              "type": "Boolean",
              "name": "hasChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the given join point or AST node is the same (== test) as the current join point AST node",
          "children": [
            {
              "type": "Boolean",
              "name": "hasNode"
            },
            {
              "type": "Object",
              "name": "nodeOrJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this node has a parent",
          "children": [
            {
              "type": "boolean",
              "name": "hasParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point has a type",
          "children": [
            {
              "type": "Boolean",
              "name": "hasType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns comments that are not explicitly in the AST, but embedded in other nodes",
          "children": [
            {
              "type": "comment[]",
              "name": "inlineComments"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this is a Cilk node (i.e., cilk_spawn, cilk_sync or cilk_for)",
          "children": [
            {
              "type": "Boolean",
              "name": "isCilk"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is part of a system header file",
          "children": [
            {
              "type": "Boolean",
              "name": "isInSystemHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a header (e.g., if condition, for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a loop header (e.g., for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideLoopHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if any descendant or the node itself was defined as a macro",
          "children": [
            {
              "type": "Boolean",
              "name": "isMacro"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the full Java class name of the type of the Java field with the provided name",
          "children": [
            {
              "type": "String",
              "name": "javaFieldType"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'keys' instead, together with 'getValue'] The names of the Java fields of this node. Can be used as key of the attribute 'javaValue'",
          "children": [
            {
              "type": "String[]",
              "name": "javaFields"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'getValue' instead, with the names returned by the attribute 'keys'] Returns the value associated with the provided Java field name",
          "children": [
            {
              "type": "Object",
              "name": "javaValue"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use joinPointType instead (uppercase P)]",
          "children": [
            {
              "type": "String",
              "name": "joinpointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Id that is based on the position of the node in the code, and should remain stable between compilations (warning: only a few nodes - file, function, loop - currently support it)",
          "children": [
            {
              "type": "String",
              "name": "jpId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Java Class instance with the type of the given key",
          "children": [
            {
              "type": "Object",
              "name": "keyType"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A list of the properties currently supported by this node. Can be used as parameter of the attribute 'getValue'",
          "children": [
            {
              "type": "String[]",
              "name": "keys"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[HACK: .descendants(type) does not work in .lara files, after GraalVM update] Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "laraDescendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the last child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "lastChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that came before this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "leftJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "line"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A string with information about the file and code position of this node, if available",
          "children": [
            {
              "type": "String",
              "name": "location"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, ignoring null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "numChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope that is a parent of the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The pragmas associated with this node",
          "children": [
            {
              "type": "pragma[]",
              "name": "pragmas"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that comes after this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "rightJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the 'program' joinpoint",
          "children": [
            {
              "type": "joinpoint",
              "name": "root"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the nodes of the scope of the current join point. If this node has a body (e.g., loop, function) corresponds to the children of the body. Otherwise, returns an empty array",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "scopeNodes"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that came before this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsLeft"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that come after this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsRight"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Converts this join point to a statement, or returns undefined if it was not possible",
          "children": [
            {
              "type": "statement",
              "name": "stmt"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "type",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrives values that have been associated to nodes of the AST with 'setUserField'",
          "children": [
            {
              "type": "Object",
              "name": "userField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a String with the type of the join point",
          "children": [
            {
              "type": "String",
              "name": "joinPointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the current join point is an instance of the given type",
          "children": [
            {
              "type": "Boolean",
              "name": "instanceOf"
            },
            {
              "type": "String",
              "name": "name"
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "insert"
            },
            {
              "type": "[before| after| replace]",
              "name": "position",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "def"
            },
            {
              "type": "String",
              "name": "attribute",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, but not of the nodes in its fields",
          "children": [
            {
              "type": "joinpoint",
              "name": "copy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Copies all enumerable own properties from the source object to the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataAssign"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Clears all properties from the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataClear"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, including the nodes in their fields (only the first level of field nodes, this function is not recursive)",
          "children": [
            {
              "type": "joinpoint",
              "name": "deepCopy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the node associated to this joinpoint from the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "detach"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point after this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point before this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Adds a message that will be printed to the user after weaving finishes. Identical messages are removed",
          "children": [
            {
              "type": "void",
              "name": "messageToUser"
            },
            {
              "type": "String",
              "name": "message",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the children of this node",
          "children": [
            {
              "type": "void",
              "name": "removeChildren"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this node with the given node",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of join points",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of strings",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWithStrings"
            },
            {
              "type": "String[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Setting data directly is not supported, this action just emits a warning and does nothing",
          "children": [
            {
              "type": "void",
              "name": "setData"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the first child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setFirstChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String[]",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the last child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setLastChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the type of a node, if it has a type",
          "children": [
            {
              "type": "void",
              "name": "setType"
            },
            {
              "type": "type",
              "name": "type",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Associates arbitrary values to nodes of the AST",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "String",
              "name": "fieldName",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a map",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "Map",
              "name": "fieldNameAndValue",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the value associated with the given property key",
          "children": [
            {
              "type": "joinpoint",
              "name": "setValue"
            },
            {
              "type": "String",
              "name": "key",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "suffix",
              "defaultValue": ""
            }
          ]
        }
      ]
    },
    {
      "type": "joinpoint",
      "name": "intLiteral",
      "extends": "literal",
      "children": [
        {
          "type": "attribute",
          "children": [
            {
              "type": "Long",
              "name": "value"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a 'decl' join point that represents the declaration associated with this expression, or undefined if there is none",
          "children": [
            {
              "type": "decl",
              "name": "decl"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "returns a cast joinpoint if this expression has an associated implicit cast, undefined otherwise",
          "children": [
            {
              "type": "cast",
              "name": "implicitCast"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the expression is part of an argument of a function call",
          "children": [
            {
              "type": "Boolean",
              "name": "isFunctionArgument"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "[read| write| readwrite]",
              "name": "use"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "vardecl",
              "name": "vardecl"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "attributes"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "selects"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "actions"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "ancestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with a dump of the AST representation starting from this node. This representation corresponds to the internal Java representation of the ClavaAst, where the node names correspond to Java classes. To get an equivalent representation with join point names, use the attribute 'dump'",
          "children": [
            {
              "type": "String",
              "name": "ast"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor AST name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "astAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, considering null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "astChild"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, considering null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "astChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String that uniquely identifies this node",
          "children": [
            {
              "type": "String",
              "name": "astId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if this node is a Java instance of the given name, which corresponds to a simple Java class name of an AST node. For an equivalent function for join point names, use 'instanceOf(joinPointName)'",
          "children": [
            {
              "type": "boolean",
              "name": "astIsInstance"
            },
            {
              "type": "String",
              "name": "className"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the Java class of this node, which is similar to the equivalent node in Clang AST",
          "children": [
            {
              "type": "String",
              "name": "astName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, considering null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "astNumChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "astParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The bit width of the type returned by this join point, in relation to the definitions of its Translation Unit, or undefined if there is no type or bitwidth defined, or if the join point is not in a TranslationUnit",
          "children": [
            {
              "type": "Integer",
              "name": "bitWidth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String list of the names of the join points that form a path from the root to this node",
          "children": [
            {
              "type": "String[]",
              "name": "chain"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the joinpoint chain",
          "children": [
            {
              "type": "joinpoint",
              "name": "chainAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "child"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "children"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the code represented by this node",
          "children": [
            {
              "type": "String",
              "name": "code"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "column"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the given node is a descendant of this node",
          "children": [
            {
              "type": "Boolean",
              "name": "contains"
            },
            {
              "type": "joinpoint",
              "name": "jp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "currentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "JS object associated with this node, containing parsed data of #pragma clava data when the node can be a target of pragmas. This is a special object, managed internally, and cannot be reassigned, to change its contents requires using key-value pairs. If the node can be the target of a pragma, the information stored in this object is persisted between rebuilds.",
          "children": [
            {
              "type": "Object",
              "name": "data"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the depth of this join point in the AST. If it is the root join point returns 0, if it is a child of the root node returns 1, etc.",
          "children": [
            {
              "type": "Integer",
              "name": "depth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves all descendants of the join point",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type, including the node itself",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendantsAndSelf"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endColumn"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endLine"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the file where the code of this node is located, if available",
          "children": [
            {
              "type": "String",
              "name": "filename"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the complete path to the file where the code of this node comes from",
          "children": [
            {
              "type": "String",
              "name": "filepath"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the first child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks in the descendants for the first node of the given type",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstJp"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use 'userField' instead]",
          "children": [
            {
              "type": "Object",
              "name": "getUserField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The value associated with the given property key",
          "children": [
            {
              "type": "Object",
              "name": "getValue"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use hasParent instead]",
          "children": [
            {
              "type": "boolean",
              "name": "hasAstParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the node has children, false otherwise",
          "children": [
            {
              "type": "Boolean",
              "name": "hasChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the given join point or AST node is the same (== test) as the current join point AST node",
          "children": [
            {
              "type": "Boolean",
              "name": "hasNode"
            },
            {
              "type": "Object",
              "name": "nodeOrJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this node has a parent",
          "children": [
            {
              "type": "boolean",
              "name": "hasParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point has a type",
          "children": [
            {
              "type": "Boolean",
              "name": "hasType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns comments that are not explicitly in the AST, but embedded in other nodes",
          "children": [
            {
              "type": "comment[]",
              "name": "inlineComments"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this is a Cilk node (i.e., cilk_spawn, cilk_sync or cilk_for)",
          "children": [
            {
              "type": "Boolean",
              "name": "isCilk"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is part of a system header file",
          "children": [
            {
              "type": "Boolean",
              "name": "isInSystemHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a header (e.g., if condition, for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a loop header (e.g., for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideLoopHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if any descendant or the node itself was defined as a macro",
          "children": [
            {
              "type": "Boolean",
              "name": "isMacro"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the full Java class name of the type of the Java field with the provided name",
          "children": [
            {
              "type": "String",
              "name": "javaFieldType"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'keys' instead, together with 'getValue'] The names of the Java fields of this node. Can be used as key of the attribute 'javaValue'",
          "children": [
            {
              "type": "String[]",
              "name": "javaFields"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'getValue' instead, with the names returned by the attribute 'keys'] Returns the value associated with the provided Java field name",
          "children": [
            {
              "type": "Object",
              "name": "javaValue"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use joinPointType instead (uppercase P)]",
          "children": [
            {
              "type": "String",
              "name": "joinpointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Id that is based on the position of the node in the code, and should remain stable between compilations (warning: only a few nodes - file, function, loop - currently support it)",
          "children": [
            {
              "type": "String",
              "name": "jpId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Java Class instance with the type of the given key",
          "children": [
            {
              "type": "Object",
              "name": "keyType"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A list of the properties currently supported by this node. Can be used as parameter of the attribute 'getValue'",
          "children": [
            {
              "type": "String[]",
              "name": "keys"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[HACK: .descendants(type) does not work in .lara files, after GraalVM update] Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "laraDescendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the last child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "lastChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that came before this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "leftJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "line"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A string with information about the file and code position of this node, if available",
          "children": [
            {
              "type": "String",
              "name": "location"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, ignoring null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "numChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope that is a parent of the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The pragmas associated with this node",
          "children": [
            {
              "type": "pragma[]",
              "name": "pragmas"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that comes after this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "rightJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the 'program' joinpoint",
          "children": [
            {
              "type": "joinpoint",
              "name": "root"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the nodes of the scope of the current join point. If this node has a body (e.g., loop, function) corresponds to the children of the body. Otherwise, returns an empty array",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "scopeNodes"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that came before this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsLeft"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that come after this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsRight"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Converts this join point to a statement, or returns undefined if it was not possible",
          "children": [
            {
              "type": "statement",
              "name": "stmt"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "type",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrives values that have been associated to nodes of the AST with 'setUserField'",
          "children": [
            {
              "type": "Object",
              "name": "userField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a String with the type of the join point",
          "children": [
            {
              "type": "String",
              "name": "joinPointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the current join point is an instance of the given type",
          "children": [
            {
              "type": "Boolean",
              "name": "instanceOf"
            },
            {
              "type": "String",
              "name": "name"
            }
          ]
        },
        {
          "type": "select",
          "clazz": "vardecl",
          "alias": ""
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "insert"
            },
            {
              "type": "[before| after| replace]",
              "name": "position",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "def"
            },
            {
              "type": "String",
              "name": "attribute",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, but not of the nodes in its fields",
          "children": [
            {
              "type": "joinpoint",
              "name": "copy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Copies all enumerable own properties from the source object to the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataAssign"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Clears all properties from the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataClear"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, including the nodes in their fields (only the first level of field nodes, this function is not recursive)",
          "children": [
            {
              "type": "joinpoint",
              "name": "deepCopy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the node associated to this joinpoint from the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "detach"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point after this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point before this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Adds a message that will be printed to the user after weaving finishes. Identical messages are removed",
          "children": [
            {
              "type": "void",
              "name": "messageToUser"
            },
            {
              "type": "String",
              "name": "message",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the children of this node",
          "children": [
            {
              "type": "void",
              "name": "removeChildren"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this node with the given node",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of join points",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of strings",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWithStrings"
            },
            {
              "type": "String[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Setting data directly is not supported, this action just emits a warning and does nothing",
          "children": [
            {
              "type": "void",
              "name": "setData"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the first child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setFirstChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String[]",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the last child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setLastChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the type of a node, if it has a type",
          "children": [
            {
              "type": "void",
              "name": "setType"
            },
            {
              "type": "type",
              "name": "type",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Associates arbitrary values to nodes of the AST",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "String",
              "name": "fieldName",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a map",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "Map",
              "name": "fieldNameAndValue",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the value associated with the given property key",
          "children": [
            {
              "type": "joinpoint",
              "name": "setValue"
            },
            {
              "type": "String",
              "name": "key",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "suffix",
              "defaultValue": ""
            }
          ]
        }
      ]
    },
    {
      "type": "joinpoint",
      "name": "labelDecl",
      "defaultAttr": "name",
      "extends": "namedDecl",
      "children": [
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isPublic"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String",
              "name": "name"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String",
              "name": "qualifiedName"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String",
              "name": "qualifiedPrefix"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The attributes (e.g. Pure, CUDAGlobal) associated to this decl",
          "children": [
            {
              "type": "attribute[]",
              "name": "attrs"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "attributes"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "selects"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "actions"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "ancestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with a dump of the AST representation starting from this node. This representation corresponds to the internal Java representation of the ClavaAst, where the node names correspond to Java classes. To get an equivalent representation with join point names, use the attribute 'dump'",
          "children": [
            {
              "type": "String",
              "name": "ast"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor AST name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "astAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, considering null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "astChild"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, considering null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "astChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String that uniquely identifies this node",
          "children": [
            {
              "type": "String",
              "name": "astId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if this node is a Java instance of the given name, which corresponds to a simple Java class name of an AST node. For an equivalent function for join point names, use 'instanceOf(joinPointName)'",
          "children": [
            {
              "type": "boolean",
              "name": "astIsInstance"
            },
            {
              "type": "String",
              "name": "className"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the Java class of this node, which is similar to the equivalent node in Clang AST",
          "children": [
            {
              "type": "String",
              "name": "astName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, considering null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "astNumChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "astParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The bit width of the type returned by this join point, in relation to the definitions of its Translation Unit, or undefined if there is no type or bitwidth defined, or if the join point is not in a TranslationUnit",
          "children": [
            {
              "type": "Integer",
              "name": "bitWidth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String list of the names of the join points that form a path from the root to this node",
          "children": [
            {
              "type": "String[]",
              "name": "chain"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the joinpoint chain",
          "children": [
            {
              "type": "joinpoint",
              "name": "chainAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "child"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "children"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the code represented by this node",
          "children": [
            {
              "type": "String",
              "name": "code"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "column"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the given node is a descendant of this node",
          "children": [
            {
              "type": "Boolean",
              "name": "contains"
            },
            {
              "type": "joinpoint",
              "name": "jp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "currentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "JS object associated with this node, containing parsed data of #pragma clava data when the node can be a target of pragmas. This is a special object, managed internally, and cannot be reassigned, to change its contents requires using key-value pairs. If the node can be the target of a pragma, the information stored in this object is persisted between rebuilds.",
          "children": [
            {
              "type": "Object",
              "name": "data"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the depth of this join point in the AST. If it is the root join point returns 0, if it is a child of the root node returns 1, etc.",
          "children": [
            {
              "type": "Integer",
              "name": "depth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves all descendants of the join point",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type, including the node itself",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendantsAndSelf"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endColumn"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endLine"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the file where the code of this node is located, if available",
          "children": [
            {
              "type": "String",
              "name": "filename"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the complete path to the file where the code of this node comes from",
          "children": [
            {
              "type": "String",
              "name": "filepath"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the first child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks in the descendants for the first node of the given type",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstJp"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use 'userField' instead]",
          "children": [
            {
              "type": "Object",
              "name": "getUserField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The value associated with the given property key",
          "children": [
            {
              "type": "Object",
              "name": "getValue"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use hasParent instead]",
          "children": [
            {
              "type": "boolean",
              "name": "hasAstParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the node has children, false otherwise",
          "children": [
            {
              "type": "Boolean",
              "name": "hasChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the given join point or AST node is the same (== test) as the current join point AST node",
          "children": [
            {
              "type": "Boolean",
              "name": "hasNode"
            },
            {
              "type": "Object",
              "name": "nodeOrJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this node has a parent",
          "children": [
            {
              "type": "boolean",
              "name": "hasParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point has a type",
          "children": [
            {
              "type": "Boolean",
              "name": "hasType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns comments that are not explicitly in the AST, but embedded in other nodes",
          "children": [
            {
              "type": "comment[]",
              "name": "inlineComments"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this is a Cilk node (i.e., cilk_spawn, cilk_sync or cilk_for)",
          "children": [
            {
              "type": "Boolean",
              "name": "isCilk"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is part of a system header file",
          "children": [
            {
              "type": "Boolean",
              "name": "isInSystemHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a header (e.g., if condition, for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a loop header (e.g., for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideLoopHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if any descendant or the node itself was defined as a macro",
          "children": [
            {
              "type": "Boolean",
              "name": "isMacro"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the full Java class name of the type of the Java field with the provided name",
          "children": [
            {
              "type": "String",
              "name": "javaFieldType"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'keys' instead, together with 'getValue'] The names of the Java fields of this node. Can be used as key of the attribute 'javaValue'",
          "children": [
            {
              "type": "String[]",
              "name": "javaFields"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'getValue' instead, with the names returned by the attribute 'keys'] Returns the value associated with the provided Java field name",
          "children": [
            {
              "type": "Object",
              "name": "javaValue"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use joinPointType instead (uppercase P)]",
          "children": [
            {
              "type": "String",
              "name": "joinpointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Id that is based on the position of the node in the code, and should remain stable between compilations (warning: only a few nodes - file, function, loop - currently support it)",
          "children": [
            {
              "type": "String",
              "name": "jpId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Java Class instance with the type of the given key",
          "children": [
            {
              "type": "Object",
              "name": "keyType"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A list of the properties currently supported by this node. Can be used as parameter of the attribute 'getValue'",
          "children": [
            {
              "type": "String[]",
              "name": "keys"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[HACK: .descendants(type) does not work in .lara files, after GraalVM update] Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "laraDescendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the last child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "lastChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that came before this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "leftJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "line"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A string with information about the file and code position of this node, if available",
          "children": [
            {
              "type": "String",
              "name": "location"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, ignoring null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "numChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope that is a parent of the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The pragmas associated with this node",
          "children": [
            {
              "type": "pragma[]",
              "name": "pragmas"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that comes after this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "rightJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the 'program' joinpoint",
          "children": [
            {
              "type": "joinpoint",
              "name": "root"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the nodes of the scope of the current join point. If this node has a body (e.g., loop, function) corresponds to the children of the body. Otherwise, returns an empty array",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "scopeNodes"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that came before this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsLeft"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that come after this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsRight"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Converts this join point to a statement, or returns undefined if it was not possible",
          "children": [
            {
              "type": "statement",
              "name": "stmt"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "type",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrives values that have been associated to nodes of the AST with 'setUserField'",
          "children": [
            {
              "type": "Object",
              "name": "userField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a String with the type of the join point",
          "children": [
            {
              "type": "String",
              "name": "joinPointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the current join point is an instance of the given type",
          "children": [
            {
              "type": "Boolean",
              "name": "instanceOf"
            },
            {
              "type": "String",
              "name": "name"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the name of this namedDecl",
          "children": [
            {
              "type": "void",
              "name": "setName"
            },
            {
              "type": "String",
              "name": "name",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the qualified name of this namedDecl (changes both the name and qualified prefix)",
          "children": [
            {
              "type": "void",
              "name": "setQualifiedName"
            },
            {
              "type": "String",
              "name": "name",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the qualified prefix of this namedDecl",
          "children": [
            {
              "type": "void",
              "name": "setQualifiedPrefix"
            },
            {
              "type": "String",
              "name": "qualifiedPrefix",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "insert"
            },
            {
              "type": "[before| after| replace]",
              "name": "position",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "def"
            },
            {
              "type": "String",
              "name": "attribute",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, but not of the nodes in its fields",
          "children": [
            {
              "type": "joinpoint",
              "name": "copy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Copies all enumerable own properties from the source object to the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataAssign"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Clears all properties from the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataClear"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, including the nodes in their fields (only the first level of field nodes, this function is not recursive)",
          "children": [
            {
              "type": "joinpoint",
              "name": "deepCopy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the node associated to this joinpoint from the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "detach"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point after this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point before this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Adds a message that will be printed to the user after weaving finishes. Identical messages are removed",
          "children": [
            {
              "type": "void",
              "name": "messageToUser"
            },
            {
              "type": "String",
              "name": "message",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the children of this node",
          "children": [
            {
              "type": "void",
              "name": "removeChildren"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this node with the given node",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of join points",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of strings",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWithStrings"
            },
            {
              "type": "String[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Setting data directly is not supported, this action just emits a warning and does nothing",
          "children": [
            {
              "type": "void",
              "name": "setData"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the first child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setFirstChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String[]",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the last child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setLastChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the type of a node, if it has a type",
          "children": [
            {
              "type": "void",
              "name": "setType"
            },
            {
              "type": "type",
              "name": "type",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Associates arbitrary values to nodes of the AST",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "String",
              "name": "fieldName",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a map",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "Map",
              "name": "fieldNameAndValue",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the value associated with the given property key",
          "children": [
            {
              "type": "joinpoint",
              "name": "setValue"
            },
            {
              "type": "String",
              "name": "key",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "suffix",
              "defaultValue": ""
            }
          ]
        }
      ]
    },
    {
      "type": "joinpoint",
      "name": "labelStmt",
      "extends": "statement",
      "children": [
        {
          "type": "attribute",
          "children": [
            {
              "type": "labelDecl",
              "name": "decl"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isFirst"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isLast"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "attributes"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "selects"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "actions"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "ancestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with a dump of the AST representation starting from this node. This representation corresponds to the internal Java representation of the ClavaAst, where the node names correspond to Java classes. To get an equivalent representation with join point names, use the attribute 'dump'",
          "children": [
            {
              "type": "String",
              "name": "ast"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor AST name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "astAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, considering null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "astChild"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, considering null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "astChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String that uniquely identifies this node",
          "children": [
            {
              "type": "String",
              "name": "astId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if this node is a Java instance of the given name, which corresponds to a simple Java class name of an AST node. For an equivalent function for join point names, use 'instanceOf(joinPointName)'",
          "children": [
            {
              "type": "boolean",
              "name": "astIsInstance"
            },
            {
              "type": "String",
              "name": "className"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the Java class of this node, which is similar to the equivalent node in Clang AST",
          "children": [
            {
              "type": "String",
              "name": "astName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, considering null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "astNumChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "astParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The bit width of the type returned by this join point, in relation to the definitions of its Translation Unit, or undefined if there is no type or bitwidth defined, or if the join point is not in a TranslationUnit",
          "children": [
            {
              "type": "Integer",
              "name": "bitWidth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String list of the names of the join points that form a path from the root to this node",
          "children": [
            {
              "type": "String[]",
              "name": "chain"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the joinpoint chain",
          "children": [
            {
              "type": "joinpoint",
              "name": "chainAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "child"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "children"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the code represented by this node",
          "children": [
            {
              "type": "String",
              "name": "code"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "column"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the given node is a descendant of this node",
          "children": [
            {
              "type": "Boolean",
              "name": "contains"
            },
            {
              "type": "joinpoint",
              "name": "jp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "currentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "JS object associated with this node, containing parsed data of #pragma clava data when the node can be a target of pragmas. This is a special object, managed internally, and cannot be reassigned, to change its contents requires using key-value pairs. If the node can be the target of a pragma, the information stored in this object is persisted between rebuilds.",
          "children": [
            {
              "type": "Object",
              "name": "data"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the depth of this join point in the AST. If it is the root join point returns 0, if it is a child of the root node returns 1, etc.",
          "children": [
            {
              "type": "Integer",
              "name": "depth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves all descendants of the join point",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type, including the node itself",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendantsAndSelf"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endColumn"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endLine"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the file where the code of this node is located, if available",
          "children": [
            {
              "type": "String",
              "name": "filename"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the complete path to the file where the code of this node comes from",
          "children": [
            {
              "type": "String",
              "name": "filepath"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the first child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks in the descendants for the first node of the given type",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstJp"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use 'userField' instead]",
          "children": [
            {
              "type": "Object",
              "name": "getUserField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The value associated with the given property key",
          "children": [
            {
              "type": "Object",
              "name": "getValue"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use hasParent instead]",
          "children": [
            {
              "type": "boolean",
              "name": "hasAstParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the node has children, false otherwise",
          "children": [
            {
              "type": "Boolean",
              "name": "hasChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the given join point or AST node is the same (== test) as the current join point AST node",
          "children": [
            {
              "type": "Boolean",
              "name": "hasNode"
            },
            {
              "type": "Object",
              "name": "nodeOrJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this node has a parent",
          "children": [
            {
              "type": "boolean",
              "name": "hasParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point has a type",
          "children": [
            {
              "type": "Boolean",
              "name": "hasType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns comments that are not explicitly in the AST, but embedded in other nodes",
          "children": [
            {
              "type": "comment[]",
              "name": "inlineComments"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this is a Cilk node (i.e., cilk_spawn, cilk_sync or cilk_for)",
          "children": [
            {
              "type": "Boolean",
              "name": "isCilk"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is part of a system header file",
          "children": [
            {
              "type": "Boolean",
              "name": "isInSystemHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a header (e.g., if condition, for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a loop header (e.g., for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideLoopHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if any descendant or the node itself was defined as a macro",
          "children": [
            {
              "type": "Boolean",
              "name": "isMacro"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the full Java class name of the type of the Java field with the provided name",
          "children": [
            {
              "type": "String",
              "name": "javaFieldType"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'keys' instead, together with 'getValue'] The names of the Java fields of this node. Can be used as key of the attribute 'javaValue'",
          "children": [
            {
              "type": "String[]",
              "name": "javaFields"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'getValue' instead, with the names returned by the attribute 'keys'] Returns the value associated with the provided Java field name",
          "children": [
            {
              "type": "Object",
              "name": "javaValue"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use joinPointType instead (uppercase P)]",
          "children": [
            {
              "type": "String",
              "name": "joinpointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Id that is based on the position of the node in the code, and should remain stable between compilations (warning: only a few nodes - file, function, loop - currently support it)",
          "children": [
            {
              "type": "String",
              "name": "jpId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Java Class instance with the type of the given key",
          "children": [
            {
              "type": "Object",
              "name": "keyType"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A list of the properties currently supported by this node. Can be used as parameter of the attribute 'getValue'",
          "children": [
            {
              "type": "String[]",
              "name": "keys"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[HACK: .descendants(type) does not work in .lara files, after GraalVM update] Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "laraDescendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the last child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "lastChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that came before this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "leftJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "line"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A string with information about the file and code position of this node, if available",
          "children": [
            {
              "type": "String",
              "name": "location"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, ignoring null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "numChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope that is a parent of the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The pragmas associated with this node",
          "children": [
            {
              "type": "pragma[]",
              "name": "pragmas"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that comes after this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "rightJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the 'program' joinpoint",
          "children": [
            {
              "type": "joinpoint",
              "name": "root"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the nodes of the scope of the current join point. If this node has a body (e.g., loop, function) corresponds to the children of the body. Otherwise, returns an empty array",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "scopeNodes"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that came before this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsLeft"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that come after this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsRight"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Converts this join point to a statement, or returns undefined if it was not possible",
          "children": [
            {
              "type": "statement",
              "name": "stmt"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "type",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrives values that have been associated to nodes of the AST with 'setUserField'",
          "children": [
            {
              "type": "Object",
              "name": "userField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a String with the type of the join point",
          "children": [
            {
              "type": "String",
              "name": "joinPointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the current join point is an instance of the given type",
          "children": [
            {
              "type": "Boolean",
              "name": "instanceOf"
            },
            {
              "type": "String",
              "name": "name"
            }
          ]
        },
        {
          "type": "select",
          "clazz": "expression",
          "alias": "expr"
        },
        {
          "type": "select",
          "clazz": "expression",
          "alias": "childExpr"
        },
        {
          "type": "select",
          "clazz": "call",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "call",
          "alias": "stmtCall"
        },
        {
          "type": "select",
          "clazz": "memberCall",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "memberAccess",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "arrayAccess",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "vardecl",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "varref",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "op",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "binaryOp",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "unaryOp",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "newExpr",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "deleteExpr",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "cilkSpawn",
          "alias": ""
        },
        {
          "type": "action",
          "tooltip": "sets the label of the label statement",
          "children": [
            {
              "type": "void",
              "name": "setDecl"
            },
            {
              "type": "labelDecl",
              "name": "label",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "insert"
            },
            {
              "type": "[before| after| replace]",
              "name": "position",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "def"
            },
            {
              "type": "String",
              "name": "attribute",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, but not of the nodes in its fields",
          "children": [
            {
              "type": "joinpoint",
              "name": "copy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Copies all enumerable own properties from the source object to the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataAssign"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Clears all properties from the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataClear"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, including the nodes in their fields (only the first level of field nodes, this function is not recursive)",
          "children": [
            {
              "type": "joinpoint",
              "name": "deepCopy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the node associated to this joinpoint from the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "detach"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point after this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point before this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Adds a message that will be printed to the user after weaving finishes. Identical messages are removed",
          "children": [
            {
              "type": "void",
              "name": "messageToUser"
            },
            {
              "type": "String",
              "name": "message",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the children of this node",
          "children": [
            {
              "type": "void",
              "name": "removeChildren"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this node with the given node",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of join points",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of strings",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWithStrings"
            },
            {
              "type": "String[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Setting data directly is not supported, this action just emits a warning and does nothing",
          "children": [
            {
              "type": "void",
              "name": "setData"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the first child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setFirstChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String[]",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the last child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setLastChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the type of a node, if it has a type",
          "children": [
            {
              "type": "void",
              "name": "setType"
            },
            {
              "type": "type",
              "name": "type",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Associates arbitrary values to nodes of the AST",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "String",
              "name": "fieldName",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a map",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "Map",
              "name": "fieldNameAndValue",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the value associated with the given property key",
          "children": [
            {
              "type": "joinpoint",
              "name": "setValue"
            },
            {
              "type": "String",
              "name": "key",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "suffix",
              "defaultValue": ""
            }
          ]
        }
      ]
    },
    {
      "type": "joinpoint",
      "name": "literal",
      "extends": "expression",
      "children": [
        {
          "type": "attribute",
          "tooltip": "a 'decl' join point that represents the declaration associated with this expression, or undefined if there is none",
          "children": [
            {
              "type": "decl",
              "name": "decl"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "returns a cast joinpoint if this expression has an associated implicit cast, undefined otherwise",
          "children": [
            {
              "type": "cast",
              "name": "implicitCast"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the expression is part of an argument of a function call",
          "children": [
            {
              "type": "Boolean",
              "name": "isFunctionArgument"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "[read| write| readwrite]",
              "name": "use"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "vardecl",
              "name": "vardecl"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "attributes"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "selects"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "actions"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "ancestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with a dump of the AST representation starting from this node. This representation corresponds to the internal Java representation of the ClavaAst, where the node names correspond to Java classes. To get an equivalent representation with join point names, use the attribute 'dump'",
          "children": [
            {
              "type": "String",
              "name": "ast"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor AST name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "astAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, considering null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "astChild"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, considering null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "astChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String that uniquely identifies this node",
          "children": [
            {
              "type": "String",
              "name": "astId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if this node is a Java instance of the given name, which corresponds to a simple Java class name of an AST node. For an equivalent function for join point names, use 'instanceOf(joinPointName)'",
          "children": [
            {
              "type": "boolean",
              "name": "astIsInstance"
            },
            {
              "type": "String",
              "name": "className"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the Java class of this node, which is similar to the equivalent node in Clang AST",
          "children": [
            {
              "type": "String",
              "name": "astName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, considering null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "astNumChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "astParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The bit width of the type returned by this join point, in relation to the definitions of its Translation Unit, or undefined if there is no type or bitwidth defined, or if the join point is not in a TranslationUnit",
          "children": [
            {
              "type": "Integer",
              "name": "bitWidth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String list of the names of the join points that form a path from the root to this node",
          "children": [
            {
              "type": "String[]",
              "name": "chain"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the joinpoint chain",
          "children": [
            {
              "type": "joinpoint",
              "name": "chainAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "child"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "children"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the code represented by this node",
          "children": [
            {
              "type": "String",
              "name": "code"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "column"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the given node is a descendant of this node",
          "children": [
            {
              "type": "Boolean",
              "name": "contains"
            },
            {
              "type": "joinpoint",
              "name": "jp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "currentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "JS object associated with this node, containing parsed data of #pragma clava data when the node can be a target of pragmas. This is a special object, managed internally, and cannot be reassigned, to change its contents requires using key-value pairs. If the node can be the target of a pragma, the information stored in this object is persisted between rebuilds.",
          "children": [
            {
              "type": "Object",
              "name": "data"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the depth of this join point in the AST. If it is the root join point returns 0, if it is a child of the root node returns 1, etc.",
          "children": [
            {
              "type": "Integer",
              "name": "depth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves all descendants of the join point",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type, including the node itself",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendantsAndSelf"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endColumn"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endLine"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the file where the code of this node is located, if available",
          "children": [
            {
              "type": "String",
              "name": "filename"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the complete path to the file where the code of this node comes from",
          "children": [
            {
              "type": "String",
              "name": "filepath"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the first child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks in the descendants for the first node of the given type",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstJp"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use 'userField' instead]",
          "children": [
            {
              "type": "Object",
              "name": "getUserField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The value associated with the given property key",
          "children": [
            {
              "type": "Object",
              "name": "getValue"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use hasParent instead]",
          "children": [
            {
              "type": "boolean",
              "name": "hasAstParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the node has children, false otherwise",
          "children": [
            {
              "type": "Boolean",
              "name": "hasChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the given join point or AST node is the same (== test) as the current join point AST node",
          "children": [
            {
              "type": "Boolean",
              "name": "hasNode"
            },
            {
              "type": "Object",
              "name": "nodeOrJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this node has a parent",
          "children": [
            {
              "type": "boolean",
              "name": "hasParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point has a type",
          "children": [
            {
              "type": "Boolean",
              "name": "hasType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns comments that are not explicitly in the AST, but embedded in other nodes",
          "children": [
            {
              "type": "comment[]",
              "name": "inlineComments"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this is a Cilk node (i.e., cilk_spawn, cilk_sync or cilk_for)",
          "children": [
            {
              "type": "Boolean",
              "name": "isCilk"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is part of a system header file",
          "children": [
            {
              "type": "Boolean",
              "name": "isInSystemHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a header (e.g., if condition, for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a loop header (e.g., for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideLoopHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if any descendant or the node itself was defined as a macro",
          "children": [
            {
              "type": "Boolean",
              "name": "isMacro"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the full Java class name of the type of the Java field with the provided name",
          "children": [
            {
              "type": "String",
              "name": "javaFieldType"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'keys' instead, together with 'getValue'] The names of the Java fields of this node. Can be used as key of the attribute 'javaValue'",
          "children": [
            {
              "type": "String[]",
              "name": "javaFields"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'getValue' instead, with the names returned by the attribute 'keys'] Returns the value associated with the provided Java field name",
          "children": [
            {
              "type": "Object",
              "name": "javaValue"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use joinPointType instead (uppercase P)]",
          "children": [
            {
              "type": "String",
              "name": "joinpointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Id that is based on the position of the node in the code, and should remain stable between compilations (warning: only a few nodes - file, function, loop - currently support it)",
          "children": [
            {
              "type": "String",
              "name": "jpId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Java Class instance with the type of the given key",
          "children": [
            {
              "type": "Object",
              "name": "keyType"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A list of the properties currently supported by this node. Can be used as parameter of the attribute 'getValue'",
          "children": [
            {
              "type": "String[]",
              "name": "keys"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[HACK: .descendants(type) does not work in .lara files, after GraalVM update] Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "laraDescendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the last child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "lastChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that came before this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "leftJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "line"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A string with information about the file and code position of this node, if available",
          "children": [
            {
              "type": "String",
              "name": "location"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, ignoring null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "numChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope that is a parent of the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The pragmas associated with this node",
          "children": [
            {
              "type": "pragma[]",
              "name": "pragmas"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that comes after this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "rightJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the 'program' joinpoint",
          "children": [
            {
              "type": "joinpoint",
              "name": "root"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the nodes of the scope of the current join point. If this node has a body (e.g., loop, function) corresponds to the children of the body. Otherwise, returns an empty array",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "scopeNodes"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that came before this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsLeft"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that come after this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsRight"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Converts this join point to a statement, or returns undefined if it was not possible",
          "children": [
            {
              "type": "statement",
              "name": "stmt"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "type",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrives values that have been associated to nodes of the AST with 'setUserField'",
          "children": [
            {
              "type": "Object",
              "name": "userField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a String with the type of the join point",
          "children": [
            {
              "type": "String",
              "name": "joinPointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the current join point is an instance of the given type",
          "children": [
            {
              "type": "Boolean",
              "name": "instanceOf"
            },
            {
              "type": "String",
              "name": "name"
            }
          ]
        },
        {
          "type": "select",
          "clazz": "vardecl",
          "alias": ""
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "insert"
            },
            {
              "type": "[before| after| replace]",
              "name": "position",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "def"
            },
            {
              "type": "String",
              "name": "attribute",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, but not of the nodes in its fields",
          "children": [
            {
              "type": "joinpoint",
              "name": "copy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Copies all enumerable own properties from the source object to the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataAssign"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Clears all properties from the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataClear"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, including the nodes in their fields (only the first level of field nodes, this function is not recursive)",
          "children": [
            {
              "type": "joinpoint",
              "name": "deepCopy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the node associated to this joinpoint from the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "detach"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point after this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point before this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Adds a message that will be printed to the user after weaving finishes. Identical messages are removed",
          "children": [
            {
              "type": "void",
              "name": "messageToUser"
            },
            {
              "type": "String",
              "name": "message",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the children of this node",
          "children": [
            {
              "type": "void",
              "name": "removeChildren"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this node with the given node",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of join points",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of strings",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWithStrings"
            },
            {
              "type": "String[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Setting data directly is not supported, this action just emits a warning and does nothing",
          "children": [
            {
              "type": "void",
              "name": "setData"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the first child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setFirstChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String[]",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the last child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setLastChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the type of a node, if it has a type",
          "children": [
            {
              "type": "void",
              "name": "setType"
            },
            {
              "type": "type",
              "name": "type",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Associates arbitrary values to nodes of the AST",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "String",
              "name": "fieldName",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a map",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "Map",
              "name": "fieldNameAndValue",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the value associated with the given property key",
          "children": [
            {
              "type": "joinpoint",
              "name": "setValue"
            },
            {
              "type": "String",
              "name": "key",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "suffix",
              "defaultValue": ""
            }
          ]
        }
      ]
    },
    {
      "type": "joinpoint",
      "name": "loop",
      "defaultAttr": "kind",
      "extends": "statement",
      "children": [
        {
          "type": "attribute",
          "children": [
            {
              "type": "scope",
              "name": "body"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The statement of the loop condition",
          "children": [
            {
              "type": "statement",
              "name": "cond"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Relation",
              "name": "condRelation"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String",
              "name": "controlVar"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The expression of the last value of the control variable (e.g. 'length' in 'i < length;')",
          "children": [
            {
              "type": "String",
              "name": "endValue"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "True if the condition of the loop in the canonical format, and is one of: <, <=, >, >=",
          "children": [
            {
              "type": "Boolean",
              "name": "hasCondRelation"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Uniquely identifies the loop inside the program",
          "children": [
            {
              "type": "String",
              "name": "id"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The statement of the loop initialization",
          "children": [
            {
              "type": "statement",
              "name": "init"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The expression of the first value of the control variable (e.g. '0' in 'size_t i = 0;')",
          "children": [
            {
              "type": "String",
              "name": "initValue"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isInnermost"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Tests whether the loops are interchangeable. This is a conservative test.",
          "children": [
            {
              "type": "Boolean",
              "name": "isInterchangeable"
            },
            {
              "type": "loop",
              "name": "otherLoop"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isOutermost"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isParallel"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Integer",
              "name": "iterations"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "expression",
              "name": "iterationsExpr"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "[for| while| dowhile| foreach]",
              "name": "kind"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Integer",
              "name": "nestedLevel"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Integer[]",
              "name": "rank"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The statement of the loop step",
          "children": [
            {
              "type": "statement",
              "name": "step"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The expression of the iteration step",
          "children": [
            {
              "type": "String",
              "name": "stepValue"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isFirst"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isLast"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "attributes"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "selects"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "actions"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "ancestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with a dump of the AST representation starting from this node. This representation corresponds to the internal Java representation of the ClavaAst, where the node names correspond to Java classes. To get an equivalent representation with join point names, use the attribute 'dump'",
          "children": [
            {
              "type": "String",
              "name": "ast"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor AST name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "astAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, considering null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "astChild"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, considering null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "astChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String that uniquely identifies this node",
          "children": [
            {
              "type": "String",
              "name": "astId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if this node is a Java instance of the given name, which corresponds to a simple Java class name of an AST node. For an equivalent function for join point names, use 'instanceOf(joinPointName)'",
          "children": [
            {
              "type": "boolean",
              "name": "astIsInstance"
            },
            {
              "type": "String",
              "name": "className"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the Java class of this node, which is similar to the equivalent node in Clang AST",
          "children": [
            {
              "type": "String",
              "name": "astName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, considering null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "astNumChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "astParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The bit width of the type returned by this join point, in relation to the definitions of its Translation Unit, or undefined if there is no type or bitwidth defined, or if the join point is not in a TranslationUnit",
          "children": [
            {
              "type": "Integer",
              "name": "bitWidth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String list of the names of the join points that form a path from the root to this node",
          "children": [
            {
              "type": "String[]",
              "name": "chain"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the joinpoint chain",
          "children": [
            {
              "type": "joinpoint",
              "name": "chainAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "child"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "children"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the code represented by this node",
          "children": [
            {
              "type": "String",
              "name": "code"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "column"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the given node is a descendant of this node",
          "children": [
            {
              "type": "Boolean",
              "name": "contains"
            },
            {
              "type": "joinpoint",
              "name": "jp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "currentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "JS object associated with this node, containing parsed data of #pragma clava data when the node can be a target of pragmas. This is a special object, managed internally, and cannot be reassigned, to change its contents requires using key-value pairs. If the node can be the target of a pragma, the information stored in this object is persisted between rebuilds.",
          "children": [
            {
              "type": "Object",
              "name": "data"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the depth of this join point in the AST. If it is the root join point returns 0, if it is a child of the root node returns 1, etc.",
          "children": [
            {
              "type": "Integer",
              "name": "depth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves all descendants of the join point",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type, including the node itself",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendantsAndSelf"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endColumn"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endLine"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the file where the code of this node is located, if available",
          "children": [
            {
              "type": "String",
              "name": "filename"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the complete path to the file where the code of this node comes from",
          "children": [
            {
              "type": "String",
              "name": "filepath"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the first child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks in the descendants for the first node of the given type",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstJp"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use 'userField' instead]",
          "children": [
            {
              "type": "Object",
              "name": "getUserField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The value associated with the given property key",
          "children": [
            {
              "type": "Object",
              "name": "getValue"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use hasParent instead]",
          "children": [
            {
              "type": "boolean",
              "name": "hasAstParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the node has children, false otherwise",
          "children": [
            {
              "type": "Boolean",
              "name": "hasChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the given join point or AST node is the same (== test) as the current join point AST node",
          "children": [
            {
              "type": "Boolean",
              "name": "hasNode"
            },
            {
              "type": "Object",
              "name": "nodeOrJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this node has a parent",
          "children": [
            {
              "type": "boolean",
              "name": "hasParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point has a type",
          "children": [
            {
              "type": "Boolean",
              "name": "hasType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns comments that are not explicitly in the AST, but embedded in other nodes",
          "children": [
            {
              "type": "comment[]",
              "name": "inlineComments"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this is a Cilk node (i.e., cilk_spawn, cilk_sync or cilk_for)",
          "children": [
            {
              "type": "Boolean",
              "name": "isCilk"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is part of a system header file",
          "children": [
            {
              "type": "Boolean",
              "name": "isInSystemHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a header (e.g., if condition, for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a loop header (e.g., for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideLoopHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if any descendant or the node itself was defined as a macro",
          "children": [
            {
              "type": "Boolean",
              "name": "isMacro"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the full Java class name of the type of the Java field with the provided name",
          "children": [
            {
              "type": "String",
              "name": "javaFieldType"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'keys' instead, together with 'getValue'] The names of the Java fields of this node. Can be used as key of the attribute 'javaValue'",
          "children": [
            {
              "type": "String[]",
              "name": "javaFields"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'getValue' instead, with the names returned by the attribute 'keys'] Returns the value associated with the provided Java field name",
          "children": [
            {
              "type": "Object",
              "name": "javaValue"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use joinPointType instead (uppercase P)]",
          "children": [
            {
              "type": "String",
              "name": "joinpointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Id that is based on the position of the node in the code, and should remain stable between compilations (warning: only a few nodes - file, function, loop - currently support it)",
          "children": [
            {
              "type": "String",
              "name": "jpId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Java Class instance with the type of the given key",
          "children": [
            {
              "type": "Object",
              "name": "keyType"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A list of the properties currently supported by this node. Can be used as parameter of the attribute 'getValue'",
          "children": [
            {
              "type": "String[]",
              "name": "keys"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[HACK: .descendants(type) does not work in .lara files, after GraalVM update] Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "laraDescendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the last child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "lastChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that came before this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "leftJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "line"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A string with information about the file and code position of this node, if available",
          "children": [
            {
              "type": "String",
              "name": "location"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, ignoring null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "numChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope that is a parent of the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The pragmas associated with this node",
          "children": [
            {
              "type": "pragma[]",
              "name": "pragmas"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that comes after this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "rightJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the 'program' joinpoint",
          "children": [
            {
              "type": "joinpoint",
              "name": "root"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the nodes of the scope of the current join point. If this node has a body (e.g., loop, function) corresponds to the children of the body. Otherwise, returns an empty array",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "scopeNodes"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that came before this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsLeft"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that come after this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsRight"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Converts this join point to a statement, or returns undefined if it was not possible",
          "children": [
            {
              "type": "statement",
              "name": "stmt"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "type",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrives values that have been associated to nodes of the AST with 'setUserField'",
          "children": [
            {
              "type": "Object",
              "name": "userField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a String with the type of the join point",
          "children": [
            {
              "type": "String",
              "name": "joinPointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the current join point is an instance of the given type",
          "children": [
            {
              "type": "Boolean",
              "name": "instanceOf"
            },
            {
              "type": "String",
              "name": "name"
            }
          ]
        },
        {
          "type": "select",
          "clazz": "statement",
          "alias": "init"
        },
        {
          "type": "select",
          "clazz": "statement",
          "alias": "cond"
        },
        {
          "type": "select",
          "clazz": "statement",
          "alias": "step"
        },
        {
          "type": "select",
          "clazz": "scope",
          "alias": "body"
        },
        {
          "type": "select",
          "clazz": "expression",
          "alias": "expr"
        },
        {
          "type": "select",
          "clazz": "expression",
          "alias": "childExpr"
        },
        {
          "type": "select",
          "clazz": "call",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "call",
          "alias": "stmtCall"
        },
        {
          "type": "select",
          "clazz": "memberCall",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "memberAccess",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "arrayAccess",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "vardecl",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "varref",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "op",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "binaryOp",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "unaryOp",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "newExpr",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "deleteExpr",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "cilkSpawn",
          "alias": ""
        },
        {
          "type": "action",
          "tooltip": "DEPRECATED: use 'setKind' instead",
          "children": [
            {
              "type": "void",
              "name": "changeKind"
            },
            {
              "type": "String",
              "name": "kind",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Interchanges two for loops, if possible",
          "children": [
            {
              "type": "void",
              "name": "interchange"
            },
            {
              "type": "loop",
              "name": "otherLoop",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the body of the loop",
          "children": [
            {
              "type": "void",
              "name": "setBody"
            },
            {
              "type": "scope",
              "name": "body",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the conditional statement of the loop. Works with loops of kind 'for'",
          "children": [
            {
              "type": "void",
              "name": "setCond"
            },
            {
              "type": "String",
              "name": "condCode",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Changes the operator of a canonical condition, if possible. Supported operators: lt, le, gt, ge",
          "children": [
            {
              "type": "void",
              "name": "setCondRelation"
            },
            {
              "type": "Relation",
              "name": "operator",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Changes the operator of a canonical condition, if possible. Supported operators: <, <=, >, >=",
          "children": [
            {
              "type": "void",
              "name": "setCondRelation"
            },
            {
              "type": "String",
              "name": "operator",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the end value of the loop. Works with loops of kind 'for'",
          "children": [
            {
              "type": "void",
              "name": "setEndValue"
            },
            {
              "type": "String",
              "name": "initCode",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the init statement of the loop",
          "children": [
            {
              "type": "void",
              "name": "setInit"
            },
            {
              "type": "String",
              "name": "initCode",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the init value of the loop. Works with loops of kind 'for'",
          "children": [
            {
              "type": "void",
              "name": "setInitValue"
            },
            {
              "type": "String",
              "name": "initCode",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the attribute 'isParallel' of the loop",
          "children": [
            {
              "type": "void",
              "name": "setIsParallel"
            },
            {
              "type": "Boolean",
              "name": "isParallel",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the kind of the loop",
          "children": [
            {
              "type": "void",
              "name": "setKind"
            },
            {
              "type": "String",
              "name": "kind",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the step statement of the loop. Works with loops of kind 'for'",
          "children": [
            {
              "type": "void",
              "name": "setStep"
            },
            {
              "type": "String",
              "name": "stepCode",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Applies loop tiling to this loop",
          "children": [
            {
              "type": "statement",
              "name": "tile"
            },
            {
              "type": "String",
              "name": "blockSize",
              "defaultValue": ""
            },
            {
              "type": "statement",
              "name": "reference",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Applies loop tiling to this loop.",
          "children": [
            {
              "type": "statement",
              "name": "tile"
            },
            {
              "type": "String",
              "name": "blockSize",
              "defaultValue": ""
            },
            {
              "type": "statement",
              "name": "reference",
              "defaultValue": ""
            },
            {
              "type": "Boolean",
              "name": "useTernary",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "insert"
            },
            {
              "type": "[before| after| replace]",
              "name": "position",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "def"
            },
            {
              "type": "String",
              "name": "attribute",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, but not of the nodes in its fields",
          "children": [
            {
              "type": "joinpoint",
              "name": "copy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Copies all enumerable own properties from the source object to the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataAssign"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Clears all properties from the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataClear"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, including the nodes in their fields (only the first level of field nodes, this function is not recursive)",
          "children": [
            {
              "type": "joinpoint",
              "name": "deepCopy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the node associated to this joinpoint from the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "detach"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point after this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point before this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Adds a message that will be printed to the user after weaving finishes. Identical messages are removed",
          "children": [
            {
              "type": "void",
              "name": "messageToUser"
            },
            {
              "type": "String",
              "name": "message",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the children of this node",
          "children": [
            {
              "type": "void",
              "name": "removeChildren"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this node with the given node",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of join points",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of strings",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWithStrings"
            },
            {
              "type": "String[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Setting data directly is not supported, this action just emits a warning and does nothing",
          "children": [
            {
              "type": "void",
              "name": "setData"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the first child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setFirstChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String[]",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the last child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setLastChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the type of a node, if it has a type",
          "children": [
            {
              "type": "void",
              "name": "setType"
            },
            {
              "type": "type",
              "name": "type",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Associates arbitrary values to nodes of the AST",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "String",
              "name": "fieldName",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a map",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "Map",
              "name": "fieldNameAndValue",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the value associated with the given property key",
          "children": [
            {
              "type": "joinpoint",
              "name": "setValue"
            },
            {
              "type": "String",
              "name": "key",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "suffix",
              "defaultValue": ""
            }
          ]
        }
      ]
    },
    {
      "type": "joinpoint",
      "name": "marker",
      "defaultAttr": "id",
      "extends": "pragma",
      "tooltip": "Special pragma that can be used to mark scopes (e.g., #pragma lara marker loop1)",
      "children": [
        {
          "type": "attribute",
          "tooltip": "A scope, associated with this marker",
          "children": [
            {
              "type": "joinpoint",
              "name": "contents"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String",
              "name": "id"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Everything that is after the name of the pragma",
          "children": [
            {
              "type": "String",
              "name": "content"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the pragma. E.g. for #pragma foo bar, returns 'foo'",
          "children": [
            {
              "type": "String",
              "name": "name"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The first node below the pragma that is not a comment or another pragma. Example of pragma targets are statements and declarations",
          "children": [
            {
              "type": "joinpoint",
              "name": "target"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "All the nodes below the target node, including the target node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "targetNodes"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "All the nodes below the target node, including the target node, up until a pragma with the name given by argument 'endPragma'. If no end pragma is found, returns the same result as if not providing the argument",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "targetNodes"
            },
            {
              "type": "String",
              "name": "endPragma"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "attributes"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "selects"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "actions"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "ancestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with a dump of the AST representation starting from this node. This representation corresponds to the internal Java representation of the ClavaAst, where the node names correspond to Java classes. To get an equivalent representation with join point names, use the attribute 'dump'",
          "children": [
            {
              "type": "String",
              "name": "ast"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor AST name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "astAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, considering null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "astChild"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, considering null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "astChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String that uniquely identifies this node",
          "children": [
            {
              "type": "String",
              "name": "astId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if this node is a Java instance of the given name, which corresponds to a simple Java class name of an AST node. For an equivalent function for join point names, use 'instanceOf(joinPointName)'",
          "children": [
            {
              "type": "boolean",
              "name": "astIsInstance"
            },
            {
              "type": "String",
              "name": "className"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the Java class of this node, which is similar to the equivalent node in Clang AST",
          "children": [
            {
              "type": "String",
              "name": "astName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, considering null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "astNumChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "astParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The bit width of the type returned by this join point, in relation to the definitions of its Translation Unit, or undefined if there is no type or bitwidth defined, or if the join point is not in a TranslationUnit",
          "children": [
            {
              "type": "Integer",
              "name": "bitWidth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String list of the names of the join points that form a path from the root to this node",
          "children": [
            {
              "type": "String[]",
              "name": "chain"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the joinpoint chain",
          "children": [
            {
              "type": "joinpoint",
              "name": "chainAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "child"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "children"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the code represented by this node",
          "children": [
            {
              "type": "String",
              "name": "code"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "column"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the given node is a descendant of this node",
          "children": [
            {
              "type": "Boolean",
              "name": "contains"
            },
            {
              "type": "joinpoint",
              "name": "jp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "currentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "JS object associated with this node, containing parsed data of #pragma clava data when the node can be a target of pragmas. This is a special object, managed internally, and cannot be reassigned, to change its contents requires using key-value pairs. If the node can be the target of a pragma, the information stored in this object is persisted between rebuilds.",
          "children": [
            {
              "type": "Object",
              "name": "data"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the depth of this join point in the AST. If it is the root join point returns 0, if it is a child of the root node returns 1, etc.",
          "children": [
            {
              "type": "Integer",
              "name": "depth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves all descendants of the join point",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type, including the node itself",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendantsAndSelf"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endColumn"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endLine"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the file where the code of this node is located, if available",
          "children": [
            {
              "type": "String",
              "name": "filename"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the complete path to the file where the code of this node comes from",
          "children": [
            {
              "type": "String",
              "name": "filepath"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the first child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks in the descendants for the first node of the given type",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstJp"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use 'userField' instead]",
          "children": [
            {
              "type": "Object",
              "name": "getUserField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The value associated with the given property key",
          "children": [
            {
              "type": "Object",
              "name": "getValue"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use hasParent instead]",
          "children": [
            {
              "type": "boolean",
              "name": "hasAstParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the node has children, false otherwise",
          "children": [
            {
              "type": "Boolean",
              "name": "hasChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the given join point or AST node is the same (== test) as the current join point AST node",
          "children": [
            {
              "type": "Boolean",
              "name": "hasNode"
            },
            {
              "type": "Object",
              "name": "nodeOrJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this node has a parent",
          "children": [
            {
              "type": "boolean",
              "name": "hasParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point has a type",
          "children": [
            {
              "type": "Boolean",
              "name": "hasType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns comments that are not explicitly in the AST, but embedded in other nodes",
          "children": [
            {
              "type": "comment[]",
              "name": "inlineComments"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this is a Cilk node (i.e., cilk_spawn, cilk_sync or cilk_for)",
          "children": [
            {
              "type": "Boolean",
              "name": "isCilk"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is part of a system header file",
          "children": [
            {
              "type": "Boolean",
              "name": "isInSystemHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a header (e.g., if condition, for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a loop header (e.g., for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideLoopHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if any descendant or the node itself was defined as a macro",
          "children": [
            {
              "type": "Boolean",
              "name": "isMacro"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the full Java class name of the type of the Java field with the provided name",
          "children": [
            {
              "type": "String",
              "name": "javaFieldType"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'keys' instead, together with 'getValue'] The names of the Java fields of this node. Can be used as key of the attribute 'javaValue'",
          "children": [
            {
              "type": "String[]",
              "name": "javaFields"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'getValue' instead, with the names returned by the attribute 'keys'] Returns the value associated with the provided Java field name",
          "children": [
            {
              "type": "Object",
              "name": "javaValue"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use joinPointType instead (uppercase P)]",
          "children": [
            {
              "type": "String",
              "name": "joinpointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Id that is based on the position of the node in the code, and should remain stable between compilations (warning: only a few nodes - file, function, loop - currently support it)",
          "children": [
            {
              "type": "String",
              "name": "jpId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Java Class instance with the type of the given key",
          "children": [
            {
              "type": "Object",
              "name": "keyType"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A list of the properties currently supported by this node. Can be used as parameter of the attribute 'getValue'",
          "children": [
            {
              "type": "String[]",
              "name": "keys"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[HACK: .descendants(type) does not work in .lara files, after GraalVM update] Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "laraDescendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the last child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "lastChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that came before this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "leftJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "line"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A string with information about the file and code position of this node, if available",
          "children": [
            {
              "type": "String",
              "name": "location"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, ignoring null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "numChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope that is a parent of the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The pragmas associated with this node",
          "children": [
            {
              "type": "pragma[]",
              "name": "pragmas"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that comes after this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "rightJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the 'program' joinpoint",
          "children": [
            {
              "type": "joinpoint",
              "name": "root"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the nodes of the scope of the current join point. If this node has a body (e.g., loop, function) corresponds to the children of the body. Otherwise, returns an empty array",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "scopeNodes"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that came before this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsLeft"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that come after this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsRight"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Converts this join point to a statement, or returns undefined if it was not possible",
          "children": [
            {
              "type": "statement",
              "name": "stmt"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "type",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrives values that have been associated to nodes of the AST with 'setUserField'",
          "children": [
            {
              "type": "Object",
              "name": "userField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a String with the type of the join point",
          "children": [
            {
              "type": "String",
              "name": "joinPointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the current join point is an instance of the given type",
          "children": [
            {
              "type": "Boolean",
              "name": "instanceOf"
            },
            {
              "type": "String",
              "name": "name"
            }
          ]
        },
        {
          "type": "select",
          "clazz": "scope",
          "alias": "contents"
        },
        {
          "type": "select",
          "clazz": "joinpoint",
          "alias": "target"
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "setContent"
            },
            {
              "type": "String",
              "name": "content",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "setName"
            },
            {
              "type": "String",
              "name": "name",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "insert"
            },
            {
              "type": "[before| after| replace]",
              "name": "position",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "def"
            },
            {
              "type": "String",
              "name": "attribute",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, but not of the nodes in its fields",
          "children": [
            {
              "type": "joinpoint",
              "name": "copy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Copies all enumerable own properties from the source object to the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataAssign"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Clears all properties from the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataClear"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, including the nodes in their fields (only the first level of field nodes, this function is not recursive)",
          "children": [
            {
              "type": "joinpoint",
              "name": "deepCopy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the node associated to this joinpoint from the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "detach"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point after this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point before this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Adds a message that will be printed to the user after weaving finishes. Identical messages are removed",
          "children": [
            {
              "type": "void",
              "name": "messageToUser"
            },
            {
              "type": "String",
              "name": "message",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the children of this node",
          "children": [
            {
              "type": "void",
              "name": "removeChildren"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this node with the given node",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of join points",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of strings",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWithStrings"
            },
            {
              "type": "String[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Setting data directly is not supported, this action just emits a warning and does nothing",
          "children": [
            {
              "type": "void",
              "name": "setData"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the first child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setFirstChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String[]",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the last child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setLastChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the type of a node, if it has a type",
          "children": [
            {
              "type": "void",
              "name": "setType"
            },
            {
              "type": "type",
              "name": "type",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Associates arbitrary values to nodes of the AST",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "String",
              "name": "fieldName",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a map",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "Map",
              "name": "fieldNameAndValue",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the value associated with the given property key",
          "children": [
            {
              "type": "joinpoint",
              "name": "setValue"
            },
            {
              "type": "String",
              "name": "key",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "suffix",
              "defaultValue": ""
            }
          ]
        }
      ]
    },
    {
      "type": "joinpoint",
      "name": "memberAccess",
      "extends": "expression",
      "children": [
        {
          "type": "attribute",
          "tooltip": "expression of the base of this member access",
          "children": [
            {
              "type": "expression",
              "name": "base"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "expression[]",
              "name": "memberChain"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "memberChainNames"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String",
              "name": "name"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a 'decl' join point that represents the declaration associated with this expression, or undefined if there is none",
          "children": [
            {
              "type": "decl",
              "name": "decl"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "returns a cast joinpoint if this expression has an associated implicit cast, undefined otherwise",
          "children": [
            {
              "type": "cast",
              "name": "implicitCast"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the expression is part of an argument of a function call",
          "children": [
            {
              "type": "Boolean",
              "name": "isFunctionArgument"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "[read| write| readwrite]",
              "name": "use"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "vardecl",
              "name": "vardecl"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "attributes"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "selects"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "actions"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "ancestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with a dump of the AST representation starting from this node. This representation corresponds to the internal Java representation of the ClavaAst, where the node names correspond to Java classes. To get an equivalent representation with join point names, use the attribute 'dump'",
          "children": [
            {
              "type": "String",
              "name": "ast"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor AST name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "astAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, considering null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "astChild"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, considering null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "astChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String that uniquely identifies this node",
          "children": [
            {
              "type": "String",
              "name": "astId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if this node is a Java instance of the given name, which corresponds to a simple Java class name of an AST node. For an equivalent function for join point names, use 'instanceOf(joinPointName)'",
          "children": [
            {
              "type": "boolean",
              "name": "astIsInstance"
            },
            {
              "type": "String",
              "name": "className"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the Java class of this node, which is similar to the equivalent node in Clang AST",
          "children": [
            {
              "type": "String",
              "name": "astName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, considering null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "astNumChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "astParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The bit width of the type returned by this join point, in relation to the definitions of its Translation Unit, or undefined if there is no type or bitwidth defined, or if the join point is not in a TranslationUnit",
          "children": [
            {
              "type": "Integer",
              "name": "bitWidth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String list of the names of the join points that form a path from the root to this node",
          "children": [
            {
              "type": "String[]",
              "name": "chain"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the joinpoint chain",
          "children": [
            {
              "type": "joinpoint",
              "name": "chainAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "child"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "children"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the code represented by this node",
          "children": [
            {
              "type": "String",
              "name": "code"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "column"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the given node is a descendant of this node",
          "children": [
            {
              "type": "Boolean",
              "name": "contains"
            },
            {
              "type": "joinpoint",
              "name": "jp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "currentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "JS object associated with this node, containing parsed data of #pragma clava data when the node can be a target of pragmas. This is a special object, managed internally, and cannot be reassigned, to change its contents requires using key-value pairs. If the node can be the target of a pragma, the information stored in this object is persisted between rebuilds.",
          "children": [
            {
              "type": "Object",
              "name": "data"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the depth of this join point in the AST. If it is the root join point returns 0, if it is a child of the root node returns 1, etc.",
          "children": [
            {
              "type": "Integer",
              "name": "depth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves all descendants of the join point",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type, including the node itself",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendantsAndSelf"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endColumn"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endLine"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the file where the code of this node is located, if available",
          "children": [
            {
              "type": "String",
              "name": "filename"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the complete path to the file where the code of this node comes from",
          "children": [
            {
              "type": "String",
              "name": "filepath"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the first child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks in the descendants for the first node of the given type",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstJp"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use 'userField' instead]",
          "children": [
            {
              "type": "Object",
              "name": "getUserField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The value associated with the given property key",
          "children": [
            {
              "type": "Object",
              "name": "getValue"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use hasParent instead]",
          "children": [
            {
              "type": "boolean",
              "name": "hasAstParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the node has children, false otherwise",
          "children": [
            {
              "type": "Boolean",
              "name": "hasChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the given join point or AST node is the same (== test) as the current join point AST node",
          "children": [
            {
              "type": "Boolean",
              "name": "hasNode"
            },
            {
              "type": "Object",
              "name": "nodeOrJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this node has a parent",
          "children": [
            {
              "type": "boolean",
              "name": "hasParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point has a type",
          "children": [
            {
              "type": "Boolean",
              "name": "hasType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns comments that are not explicitly in the AST, but embedded in other nodes",
          "children": [
            {
              "type": "comment[]",
              "name": "inlineComments"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this is a Cilk node (i.e., cilk_spawn, cilk_sync or cilk_for)",
          "children": [
            {
              "type": "Boolean",
              "name": "isCilk"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is part of a system header file",
          "children": [
            {
              "type": "Boolean",
              "name": "isInSystemHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a header (e.g., if condition, for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a loop header (e.g., for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideLoopHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if any descendant or the node itself was defined as a macro",
          "children": [
            {
              "type": "Boolean",
              "name": "isMacro"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the full Java class name of the type of the Java field with the provided name",
          "children": [
            {
              "type": "String",
              "name": "javaFieldType"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'keys' instead, together with 'getValue'] The names of the Java fields of this node. Can be used as key of the attribute 'javaValue'",
          "children": [
            {
              "type": "String[]",
              "name": "javaFields"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'getValue' instead, with the names returned by the attribute 'keys'] Returns the value associated with the provided Java field name",
          "children": [
            {
              "type": "Object",
              "name": "javaValue"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use joinPointType instead (uppercase P)]",
          "children": [
            {
              "type": "String",
              "name": "joinpointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Id that is based on the position of the node in the code, and should remain stable between compilations (warning: only a few nodes - file, function, loop - currently support it)",
          "children": [
            {
              "type": "String",
              "name": "jpId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Java Class instance with the type of the given key",
          "children": [
            {
              "type": "Object",
              "name": "keyType"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A list of the properties currently supported by this node. Can be used as parameter of the attribute 'getValue'",
          "children": [
            {
              "type": "String[]",
              "name": "keys"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[HACK: .descendants(type) does not work in .lara files, after GraalVM update] Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "laraDescendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the last child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "lastChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that came before this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "leftJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "line"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A string with information about the file and code position of this node, if available",
          "children": [
            {
              "type": "String",
              "name": "location"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, ignoring null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "numChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope that is a parent of the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The pragmas associated with this node",
          "children": [
            {
              "type": "pragma[]",
              "name": "pragmas"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that comes after this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "rightJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the 'program' joinpoint",
          "children": [
            {
              "type": "joinpoint",
              "name": "root"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the nodes of the scope of the current join point. If this node has a body (e.g., loop, function) corresponds to the children of the body. Otherwise, returns an empty array",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "scopeNodes"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that came before this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsLeft"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that come after this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsRight"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Converts this join point to a statement, or returns undefined if it was not possible",
          "children": [
            {
              "type": "statement",
              "name": "stmt"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "type",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrives values that have been associated to nodes of the AST with 'setUserField'",
          "children": [
            {
              "type": "Object",
              "name": "userField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a String with the type of the join point",
          "children": [
            {
              "type": "String",
              "name": "joinPointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the current join point is an instance of the given type",
          "children": [
            {
              "type": "Boolean",
              "name": "instanceOf"
            },
            {
              "type": "String",
              "name": "name"
            }
          ]
        },
        {
          "type": "select",
          "clazz": "vardecl",
          "alias": ""
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "insert"
            },
            {
              "type": "[before| after| replace]",
              "name": "position",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "def"
            },
            {
              "type": "String",
              "name": "attribute",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, but not of the nodes in its fields",
          "children": [
            {
              "type": "joinpoint",
              "name": "copy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Copies all enumerable own properties from the source object to the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataAssign"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Clears all properties from the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataClear"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, including the nodes in their fields (only the first level of field nodes, this function is not recursive)",
          "children": [
            {
              "type": "joinpoint",
              "name": "deepCopy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the node associated to this joinpoint from the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "detach"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point after this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point before this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Adds a message that will be printed to the user after weaving finishes. Identical messages are removed",
          "children": [
            {
              "type": "void",
              "name": "messageToUser"
            },
            {
              "type": "String",
              "name": "message",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the children of this node",
          "children": [
            {
              "type": "void",
              "name": "removeChildren"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this node with the given node",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of join points",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of strings",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWithStrings"
            },
            {
              "type": "String[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Setting data directly is not supported, this action just emits a warning and does nothing",
          "children": [
            {
              "type": "void",
              "name": "setData"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the first child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setFirstChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String[]",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the last child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setLastChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the type of a node, if it has a type",
          "children": [
            {
              "type": "void",
              "name": "setType"
            },
            {
              "type": "type",
              "name": "type",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Associates arbitrary values to nodes of the AST",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "String",
              "name": "fieldName",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a map",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "Map",
              "name": "fieldNameAndValue",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the value associated with the given property key",
          "children": [
            {
              "type": "joinpoint",
              "name": "setValue"
            },
            {
              "type": "String",
              "name": "key",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "suffix",
              "defaultValue": ""
            }
          ]
        }
      ]
    },
    {
      "type": "joinpoint",
      "name": "memberCall",
      "defaultAttr": "name",
      "extends": "call",
      "children": [
        {
          "type": "attribute",
          "children": [
            {
              "type": "expression",
              "name": "base"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "expression",
              "name": "rootBase"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "expression",
              "name": "arg"
            },
            {
              "type": "int",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "an alias for 'args'",
          "children": [
            {
              "type": "expression[]",
              "name": "argList"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "an array with the arguments of the call",
          "children": [
            {
              "type": "expression[]",
              "name": "args"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a 'function' join point that represents the function of the call that was found, it can return either an implementation or a function prototype; 'undefined' if no declaration was found",
          "children": [
            {
              "type": "function",
              "name": "declaration"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a 'function' join point that represents the function definition of the call; 'undefined' if no definition was found",
          "children": [
            {
              "type": "function",
              "name": "definition"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a function join point that represents the 'raw' function of the call (e.g. if this is a call to a templated function, returns a declaration representing the template specialization, instead of the original function)",
          "children": [
            {
              "type": "function",
              "name": "directCallee"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a function join point associated with this call. If a definition is present, it is given priority over returning a declaration. If only declarations are present, returns a declaration",
          "children": [
            {
              "type": "function",
              "name": "function"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the function type of the call, which includes the return type and the types of the parameters",
          "children": [
            {
              "type": "functionType",
              "name": "functionType"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "boolean",
              "name": "isMemberAccess"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "boolean",
              "name": "isStmtCall"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "memberAccess",
              "name": "memberAccess"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "memberNames"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String",
              "name": "name"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Integer",
              "name": "numArgs"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the return type of the call",
          "children": [
            {
              "type": "type",
              "name": "returnType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "similar to $function.signature, but if no function decl could be found (e.g., function from system include), returns a signature based on just the name of the function",
          "children": [
            {
              "type": "String",
              "name": "signature"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a 'decl' join point that represents the declaration associated with this expression, or undefined if there is none",
          "children": [
            {
              "type": "decl",
              "name": "decl"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "returns a cast joinpoint if this expression has an associated implicit cast, undefined otherwise",
          "children": [
            {
              "type": "cast",
              "name": "implicitCast"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the expression is part of an argument of a function call",
          "children": [
            {
              "type": "Boolean",
              "name": "isFunctionArgument"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "[read| write| readwrite]",
              "name": "use"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "vardecl",
              "name": "vardecl"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "attributes"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "selects"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "actions"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "ancestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with a dump of the AST representation starting from this node. This representation corresponds to the internal Java representation of the ClavaAst, where the node names correspond to Java classes. To get an equivalent representation with join point names, use the attribute 'dump'",
          "children": [
            {
              "type": "String",
              "name": "ast"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor AST name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "astAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, considering null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "astChild"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, considering null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "astChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String that uniquely identifies this node",
          "children": [
            {
              "type": "String",
              "name": "astId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if this node is a Java instance of the given name, which corresponds to a simple Java class name of an AST node. For an equivalent function for join point names, use 'instanceOf(joinPointName)'",
          "children": [
            {
              "type": "boolean",
              "name": "astIsInstance"
            },
            {
              "type": "String",
              "name": "className"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the Java class of this node, which is similar to the equivalent node in Clang AST",
          "children": [
            {
              "type": "String",
              "name": "astName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, considering null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "astNumChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "astParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The bit width of the type returned by this join point, in relation to the definitions of its Translation Unit, or undefined if there is no type or bitwidth defined, or if the join point is not in a TranslationUnit",
          "children": [
            {
              "type": "Integer",
              "name": "bitWidth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String list of the names of the join points that form a path from the root to this node",
          "children": [
            {
              "type": "String[]",
              "name": "chain"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the joinpoint chain",
          "children": [
            {
              "type": "joinpoint",
              "name": "chainAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "child"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "children"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the code represented by this node",
          "children": [
            {
              "type": "String",
              "name": "code"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "column"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the given node is a descendant of this node",
          "children": [
            {
              "type": "Boolean",
              "name": "contains"
            },
            {
              "type": "joinpoint",
              "name": "jp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "currentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "JS object associated with this node, containing parsed data of #pragma clava data when the node can be a target of pragmas. This is a special object, managed internally, and cannot be reassigned, to change its contents requires using key-value pairs. If the node can be the target of a pragma, the information stored in this object is persisted between rebuilds.",
          "children": [
            {
              "type": "Object",
              "name": "data"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the depth of this join point in the AST. If it is the root join point returns 0, if it is a child of the root node returns 1, etc.",
          "children": [
            {
              "type": "Integer",
              "name": "depth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves all descendants of the join point",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type, including the node itself",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendantsAndSelf"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endColumn"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endLine"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the file where the code of this node is located, if available",
          "children": [
            {
              "type": "String",
              "name": "filename"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the complete path to the file where the code of this node comes from",
          "children": [
            {
              "type": "String",
              "name": "filepath"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the first child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks in the descendants for the first node of the given type",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstJp"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use 'userField' instead]",
          "children": [
            {
              "type": "Object",
              "name": "getUserField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The value associated with the given property key",
          "children": [
            {
              "type": "Object",
              "name": "getValue"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use hasParent instead]",
          "children": [
            {
              "type": "boolean",
              "name": "hasAstParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the node has children, false otherwise",
          "children": [
            {
              "type": "Boolean",
              "name": "hasChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the given join point or AST node is the same (== test) as the current join point AST node",
          "children": [
            {
              "type": "Boolean",
              "name": "hasNode"
            },
            {
              "type": "Object",
              "name": "nodeOrJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this node has a parent",
          "children": [
            {
              "type": "boolean",
              "name": "hasParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point has a type",
          "children": [
            {
              "type": "Boolean",
              "name": "hasType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns comments that are not explicitly in the AST, but embedded in other nodes",
          "children": [
            {
              "type": "comment[]",
              "name": "inlineComments"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this is a Cilk node (i.e., cilk_spawn, cilk_sync or cilk_for)",
          "children": [
            {
              "type": "Boolean",
              "name": "isCilk"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is part of a system header file",
          "children": [
            {
              "type": "Boolean",
              "name": "isInSystemHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a header (e.g., if condition, for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a loop header (e.g., for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideLoopHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if any descendant or the node itself was defined as a macro",
          "children": [
            {
              "type": "Boolean",
              "name": "isMacro"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the full Java class name of the type of the Java field with the provided name",
          "children": [
            {
              "type": "String",
              "name": "javaFieldType"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'keys' instead, together with 'getValue'] The names of the Java fields of this node. Can be used as key of the attribute 'javaValue'",
          "children": [
            {
              "type": "String[]",
              "name": "javaFields"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'getValue' instead, with the names returned by the attribute 'keys'] Returns the value associated with the provided Java field name",
          "children": [
            {
              "type": "Object",
              "name": "javaValue"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use joinPointType instead (uppercase P)]",
          "children": [
            {
              "type": "String",
              "name": "joinpointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Id that is based on the position of the node in the code, and should remain stable between compilations (warning: only a few nodes - file, function, loop - currently support it)",
          "children": [
            {
              "type": "String",
              "name": "jpId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Java Class instance with the type of the given key",
          "children": [
            {
              "type": "Object",
              "name": "keyType"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A list of the properties currently supported by this node. Can be used as parameter of the attribute 'getValue'",
          "children": [
            {
              "type": "String[]",
              "name": "keys"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[HACK: .descendants(type) does not work in .lara files, after GraalVM update] Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "laraDescendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the last child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "lastChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that came before this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "leftJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "line"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A string with information about the file and code position of this node, if available",
          "children": [
            {
              "type": "String",
              "name": "location"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, ignoring null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "numChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope that is a parent of the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The pragmas associated with this node",
          "children": [
            {
              "type": "pragma[]",
              "name": "pragmas"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that comes after this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "rightJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the 'program' joinpoint",
          "children": [
            {
              "type": "joinpoint",
              "name": "root"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the nodes of the scope of the current join point. If this node has a body (e.g., loop, function) corresponds to the children of the body. Otherwise, returns an empty array",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "scopeNodes"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that came before this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsLeft"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that come after this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsRight"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Converts this join point to a statement, or returns undefined if it was not possible",
          "children": [
            {
              "type": "statement",
              "name": "stmt"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "type",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrives values that have been associated to nodes of the AST with 'setUserField'",
          "children": [
            {
              "type": "Object",
              "name": "userField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a String with the type of the join point",
          "children": [
            {
              "type": "String",
              "name": "joinPointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the current join point is an instance of the given type",
          "children": [
            {
              "type": "Boolean",
              "name": "instanceOf"
            },
            {
              "type": "String",
              "name": "name"
            }
          ]
        },
        {
          "type": "select",
          "clazz": "expression",
          "alias": "callee"
        },
        {
          "type": "select",
          "clazz": "expression",
          "alias": "arg"
        },
        {
          "type": "select",
          "clazz": "vardecl",
          "alias": ""
        },
        {
          "type": "action",
          "tooltip": "Adds an argument at the end of the call, creating an expression using the given code and type",
          "children": [
            {
              "type": "void",
              "name": "addArg"
            },
            {
              "type": "String",
              "name": "argCode",
              "defaultValue": ""
            },
            {
              "type": "type",
              "name": "type",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Adds an argument at the end of the call, creating a literal 'type' from the type string",
          "children": [
            {
              "type": "void",
              "name": "addArg"
            },
            {
              "type": "String",
              "name": "arg",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "type",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Adds an argument at the end of the call, creating an expression using a dummy type",
          "children": [
            {
              "type": "void",
              "name": "addArg"
            },
            {
              "type": "String",
              "name": "argCode",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Tries to inline this call",
          "children": [
            {
              "type": "boolean",
              "name": "inline"
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "setArg"
            },
            {
              "type": "Integer",
              "name": "index",
              "defaultValue": ""
            },
            {
              "type": "expression",
              "name": "expr",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "setArgFromString"
            },
            {
              "type": "int",
              "name": "index",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "expr",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Changes the name of the call",
          "children": [
            {
              "type": "void",
              "name": "setName"
            },
            {
              "type": "String",
              "name": "name",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Wraps this call with a possibly new wrapping function",
          "children": [
            {
              "type": "void",
              "name": "wrap"
            },
            {
              "type": "String",
              "name": "name",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "insert"
            },
            {
              "type": "[before| after| replace]",
              "name": "position",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "def"
            },
            {
              "type": "String",
              "name": "attribute",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, but not of the nodes in its fields",
          "children": [
            {
              "type": "joinpoint",
              "name": "copy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Copies all enumerable own properties from the source object to the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataAssign"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Clears all properties from the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataClear"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, including the nodes in their fields (only the first level of field nodes, this function is not recursive)",
          "children": [
            {
              "type": "joinpoint",
              "name": "deepCopy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the node associated to this joinpoint from the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "detach"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point after this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point before this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Adds a message that will be printed to the user after weaving finishes. Identical messages are removed",
          "children": [
            {
              "type": "void",
              "name": "messageToUser"
            },
            {
              "type": "String",
              "name": "message",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the children of this node",
          "children": [
            {
              "type": "void",
              "name": "removeChildren"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this node with the given node",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of join points",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of strings",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWithStrings"
            },
            {
              "type": "String[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Setting data directly is not supported, this action just emits a warning and does nothing",
          "children": [
            {
              "type": "void",
              "name": "setData"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the first child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setFirstChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String[]",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the last child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setLastChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the type of a node, if it has a type",
          "children": [
            {
              "type": "void",
              "name": "setType"
            },
            {
              "type": "type",
              "name": "type",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Associates arbitrary values to nodes of the AST",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "String",
              "name": "fieldName",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a map",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "Map",
              "name": "fieldNameAndValue",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the value associated with the given property key",
          "children": [
            {
              "type": "joinpoint",
              "name": "setValue"
            },
            {
              "type": "String",
              "name": "key",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "suffix",
              "defaultValue": ""
            }
          ]
        }
      ]
    },
    {
      "type": "joinpoint",
      "name": "method",
      "defaultAttr": "name",
      "extends": "function",
      "tooltip": "Represents a C++ class method declaration or definition",
      "children": [
        {
          "type": "attribute",
          "children": [
            {
              "type": "class",
              "name": "record"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "scope",
              "name": "body"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "call[]",
              "name": "calls"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Function join points can either represent declarations or definitions, returns the definition of this function, if present, or the first declaration, if only declarations are present",
          "children": [
            {
              "type": "function",
              "name": "canonical"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String",
              "name": "declaration"
            },
            {
              "type": "Boolean",
              "name": "withReturnType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the first prototype of this function that could be found, or undefined if there is none",
          "children": [
            {
              "type": "function",
              "name": "declarationJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the prototypes of this function that are present in the code. If there are none, returns an empty array",
          "children": [
            {
              "type": "function[]",
              "name": "declarationJps"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the implementation of this function if there is one, or undefined otherwise",
          "children": [
            {
              "type": "function",
              "name": "definitionJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the type of the call, which includes the return type and the types of the parameters",
          "children": [
            {
              "type": "functionType",
              "name": "functionType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: Use .isImplementation instead] True if this particular function join point has a body, false otherwise",
          "children": [
            {
              "type": "Boolean",
              "name": "hasDefinition"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String",
              "name": "id"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if this is the function returned by the 'canonical' attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isCanonical"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isCudaKernel"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isDelete"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this particular function join point is an implementation (i.e. has a body), false otherwise",
          "children": [
            {
              "type": "Boolean",
              "name": "isImplementation"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isInline"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isModulePrivate"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this particular function join point is a prototype (i.e. does not have a body), false otherwise",
          "children": [
            {
              "type": "Boolean",
              "name": "isPrototype"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isPure"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isVirtual"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "paramNames"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "param[]",
              "name": "params"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "type",
              "name": "returnType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a string with the signature of this function (e.g., name of the function, plus the parameters types)",
          "children": [
            {
              "type": "String",
              "name": "signature"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "StorageClass",
              "name": "storageClass"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isPublic"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String",
              "name": "name"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String",
              "name": "qualifiedName"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String",
              "name": "qualifiedPrefix"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The attributes (e.g. Pure, CUDAGlobal) associated to this decl",
          "children": [
            {
              "type": "attribute[]",
              "name": "attrs"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "attributes"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "selects"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "actions"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "ancestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with a dump of the AST representation starting from this node. This representation corresponds to the internal Java representation of the ClavaAst, where the node names correspond to Java classes. To get an equivalent representation with join point names, use the attribute 'dump'",
          "children": [
            {
              "type": "String",
              "name": "ast"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor AST name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "astAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, considering null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "astChild"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, considering null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "astChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String that uniquely identifies this node",
          "children": [
            {
              "type": "String",
              "name": "astId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if this node is a Java instance of the given name, which corresponds to a simple Java class name of an AST node. For an equivalent function for join point names, use 'instanceOf(joinPointName)'",
          "children": [
            {
              "type": "boolean",
              "name": "astIsInstance"
            },
            {
              "type": "String",
              "name": "className"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the Java class of this node, which is similar to the equivalent node in Clang AST",
          "children": [
            {
              "type": "String",
              "name": "astName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, considering null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "astNumChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "astParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The bit width of the type returned by this join point, in relation to the definitions of its Translation Unit, or undefined if there is no type or bitwidth defined, or if the join point is not in a TranslationUnit",
          "children": [
            {
              "type": "Integer",
              "name": "bitWidth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String list of the names of the join points that form a path from the root to this node",
          "children": [
            {
              "type": "String[]",
              "name": "chain"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the joinpoint chain",
          "children": [
            {
              "type": "joinpoint",
              "name": "chainAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "child"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "children"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the code represented by this node",
          "children": [
            {
              "type": "String",
              "name": "code"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "column"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the given node is a descendant of this node",
          "children": [
            {
              "type": "Boolean",
              "name": "contains"
            },
            {
              "type": "joinpoint",
              "name": "jp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "currentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "JS object associated with this node, containing parsed data of #pragma clava data when the node can be a target of pragmas. This is a special object, managed internally, and cannot be reassigned, to change its contents requires using key-value pairs. If the node can be the target of a pragma, the information stored in this object is persisted between rebuilds.",
          "children": [
            {
              "type": "Object",
              "name": "data"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the depth of this join point in the AST. If it is the root join point returns 0, if it is a child of the root node returns 1, etc.",
          "children": [
            {
              "type": "Integer",
              "name": "depth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves all descendants of the join point",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type, including the node itself",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendantsAndSelf"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endColumn"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endLine"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the file where the code of this node is located, if available",
          "children": [
            {
              "type": "String",
              "name": "filename"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the complete path to the file where the code of this node comes from",
          "children": [
            {
              "type": "String",
              "name": "filepath"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the first child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks in the descendants for the first node of the given type",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstJp"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use 'userField' instead]",
          "children": [
            {
              "type": "Object",
              "name": "getUserField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The value associated with the given property key",
          "children": [
            {
              "type": "Object",
              "name": "getValue"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use hasParent instead]",
          "children": [
            {
              "type": "boolean",
              "name": "hasAstParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the node has children, false otherwise",
          "children": [
            {
              "type": "Boolean",
              "name": "hasChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the given join point or AST node is the same (== test) as the current join point AST node",
          "children": [
            {
              "type": "Boolean",
              "name": "hasNode"
            },
            {
              "type": "Object",
              "name": "nodeOrJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this node has a parent",
          "children": [
            {
              "type": "boolean",
              "name": "hasParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point has a type",
          "children": [
            {
              "type": "Boolean",
              "name": "hasType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns comments that are not explicitly in the AST, but embedded in other nodes",
          "children": [
            {
              "type": "comment[]",
              "name": "inlineComments"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this is a Cilk node (i.e., cilk_spawn, cilk_sync or cilk_for)",
          "children": [
            {
              "type": "Boolean",
              "name": "isCilk"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is part of a system header file",
          "children": [
            {
              "type": "Boolean",
              "name": "isInSystemHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a header (e.g., if condition, for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a loop header (e.g., for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideLoopHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if any descendant or the node itself was defined as a macro",
          "children": [
            {
              "type": "Boolean",
              "name": "isMacro"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the full Java class name of the type of the Java field with the provided name",
          "children": [
            {
              "type": "String",
              "name": "javaFieldType"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'keys' instead, together with 'getValue'] The names of the Java fields of this node. Can be used as key of the attribute 'javaValue'",
          "children": [
            {
              "type": "String[]",
              "name": "javaFields"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'getValue' instead, with the names returned by the attribute 'keys'] Returns the value associated with the provided Java field name",
          "children": [
            {
              "type": "Object",
              "name": "javaValue"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use joinPointType instead (uppercase P)]",
          "children": [
            {
              "type": "String",
              "name": "joinpointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Id that is based on the position of the node in the code, and should remain stable between compilations (warning: only a few nodes - file, function, loop - currently support it)",
          "children": [
            {
              "type": "String",
              "name": "jpId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Java Class instance with the type of the given key",
          "children": [
            {
              "type": "Object",
              "name": "keyType"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A list of the properties currently supported by this node. Can be used as parameter of the attribute 'getValue'",
          "children": [
            {
              "type": "String[]",
              "name": "keys"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[HACK: .descendants(type) does not work in .lara files, after GraalVM update] Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "laraDescendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the last child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "lastChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that came before this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "leftJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "line"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A string with information about the file and code position of this node, if available",
          "children": [
            {
              "type": "String",
              "name": "location"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, ignoring null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "numChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope that is a parent of the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The pragmas associated with this node",
          "children": [
            {
              "type": "pragma[]",
              "name": "pragmas"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that comes after this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "rightJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the 'program' joinpoint",
          "children": [
            {
              "type": "joinpoint",
              "name": "root"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the nodes of the scope of the current join point. If this node has a body (e.g., loop, function) corresponds to the children of the body. Otherwise, returns an empty array",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "scopeNodes"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that came before this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsLeft"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that come after this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsRight"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Converts this join point to a statement, or returns undefined if it was not possible",
          "children": [
            {
              "type": "statement",
              "name": "stmt"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "type",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrives values that have been associated to nodes of the AST with 'setUserField'",
          "children": [
            {
              "type": "Object",
              "name": "userField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a String with the type of the join point",
          "children": [
            {
              "type": "String",
              "name": "joinPointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the current join point is an instance of the given type",
          "children": [
            {
              "type": "Boolean",
              "name": "instanceOf"
            },
            {
              "type": "String",
              "name": "name"
            }
          ]
        },
        {
          "type": "select",
          "clazz": "body",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "param",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "decl",
          "alias": ""
        },
        {
          "type": "action",
          "tooltip": "Removes the of the method",
          "children": [
            {
              "type": "void",
              "name": "removeRecord"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Adds a new parameter to the function",
          "children": [
            {
              "type": "void",
              "name": "addParam"
            },
            {
              "type": "String",
              "name": "param",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Adds a new parameter to the function",
          "children": [
            {
              "type": "void",
              "name": "addParam"
            },
            {
              "type": "param",
              "name": "param",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Adds a new parameter to the function",
          "children": [
            {
              "type": "void",
              "name": "addParam"
            },
            {
              "type": "String",
              "name": "name",
              "defaultValue": ""
            },
            {
              "type": "type",
              "name": "type",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Clones this function assigning it a new name, inserts the cloned function after the original function. If the name is the same and the original method, automatically removes the cloned method from the class",
          "children": [
            {
              "type": "function",
              "name": "clone"
            },
            {
              "type": "String",
              "name": "newName",
              "defaultValue": ""
            },
            {
              "type": "Boolean",
              "name": "insert",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which inserts the cloned function by default",
          "children": [
            {
              "type": "function",
              "name": "clone"
            },
            {
              "type": "String",
              "name": "newName",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Generates a clone of the provided function on a new file (with a weaver-generated name).",
          "children": [
            {
              "type": "function",
              "name": "cloneOnFile"
            },
            {
              "type": "String",
              "name": "newName",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Generates a clone of the provided function on a new file (with the provided name).",
          "children": [
            {
              "type": "function",
              "name": "cloneOnFile"
            },
            {
              "type": "String",
              "name": "newName",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "fileName",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Generates a clone of the provided function on a new file (with the provided join point).",
          "children": [
            {
              "type": "function",
              "name": "cloneOnFile"
            },
            {
              "type": "String",
              "name": "newName",
              "defaultValue": ""
            },
            {
              "type": "file",
              "name": "fileName",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the joinpoint before the return points of the function (return statements and implicitly, at the end of the function). Returns the last inserted node",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertReturn"
            },
            {
              "type": "joinpoint",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts code as a literal statement before the return points of the function (return statements and implicitly, at the end of the function). Returns the last inserted node",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertReturn"
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Creates a new call to this function",
          "children": [
            {
              "type": "call",
              "name": "newCall"
            },
            {
              "type": "joinpoint[]",
              "name": "args",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the body of the function",
          "children": [
            {
              "type": "void",
              "name": "setBody"
            },
            {
              "type": "scope",
              "name": "body",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the type of the function",
          "children": [
            {
              "type": "void",
              "name": "setFunctionType"
            },
            {
              "type": "functionType",
              "name": "functionType",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the parameter of the function at the given position",
          "children": [
            {
              "type": "void",
              "name": "setParam"
            },
            {
              "type": "Integer",
              "name": "index",
              "defaultValue": ""
            },
            {
              "type": "param",
              "name": "param",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the parameter of the function at the given position (overload that accepts a String)",
          "children": [
            {
              "type": "void",
              "name": "setParam"
            },
            {
              "type": "Integer",
              "name": "index",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "param",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the parameter of the function at the given position (overload that accepts a String and a Type)",
          "children": [
            {
              "type": "void",
              "name": "setParam"
            },
            {
              "type": "Integer",
              "name": "index",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "name",
              "defaultValue": ""
            },
            {
              "type": "type",
              "name": "type",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the type of a parameter of the function",
          "children": [
            {
              "type": "void",
              "name": "setParamType"
            },
            {
              "type": "Integer",
              "name": "index",
              "defaultValue": ""
            },
            {
              "type": "type",
              "name": "newType",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the parameters of the function",
          "children": [
            {
              "type": "void",
              "name": "setParams"
            },
            {
              "type": "param[]",
              "name": "params",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload that accepts strings that represent type-varname pairs (e.g., int param1)",
          "children": [
            {
              "type": "void",
              "name": "setParamsFromStrings"
            },
            {
              "type": "String[]",
              "name": "params",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the return type of the function",
          "children": [
            {
              "type": "void",
              "name": "setReturnType"
            },
            {
              "type": "type",
              "name": "returnType",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the name of this namedDecl",
          "children": [
            {
              "type": "void",
              "name": "setName"
            },
            {
              "type": "String",
              "name": "name",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the qualified name of this namedDecl (changes both the name and qualified prefix)",
          "children": [
            {
              "type": "void",
              "name": "setQualifiedName"
            },
            {
              "type": "String",
              "name": "name",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the qualified prefix of this namedDecl",
          "children": [
            {
              "type": "void",
              "name": "setQualifiedPrefix"
            },
            {
              "type": "String",
              "name": "qualifiedPrefix",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "insert"
            },
            {
              "type": "[before| after| replace]",
              "name": "position",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "def"
            },
            {
              "type": "String",
              "name": "attribute",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, but not of the nodes in its fields",
          "children": [
            {
              "type": "joinpoint",
              "name": "copy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Copies all enumerable own properties from the source object to the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataAssign"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Clears all properties from the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataClear"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, including the nodes in their fields (only the first level of field nodes, this function is not recursive)",
          "children": [
            {
              "type": "joinpoint",
              "name": "deepCopy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the node associated to this joinpoint from the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "detach"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point after this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point before this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Adds a message that will be printed to the user after weaving finishes. Identical messages are removed",
          "children": [
            {
              "type": "void",
              "name": "messageToUser"
            },
            {
              "type": "String",
              "name": "message",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the children of this node",
          "children": [
            {
              "type": "void",
              "name": "removeChildren"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this node with the given node",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of join points",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of strings",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWithStrings"
            },
            {
              "type": "String[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Setting data directly is not supported, this action just emits a warning and does nothing",
          "children": [
            {
              "type": "void",
              "name": "setData"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the first child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setFirstChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String[]",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the last child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setLastChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the type of a node, if it has a type",
          "children": [
            {
              "type": "void",
              "name": "setType"
            },
            {
              "type": "type",
              "name": "type",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Associates arbitrary values to nodes of the AST",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "String",
              "name": "fieldName",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a map",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "Map",
              "name": "fieldNameAndValue",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the value associated with the given property key",
          "children": [
            {
              "type": "joinpoint",
              "name": "setValue"
            },
            {
              "type": "String",
              "name": "key",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "suffix",
              "defaultValue": ""
            }
          ]
        }
      ]
    },
    {
      "type": "joinpoint",
      "name": "namedDecl",
      "defaultAttr": "name",
      "extends": "decl",
      "tooltip": "Represents a decl with a name",
      "children": [
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isPublic"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String",
              "name": "name"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String",
              "name": "qualifiedName"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String",
              "name": "qualifiedPrefix"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The attributes (e.g. Pure, CUDAGlobal) associated to this decl",
          "children": [
            {
              "type": "attribute[]",
              "name": "attrs"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "attributes"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "selects"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "actions"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "ancestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with a dump of the AST representation starting from this node. This representation corresponds to the internal Java representation of the ClavaAst, where the node names correspond to Java classes. To get an equivalent representation with join point names, use the attribute 'dump'",
          "children": [
            {
              "type": "String",
              "name": "ast"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor AST name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "astAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, considering null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "astChild"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, considering null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "astChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String that uniquely identifies this node",
          "children": [
            {
              "type": "String",
              "name": "astId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if this node is a Java instance of the given name, which corresponds to a simple Java class name of an AST node. For an equivalent function for join point names, use 'instanceOf(joinPointName)'",
          "children": [
            {
              "type": "boolean",
              "name": "astIsInstance"
            },
            {
              "type": "String",
              "name": "className"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the Java class of this node, which is similar to the equivalent node in Clang AST",
          "children": [
            {
              "type": "String",
              "name": "astName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, considering null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "astNumChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "astParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The bit width of the type returned by this join point, in relation to the definitions of its Translation Unit, or undefined if there is no type or bitwidth defined, or if the join point is not in a TranslationUnit",
          "children": [
            {
              "type": "Integer",
              "name": "bitWidth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String list of the names of the join points that form a path from the root to this node",
          "children": [
            {
              "type": "String[]",
              "name": "chain"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the joinpoint chain",
          "children": [
            {
              "type": "joinpoint",
              "name": "chainAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "child"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "children"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the code represented by this node",
          "children": [
            {
              "type": "String",
              "name": "code"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "column"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the given node is a descendant of this node",
          "children": [
            {
              "type": "Boolean",
              "name": "contains"
            },
            {
              "type": "joinpoint",
              "name": "jp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "currentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "JS object associated with this node, containing parsed data of #pragma clava data when the node can be a target of pragmas. This is a special object, managed internally, and cannot be reassigned, to change its contents requires using key-value pairs. If the node can be the target of a pragma, the information stored in this object is persisted between rebuilds.",
          "children": [
            {
              "type": "Object",
              "name": "data"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the depth of this join point in the AST. If it is the root join point returns 0, if it is a child of the root node returns 1, etc.",
          "children": [
            {
              "type": "Integer",
              "name": "depth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves all descendants of the join point",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type, including the node itself",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendantsAndSelf"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endColumn"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endLine"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the file where the code of this node is located, if available",
          "children": [
            {
              "type": "String",
              "name": "filename"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the complete path to the file where the code of this node comes from",
          "children": [
            {
              "type": "String",
              "name": "filepath"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the first child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks in the descendants for the first node of the given type",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstJp"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use 'userField' instead]",
          "children": [
            {
              "type": "Object",
              "name": "getUserField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The value associated with the given property key",
          "children": [
            {
              "type": "Object",
              "name": "getValue"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use hasParent instead]",
          "children": [
            {
              "type": "boolean",
              "name": "hasAstParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the node has children, false otherwise",
          "children": [
            {
              "type": "Boolean",
              "name": "hasChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the given join point or AST node is the same (== test) as the current join point AST node",
          "children": [
            {
              "type": "Boolean",
              "name": "hasNode"
            },
            {
              "type": "Object",
              "name": "nodeOrJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this node has a parent",
          "children": [
            {
              "type": "boolean",
              "name": "hasParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point has a type",
          "children": [
            {
              "type": "Boolean",
              "name": "hasType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns comments that are not explicitly in the AST, but embedded in other nodes",
          "children": [
            {
              "type": "comment[]",
              "name": "inlineComments"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this is a Cilk node (i.e., cilk_spawn, cilk_sync or cilk_for)",
          "children": [
            {
              "type": "Boolean",
              "name": "isCilk"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is part of a system header file",
          "children": [
            {
              "type": "Boolean",
              "name": "isInSystemHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a header (e.g., if condition, for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a loop header (e.g., for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideLoopHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if any descendant or the node itself was defined as a macro",
          "children": [
            {
              "type": "Boolean",
              "name": "isMacro"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the full Java class name of the type of the Java field with the provided name",
          "children": [
            {
              "type": "String",
              "name": "javaFieldType"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'keys' instead, together with 'getValue'] The names of the Java fields of this node. Can be used as key of the attribute 'javaValue'",
          "children": [
            {
              "type": "String[]",
              "name": "javaFields"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'getValue' instead, with the names returned by the attribute 'keys'] Returns the value associated with the provided Java field name",
          "children": [
            {
              "type": "Object",
              "name": "javaValue"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use joinPointType instead (uppercase P)]",
          "children": [
            {
              "type": "String",
              "name": "joinpointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Id that is based on the position of the node in the code, and should remain stable between compilations (warning: only a few nodes - file, function, loop - currently support it)",
          "children": [
            {
              "type": "String",
              "name": "jpId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Java Class instance with the type of the given key",
          "children": [
            {
              "type": "Object",
              "name": "keyType"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A list of the properties currently supported by this node. Can be used as parameter of the attribute 'getValue'",
          "children": [
            {
              "type": "String[]",
              "name": "keys"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[HACK: .descendants(type) does not work in .lara files, after GraalVM update] Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "laraDescendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the last child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "lastChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that came before this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "leftJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "line"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A string with information about the file and code position of this node, if available",
          "children": [
            {
              "type": "String",
              "name": "location"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, ignoring null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "numChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope that is a parent of the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The pragmas associated with this node",
          "children": [
            {
              "type": "pragma[]",
              "name": "pragmas"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that comes after this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "rightJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the 'program' joinpoint",
          "children": [
            {
              "type": "joinpoint",
              "name": "root"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the nodes of the scope of the current join point. If this node has a body (e.g., loop, function) corresponds to the children of the body. Otherwise, returns an empty array",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "scopeNodes"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that came before this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsLeft"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that come after this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsRight"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Converts this join point to a statement, or returns undefined if it was not possible",
          "children": [
            {
              "type": "statement",
              "name": "stmt"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "type",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrives values that have been associated to nodes of the AST with 'setUserField'",
          "children": [
            {
              "type": "Object",
              "name": "userField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a String with the type of the join point",
          "children": [
            {
              "type": "String",
              "name": "joinPointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the current join point is an instance of the given type",
          "children": [
            {
              "type": "Boolean",
              "name": "instanceOf"
            },
            {
              "type": "String",
              "name": "name"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the name of this namedDecl",
          "children": [
            {
              "type": "void",
              "name": "setName"
            },
            {
              "type": "String",
              "name": "name",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the qualified name of this namedDecl (changes both the name and qualified prefix)",
          "children": [
            {
              "type": "void",
              "name": "setQualifiedName"
            },
            {
              "type": "String",
              "name": "name",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the qualified prefix of this namedDecl",
          "children": [
            {
              "type": "void",
              "name": "setQualifiedPrefix"
            },
            {
              "type": "String",
              "name": "qualifiedPrefix",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "insert"
            },
            {
              "type": "[before| after| replace]",
              "name": "position",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "def"
            },
            {
              "type": "String",
              "name": "attribute",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, but not of the nodes in its fields",
          "children": [
            {
              "type": "joinpoint",
              "name": "copy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Copies all enumerable own properties from the source object to the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataAssign"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Clears all properties from the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataClear"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, including the nodes in their fields (only the first level of field nodes, this function is not recursive)",
          "children": [
            {
              "type": "joinpoint",
              "name": "deepCopy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the node associated to this joinpoint from the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "detach"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point after this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point before this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Adds a message that will be printed to the user after weaving finishes. Identical messages are removed",
          "children": [
            {
              "type": "void",
              "name": "messageToUser"
            },
            {
              "type": "String",
              "name": "message",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the children of this node",
          "children": [
            {
              "type": "void",
              "name": "removeChildren"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this node with the given node",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of join points",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of strings",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWithStrings"
            },
            {
              "type": "String[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Setting data directly is not supported, this action just emits a warning and does nothing",
          "children": [
            {
              "type": "void",
              "name": "setData"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the first child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setFirstChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String[]",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the last child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setLastChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the type of a node, if it has a type",
          "children": [
            {
              "type": "void",
              "name": "setType"
            },
            {
              "type": "type",
              "name": "type",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Associates arbitrary values to nodes of the AST",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "String",
              "name": "fieldName",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a map",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "Map",
              "name": "fieldNameAndValue",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the value associated with the given property key",
          "children": [
            {
              "type": "joinpoint",
              "name": "setValue"
            },
            {
              "type": "String",
              "name": "key",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "suffix",
              "defaultValue": ""
            }
          ]
        }
      ]
    },
    {
      "type": "joinpoint",
      "name": "newExpr",
      "extends": "expression",
      "children": [
        {
          "type": "attribute",
          "tooltip": "a 'decl' join point that represents the declaration associated with this expression, or undefined if there is none",
          "children": [
            {
              "type": "decl",
              "name": "decl"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "returns a cast joinpoint if this expression has an associated implicit cast, undefined otherwise",
          "children": [
            {
              "type": "cast",
              "name": "implicitCast"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the expression is part of an argument of a function call",
          "children": [
            {
              "type": "Boolean",
              "name": "isFunctionArgument"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "[read| write| readwrite]",
              "name": "use"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "vardecl",
              "name": "vardecl"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "attributes"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "selects"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "actions"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "ancestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with a dump of the AST representation starting from this node. This representation corresponds to the internal Java representation of the ClavaAst, where the node names correspond to Java classes. To get an equivalent representation with join point names, use the attribute 'dump'",
          "children": [
            {
              "type": "String",
              "name": "ast"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor AST name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "astAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, considering null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "astChild"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, considering null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "astChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String that uniquely identifies this node",
          "children": [
            {
              "type": "String",
              "name": "astId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if this node is a Java instance of the given name, which corresponds to a simple Java class name of an AST node. For an equivalent function for join point names, use 'instanceOf(joinPointName)'",
          "children": [
            {
              "type": "boolean",
              "name": "astIsInstance"
            },
            {
              "type": "String",
              "name": "className"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the Java class of this node, which is similar to the equivalent node in Clang AST",
          "children": [
            {
              "type": "String",
              "name": "astName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, considering null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "astNumChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "astParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The bit width of the type returned by this join point, in relation to the definitions of its Translation Unit, or undefined if there is no type or bitwidth defined, or if the join point is not in a TranslationUnit",
          "children": [
            {
              "type": "Integer",
              "name": "bitWidth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String list of the names of the join points that form a path from the root to this node",
          "children": [
            {
              "type": "String[]",
              "name": "chain"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the joinpoint chain",
          "children": [
            {
              "type": "joinpoint",
              "name": "chainAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "child"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "children"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the code represented by this node",
          "children": [
            {
              "type": "String",
              "name": "code"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "column"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the given node is a descendant of this node",
          "children": [
            {
              "type": "Boolean",
              "name": "contains"
            },
            {
              "type": "joinpoint",
              "name": "jp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "currentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "JS object associated with this node, containing parsed data of #pragma clava data when the node can be a target of pragmas. This is a special object, managed internally, and cannot be reassigned, to change its contents requires using key-value pairs. If the node can be the target of a pragma, the information stored in this object is persisted between rebuilds.",
          "children": [
            {
              "type": "Object",
              "name": "data"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the depth of this join point in the AST. If it is the root join point returns 0, if it is a child of the root node returns 1, etc.",
          "children": [
            {
              "type": "Integer",
              "name": "depth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves all descendants of the join point",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type, including the node itself",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendantsAndSelf"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endColumn"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endLine"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the file where the code of this node is located, if available",
          "children": [
            {
              "type": "String",
              "name": "filename"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the complete path to the file where the code of this node comes from",
          "children": [
            {
              "type": "String",
              "name": "filepath"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the first child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks in the descendants for the first node of the given type",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstJp"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use 'userField' instead]",
          "children": [
            {
              "type": "Object",
              "name": "getUserField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The value associated with the given property key",
          "children": [
            {
              "type": "Object",
              "name": "getValue"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use hasParent instead]",
          "children": [
            {
              "type": "boolean",
              "name": "hasAstParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the node has children, false otherwise",
          "children": [
            {
              "type": "Boolean",
              "name": "hasChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the given join point or AST node is the same (== test) as the current join point AST node",
          "children": [
            {
              "type": "Boolean",
              "name": "hasNode"
            },
            {
              "type": "Object",
              "name": "nodeOrJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this node has a parent",
          "children": [
            {
              "type": "boolean",
              "name": "hasParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point has a type",
          "children": [
            {
              "type": "Boolean",
              "name": "hasType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns comments that are not explicitly in the AST, but embedded in other nodes",
          "children": [
            {
              "type": "comment[]",
              "name": "inlineComments"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this is a Cilk node (i.e., cilk_spawn, cilk_sync or cilk_for)",
          "children": [
            {
              "type": "Boolean",
              "name": "isCilk"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is part of a system header file",
          "children": [
            {
              "type": "Boolean",
              "name": "isInSystemHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a header (e.g., if condition, for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a loop header (e.g., for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideLoopHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if any descendant or the node itself was defined as a macro",
          "children": [
            {
              "type": "Boolean",
              "name": "isMacro"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the full Java class name of the type of the Java field with the provided name",
          "children": [
            {
              "type": "String",
              "name": "javaFieldType"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'keys' instead, together with 'getValue'] The names of the Java fields of this node. Can be used as key of the attribute 'javaValue'",
          "children": [
            {
              "type": "String[]",
              "name": "javaFields"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'getValue' instead, with the names returned by the attribute 'keys'] Returns the value associated with the provided Java field name",
          "children": [
            {
              "type": "Object",
              "name": "javaValue"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use joinPointType instead (uppercase P)]",
          "children": [
            {
              "type": "String",
              "name": "joinpointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Id that is based on the position of the node in the code, and should remain stable between compilations (warning: only a few nodes - file, function, loop - currently support it)",
          "children": [
            {
              "type": "String",
              "name": "jpId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Java Class instance with the type of the given key",
          "children": [
            {
              "type": "Object",
              "name": "keyType"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A list of the properties currently supported by this node. Can be used as parameter of the attribute 'getValue'",
          "children": [
            {
              "type": "String[]",
              "name": "keys"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[HACK: .descendants(type) does not work in .lara files, after GraalVM update] Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "laraDescendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the last child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "lastChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that came before this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "leftJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "line"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A string with information about the file and code position of this node, if available",
          "children": [
            {
              "type": "String",
              "name": "location"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, ignoring null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "numChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope that is a parent of the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The pragmas associated with this node",
          "children": [
            {
              "type": "pragma[]",
              "name": "pragmas"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that comes after this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "rightJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the 'program' joinpoint",
          "children": [
            {
              "type": "joinpoint",
              "name": "root"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the nodes of the scope of the current join point. If this node has a body (e.g., loop, function) corresponds to the children of the body. Otherwise, returns an empty array",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "scopeNodes"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that came before this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsLeft"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that come after this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsRight"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Converts this join point to a statement, or returns undefined if it was not possible",
          "children": [
            {
              "type": "statement",
              "name": "stmt"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "type",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrives values that have been associated to nodes of the AST with 'setUserField'",
          "children": [
            {
              "type": "Object",
              "name": "userField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a String with the type of the join point",
          "children": [
            {
              "type": "String",
              "name": "joinPointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the current join point is an instance of the given type",
          "children": [
            {
              "type": "Boolean",
              "name": "instanceOf"
            },
            {
              "type": "String",
              "name": "name"
            }
          ]
        },
        {
          "type": "select",
          "clazz": "vardecl",
          "alias": ""
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "insert"
            },
            {
              "type": "[before| after| replace]",
              "name": "position",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "def"
            },
            {
              "type": "String",
              "name": "attribute",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, but not of the nodes in its fields",
          "children": [
            {
              "type": "joinpoint",
              "name": "copy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Copies all enumerable own properties from the source object to the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataAssign"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Clears all properties from the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataClear"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, including the nodes in their fields (only the first level of field nodes, this function is not recursive)",
          "children": [
            {
              "type": "joinpoint",
              "name": "deepCopy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the node associated to this joinpoint from the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "detach"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point after this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point before this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Adds a message that will be printed to the user after weaving finishes. Identical messages are removed",
          "children": [
            {
              "type": "void",
              "name": "messageToUser"
            },
            {
              "type": "String",
              "name": "message",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the children of this node",
          "children": [
            {
              "type": "void",
              "name": "removeChildren"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this node with the given node",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of join points",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of strings",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWithStrings"
            },
            {
              "type": "String[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Setting data directly is not supported, this action just emits a warning and does nothing",
          "children": [
            {
              "type": "void",
              "name": "setData"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the first child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setFirstChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String[]",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the last child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setLastChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the type of a node, if it has a type",
          "children": [
            {
              "type": "void",
              "name": "setType"
            },
            {
              "type": "type",
              "name": "type",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Associates arbitrary values to nodes of the AST",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "String",
              "name": "fieldName",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a map",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "Map",
              "name": "fieldNameAndValue",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the value associated with the given property key",
          "children": [
            {
              "type": "joinpoint",
              "name": "setValue"
            },
            {
              "type": "String",
              "name": "key",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "suffix",
              "defaultValue": ""
            }
          ]
        }
      ]
    },
    {
      "type": "joinpoint",
      "name": "omp",
      "defaultAttr": "kind",
      "extends": "pragma",
      "tooltip": "Represents an OpenMP pragma (e.g., #pragma omp parallel)",
      "children": [
        {
          "type": "attribute",
          "tooltip": "The names of the kinds of all clauses in the pragma, or empty array if no clause is defined",
          "children": [
            {
              "type": "String[]",
              "name": "clauseKinds"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "An integer expression, or undefined if no 'collapse' clause is defined",
          "children": [
            {
              "type": "String",
              "name": "collapse"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The variable names of all copyin clauses, or empty array if no copyin clause is defined",
          "children": [
            {
              "type": "String[]",
              "name": "copyin"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "One of 'shared' or 'none', or undefined if no 'default' clause is defined",
          "children": [
            {
              "type": "String",
              "name": "default"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The variable names of all firstprivate clauses, or empty array if no firstprivate clause is defined",
          "children": [
            {
              "type": "String[]",
              "name": "firstprivate"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "True if the directive has at least one clause of the given clause kind, false otherwise",
          "children": [
            {
              "type": "Boolean",
              "name": "hasClause"
            },
            {
              "type": "String",
              "name": "clauseName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "True if it is legal to use the given clause kind in this directive, false otherwise",
          "children": [
            {
              "type": "Boolean",
              "name": "isClauseLegal"
            },
            {
              "type": "String",
              "name": "clauseName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The kind of the directive",
          "children": [
            {
              "type": "String",
              "name": "kind"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The variable names of all lastprivate clauses, or empty array if no lastprivate clause is defined",
          "children": [
            {
              "type": "String[]",
              "name": "lastprivate"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "An integer expression, or undefined if no 'num_threads' clause is defined",
          "children": [
            {
              "type": "String",
              "name": "numThreads"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "An integer expression, or undefined if no 'ordered' clause with a parameter is defined",
          "children": [
            {
              "type": "String",
              "name": "ordered"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The variable names of all private clauses, or empty array if no private clause is defined",
          "children": [
            {
              "type": "String[]",
              "name": "private"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "One of 'master', 'close' or 'spread', or undefined if no 'proc_bind' clause is defined",
          "children": [
            {
              "type": "String",
              "name": "procBind"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The variable names for the given reduction kind, or empty array if no reduction of that kind is defined",
          "children": [
            {
              "type": "String[]",
              "name": "reduction"
            },
            {
              "type": "String",
              "name": "kind"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The reduction kinds in the reductions clauses of the this pragma, or empty array if no reduction is defined",
          "children": [
            {
              "type": "String[]",
              "name": "reductionKinds"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "An integer expression, or undefined if no 'schedule' clause with chunk size is defined",
          "children": [
            {
              "type": "String",
              "name": "scheduleChunkSize"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "One of 'static', 'dynamic', 'guided', 'auto' or 'runtime', or undefined if no 'schedule' clause is defined",
          "children": [
            {
              "type": "String",
              "name": "scheduleKind"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A list with possible values of 'monotonic', 'nonmonotonic' or 'simd', or undefined if no 'schedule' clause with modifiers is defined",
          "children": [
            {
              "type": "String[]",
              "name": "scheduleModifiers"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The variable names of all shared clauses, or empty array if no shared clause is defined",
          "children": [
            {
              "type": "String[]",
              "name": "shared"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Everything that is after the name of the pragma",
          "children": [
            {
              "type": "String",
              "name": "content"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the pragma. E.g. for #pragma foo bar, returns 'foo'",
          "children": [
            {
              "type": "String",
              "name": "name"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The first node below the pragma that is not a comment or another pragma. Example of pragma targets are statements and declarations",
          "children": [
            {
              "type": "joinpoint",
              "name": "target"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "All the nodes below the target node, including the target node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "targetNodes"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "All the nodes below the target node, including the target node, up until a pragma with the name given by argument 'endPragma'. If no end pragma is found, returns the same result as if not providing the argument",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "targetNodes"
            },
            {
              "type": "String",
              "name": "endPragma"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "attributes"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "selects"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "actions"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "ancestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with a dump of the AST representation starting from this node. This representation corresponds to the internal Java representation of the ClavaAst, where the node names correspond to Java classes. To get an equivalent representation with join point names, use the attribute 'dump'",
          "children": [
            {
              "type": "String",
              "name": "ast"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor AST name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "astAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, considering null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "astChild"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, considering null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "astChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String that uniquely identifies this node",
          "children": [
            {
              "type": "String",
              "name": "astId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if this node is a Java instance of the given name, which corresponds to a simple Java class name of an AST node. For an equivalent function for join point names, use 'instanceOf(joinPointName)'",
          "children": [
            {
              "type": "boolean",
              "name": "astIsInstance"
            },
            {
              "type": "String",
              "name": "className"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the Java class of this node, which is similar to the equivalent node in Clang AST",
          "children": [
            {
              "type": "String",
              "name": "astName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, considering null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "astNumChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "astParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The bit width of the type returned by this join point, in relation to the definitions of its Translation Unit, or undefined if there is no type or bitwidth defined, or if the join point is not in a TranslationUnit",
          "children": [
            {
              "type": "Integer",
              "name": "bitWidth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String list of the names of the join points that form a path from the root to this node",
          "children": [
            {
              "type": "String[]",
              "name": "chain"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the joinpoint chain",
          "children": [
            {
              "type": "joinpoint",
              "name": "chainAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "child"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "children"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the code represented by this node",
          "children": [
            {
              "type": "String",
              "name": "code"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "column"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the given node is a descendant of this node",
          "children": [
            {
              "type": "Boolean",
              "name": "contains"
            },
            {
              "type": "joinpoint",
              "name": "jp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "currentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "JS object associated with this node, containing parsed data of #pragma clava data when the node can be a target of pragmas. This is a special object, managed internally, and cannot be reassigned, to change its contents requires using key-value pairs. If the node can be the target of a pragma, the information stored in this object is persisted between rebuilds.",
          "children": [
            {
              "type": "Object",
              "name": "data"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the depth of this join point in the AST. If it is the root join point returns 0, if it is a child of the root node returns 1, etc.",
          "children": [
            {
              "type": "Integer",
              "name": "depth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves all descendants of the join point",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type, including the node itself",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendantsAndSelf"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endColumn"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endLine"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the file where the code of this node is located, if available",
          "children": [
            {
              "type": "String",
              "name": "filename"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the complete path to the file where the code of this node comes from",
          "children": [
            {
              "type": "String",
              "name": "filepath"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the first child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks in the descendants for the first node of the given type",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstJp"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use 'userField' instead]",
          "children": [
            {
              "type": "Object",
              "name": "getUserField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The value associated with the given property key",
          "children": [
            {
              "type": "Object",
              "name": "getValue"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use hasParent instead]",
          "children": [
            {
              "type": "boolean",
              "name": "hasAstParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the node has children, false otherwise",
          "children": [
            {
              "type": "Boolean",
              "name": "hasChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the given join point or AST node is the same (== test) as the current join point AST node",
          "children": [
            {
              "type": "Boolean",
              "name": "hasNode"
            },
            {
              "type": "Object",
              "name": "nodeOrJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this node has a parent",
          "children": [
            {
              "type": "boolean",
              "name": "hasParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point has a type",
          "children": [
            {
              "type": "Boolean",
              "name": "hasType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns comments that are not explicitly in the AST, but embedded in other nodes",
          "children": [
            {
              "type": "comment[]",
              "name": "inlineComments"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this is a Cilk node (i.e., cilk_spawn, cilk_sync or cilk_for)",
          "children": [
            {
              "type": "Boolean",
              "name": "isCilk"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is part of a system header file",
          "children": [
            {
              "type": "Boolean",
              "name": "isInSystemHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a header (e.g., if condition, for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a loop header (e.g., for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideLoopHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if any descendant or the node itself was defined as a macro",
          "children": [
            {
              "type": "Boolean",
              "name": "isMacro"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the full Java class name of the type of the Java field with the provided name",
          "children": [
            {
              "type": "String",
              "name": "javaFieldType"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'keys' instead, together with 'getValue'] The names of the Java fields of this node. Can be used as key of the attribute 'javaValue'",
          "children": [
            {
              "type": "String[]",
              "name": "javaFields"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'getValue' instead, with the names returned by the attribute 'keys'] Returns the value associated with the provided Java field name",
          "children": [
            {
              "type": "Object",
              "name": "javaValue"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use joinPointType instead (uppercase P)]",
          "children": [
            {
              "type": "String",
              "name": "joinpointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Id that is based on the position of the node in the code, and should remain stable between compilations (warning: only a few nodes - file, function, loop - currently support it)",
          "children": [
            {
              "type": "String",
              "name": "jpId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Java Class instance with the type of the given key",
          "children": [
            {
              "type": "Object",
              "name": "keyType"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A list of the properties currently supported by this node. Can be used as parameter of the attribute 'getValue'",
          "children": [
            {
              "type": "String[]",
              "name": "keys"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[HACK: .descendants(type) does not work in .lara files, after GraalVM update] Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "laraDescendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the last child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "lastChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that came before this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "leftJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "line"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A string with information about the file and code position of this node, if available",
          "children": [
            {
              "type": "String",
              "name": "location"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, ignoring null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "numChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope that is a parent of the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The pragmas associated with this node",
          "children": [
            {
              "type": "pragma[]",
              "name": "pragmas"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that comes after this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "rightJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the 'program' joinpoint",
          "children": [
            {
              "type": "joinpoint",
              "name": "root"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the nodes of the scope of the current join point. If this node has a body (e.g., loop, function) corresponds to the children of the body. Otherwise, returns an empty array",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "scopeNodes"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that came before this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsLeft"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that come after this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsRight"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Converts this join point to a statement, or returns undefined if it was not possible",
          "children": [
            {
              "type": "statement",
              "name": "stmt"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "type",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrives values that have been associated to nodes of the AST with 'setUserField'",
          "children": [
            {
              "type": "Object",
              "name": "userField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a String with the type of the join point",
          "children": [
            {
              "type": "String",
              "name": "joinPointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the current join point is an instance of the given type",
          "children": [
            {
              "type": "Boolean",
              "name": "instanceOf"
            },
            {
              "type": "String",
              "name": "name"
            }
          ]
        },
        {
          "type": "select",
          "clazz": "joinpoint",
          "alias": "target"
        },
        {
          "type": "action",
          "tooltip": "Removes any clause of the given kind from the OpenMP pragma",
          "children": [
            {
              "type": "void",
              "name": "removeClause"
            },
            {
              "type": "String",
              "name": "clauseKind",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the value of the collapse clause of an OpenMP pragma",
          "children": [
            {
              "type": "void",
              "name": "setCollapse"
            },
            {
              "type": "String",
              "name": "newExpr",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the value of the collapse clause of an OpenMP pragma",
          "children": [
            {
              "type": "void",
              "name": "setCollapse"
            },
            {
              "type": "Integer",
              "name": "newExpr",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the variables of a copyin clause of an OpenMP pragma",
          "children": [
            {
              "type": "void",
              "name": "setCopyin"
            },
            {
              "type": "String[]",
              "name": "newVariables",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the value of the default clause of an OpenMP pragma",
          "children": [
            {
              "type": "void",
              "name": "setDefault"
            },
            {
              "type": "String",
              "name": "newDefault",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the variables of a firstprivate clause of an OpenMP pragma",
          "children": [
            {
              "type": "void",
              "name": "setFirstprivate"
            },
            {
              "type": "String[]",
              "name": "newVariables",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the directive kind of the OpenMP pragma. Any unsupported clauses will be discarded",
          "children": [
            {
              "type": "void",
              "name": "setKind"
            },
            {
              "type": "String",
              "name": "directiveKind",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the variables of a lastprivate clause of an OpenMP pragma",
          "children": [
            {
              "type": "void",
              "name": "setLastprivate"
            },
            {
              "type": "String[]",
              "name": "newVariables",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the value of the num_threads clause of an OpenMP pragma",
          "children": [
            {
              "type": "void",
              "name": "setNumThreads"
            },
            {
              "type": "String",
              "name": "newExpr",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets an ordered clause without parameters in the OpenMP pragma",
          "children": [
            {
              "type": "void",
              "name": "setOrdered"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the value of the ordered clause of an OpenMP pragma",
          "children": [
            {
              "type": "void",
              "name": "setOrdered"
            },
            {
              "type": "String",
              "name": "newExpr",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the variables of a private clause of an OpenMP pragma",
          "children": [
            {
              "type": "void",
              "name": "setPrivate"
            },
            {
              "type": "String[]",
              "name": "newVariables",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the value of the proc_bind clause of an OpenMP pragma",
          "children": [
            {
              "type": "void",
              "name": "setProcBind"
            },
            {
              "type": "String",
              "name": "newBind",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the variables for a given kind of a reduction clause of an OpenMP pragma",
          "children": [
            {
              "type": "void",
              "name": "setReduction"
            },
            {
              "type": "String",
              "name": "kind",
              "defaultValue": ""
            },
            {
              "type": "String[]",
              "name": "newVariables",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the value of the chunck size in the schedule clause of an OpenMP pragma. Can only be called if there is already a schedule clause in the directive, otherwise throws an exception",
          "children": [
            {
              "type": "void",
              "name": "setScheduleChunkSize"
            },
            {
              "type": "String",
              "name": "chunkSize",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the value of the chunck size in the schedule clause of an OpenMP pragma. Can only be called if there is already a schedule clause in the directive, otherwise throws an exception",
          "children": [
            {
              "type": "void",
              "name": "setScheduleChunkSize"
            },
            {
              "type": "Integer",
              "name": "chunkSize",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the value of the schedule clause of an OpenMP pragma",
          "children": [
            {
              "type": "void",
              "name": "setScheduleKind"
            },
            {
              "type": "String",
              "name": "scheduleKind",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the value of the modifiers in the schedule clause of an OpenMP pragma. Can only be called if there is already a schedule clause in the directive, otherwise throws an exception",
          "children": [
            {
              "type": "void",
              "name": "setScheduleModifiers"
            },
            {
              "type": "String[]",
              "name": "modifiers",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the variables of a shared clause of an OpenMP pragma",
          "children": [
            {
              "type": "void",
              "name": "setShared"
            },
            {
              "type": "String[]",
              "name": "newVariables",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "setContent"
            },
            {
              "type": "String",
              "name": "content",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "setName"
            },
            {
              "type": "String",
              "name": "name",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "insert"
            },
            {
              "type": "[before| after| replace]",
              "name": "position",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "def"
            },
            {
              "type": "String",
              "name": "attribute",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, but not of the nodes in its fields",
          "children": [
            {
              "type": "joinpoint",
              "name": "copy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Copies all enumerable own properties from the source object to the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataAssign"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Clears all properties from the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataClear"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, including the nodes in their fields (only the first level of field nodes, this function is not recursive)",
          "children": [
            {
              "type": "joinpoint",
              "name": "deepCopy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the node associated to this joinpoint from the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "detach"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point after this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point before this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Adds a message that will be printed to the user after weaving finishes. Identical messages are removed",
          "children": [
            {
              "type": "void",
              "name": "messageToUser"
            },
            {
              "type": "String",
              "name": "message",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the children of this node",
          "children": [
            {
              "type": "void",
              "name": "removeChildren"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this node with the given node",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of join points",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of strings",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWithStrings"
            },
            {
              "type": "String[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Setting data directly is not supported, this action just emits a warning and does nothing",
          "children": [
            {
              "type": "void",
              "name": "setData"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the first child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setFirstChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String[]",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the last child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setLastChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the type of a node, if it has a type",
          "children": [
            {
              "type": "void",
              "name": "setType"
            },
            {
              "type": "type",
              "name": "type",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Associates arbitrary values to nodes of the AST",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "String",
              "name": "fieldName",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a map",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "Map",
              "name": "fieldNameAndValue",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the value associated with the given property key",
          "children": [
            {
              "type": "joinpoint",
              "name": "setValue"
            },
            {
              "type": "String",
              "name": "key",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "suffix",
              "defaultValue": ""
            }
          ]
        }
      ]
    },
    {
      "type": "joinpoint",
      "name": "op",
      "extends": "expression",
      "children": [
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isBitwise"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The kind of the operator. If it is a binary operator, can be one of: ptr_mem_d, ptr_mem_i, mul, div, rem, add, sub, shl, shr, cmp, lt, gt, le, ge, eq, ne, and, xor, or, l_and, l_or, assign, mul_assign, div_assign, rem_assign, add_assign, sub_assign, shl_assign, shr_assign, and_assign, xor_assign, or_assign, comma. If it is a unary operator, can be one of: post_inc, post_dec, pre_inc, pre_dec, addr_of, deref, plus, minus, not, l_not, real, imag, extension, cowait.",
          "children": [
            {
              "type": "String",
              "name": "kind"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String",
              "name": "operator"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a 'decl' join point that represents the declaration associated with this expression, or undefined if there is none",
          "children": [
            {
              "type": "decl",
              "name": "decl"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "returns a cast joinpoint if this expression has an associated implicit cast, undefined otherwise",
          "children": [
            {
              "type": "cast",
              "name": "implicitCast"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the expression is part of an argument of a function call",
          "children": [
            {
              "type": "Boolean",
              "name": "isFunctionArgument"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "[read| write| readwrite]",
              "name": "use"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "vardecl",
              "name": "vardecl"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "attributes"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "selects"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "actions"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "ancestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with a dump of the AST representation starting from this node. This representation corresponds to the internal Java representation of the ClavaAst, where the node names correspond to Java classes. To get an equivalent representation with join point names, use the attribute 'dump'",
          "children": [
            {
              "type": "String",
              "name": "ast"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor AST name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "astAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, considering null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "astChild"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, considering null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "astChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String that uniquely identifies this node",
          "children": [
            {
              "type": "String",
              "name": "astId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if this node is a Java instance of the given name, which corresponds to a simple Java class name of an AST node. For an equivalent function for join point names, use 'instanceOf(joinPointName)'",
          "children": [
            {
              "type": "boolean",
              "name": "astIsInstance"
            },
            {
              "type": "String",
              "name": "className"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the Java class of this node, which is similar to the equivalent node in Clang AST",
          "children": [
            {
              "type": "String",
              "name": "astName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, considering null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "astNumChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "astParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The bit width of the type returned by this join point, in relation to the definitions of its Translation Unit, or undefined if there is no type or bitwidth defined, or if the join point is not in a TranslationUnit",
          "children": [
            {
              "type": "Integer",
              "name": "bitWidth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String list of the names of the join points that form a path from the root to this node",
          "children": [
            {
              "type": "String[]",
              "name": "chain"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the joinpoint chain",
          "children": [
            {
              "type": "joinpoint",
              "name": "chainAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "child"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "children"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the code represented by this node",
          "children": [
            {
              "type": "String",
              "name": "code"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "column"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the given node is a descendant of this node",
          "children": [
            {
              "type": "Boolean",
              "name": "contains"
            },
            {
              "type": "joinpoint",
              "name": "jp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "currentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "JS object associated with this node, containing parsed data of #pragma clava data when the node can be a target of pragmas. This is a special object, managed internally, and cannot be reassigned, to change its contents requires using key-value pairs. If the node can be the target of a pragma, the information stored in this object is persisted between rebuilds.",
          "children": [
            {
              "type": "Object",
              "name": "data"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the depth of this join point in the AST. If it is the root join point returns 0, if it is a child of the root node returns 1, etc.",
          "children": [
            {
              "type": "Integer",
              "name": "depth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves all descendants of the join point",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type, including the node itself",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendantsAndSelf"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endColumn"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endLine"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the file where the code of this node is located, if available",
          "children": [
            {
              "type": "String",
              "name": "filename"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the complete path to the file where the code of this node comes from",
          "children": [
            {
              "type": "String",
              "name": "filepath"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the first child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks in the descendants for the first node of the given type",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstJp"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use 'userField' instead]",
          "children": [
            {
              "type": "Object",
              "name": "getUserField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The value associated with the given property key",
          "children": [
            {
              "type": "Object",
              "name": "getValue"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use hasParent instead]",
          "children": [
            {
              "type": "boolean",
              "name": "hasAstParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the node has children, false otherwise",
          "children": [
            {
              "type": "Boolean",
              "name": "hasChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the given join point or AST node is the same (== test) as the current join point AST node",
          "children": [
            {
              "type": "Boolean",
              "name": "hasNode"
            },
            {
              "type": "Object",
              "name": "nodeOrJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this node has a parent",
          "children": [
            {
              "type": "boolean",
              "name": "hasParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point has a type",
          "children": [
            {
              "type": "Boolean",
              "name": "hasType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns comments that are not explicitly in the AST, but embedded in other nodes",
          "children": [
            {
              "type": "comment[]",
              "name": "inlineComments"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this is a Cilk node (i.e., cilk_spawn, cilk_sync or cilk_for)",
          "children": [
            {
              "type": "Boolean",
              "name": "isCilk"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is part of a system header file",
          "children": [
            {
              "type": "Boolean",
              "name": "isInSystemHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a header (e.g., if condition, for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a loop header (e.g., for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideLoopHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if any descendant or the node itself was defined as a macro",
          "children": [
            {
              "type": "Boolean",
              "name": "isMacro"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the full Java class name of the type of the Java field with the provided name",
          "children": [
            {
              "type": "String",
              "name": "javaFieldType"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'keys' instead, together with 'getValue'] The names of the Java fields of this node. Can be used as key of the attribute 'javaValue'",
          "children": [
            {
              "type": "String[]",
              "name": "javaFields"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'getValue' instead, with the names returned by the attribute 'keys'] Returns the value associated with the provided Java field name",
          "children": [
            {
              "type": "Object",
              "name": "javaValue"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use joinPointType instead (uppercase P)]",
          "children": [
            {
              "type": "String",
              "name": "joinpointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Id that is based on the position of the node in the code, and should remain stable between compilations (warning: only a few nodes - file, function, loop - currently support it)",
          "children": [
            {
              "type": "String",
              "name": "jpId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Java Class instance with the type of the given key",
          "children": [
            {
              "type": "Object",
              "name": "keyType"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A list of the properties currently supported by this node. Can be used as parameter of the attribute 'getValue'",
          "children": [
            {
              "type": "String[]",
              "name": "keys"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[HACK: .descendants(type) does not work in .lara files, after GraalVM update] Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "laraDescendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the last child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "lastChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that came before this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "leftJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "line"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A string with information about the file and code position of this node, if available",
          "children": [
            {
              "type": "String",
              "name": "location"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, ignoring null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "numChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope that is a parent of the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The pragmas associated with this node",
          "children": [
            {
              "type": "pragma[]",
              "name": "pragmas"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that comes after this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "rightJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the 'program' joinpoint",
          "children": [
            {
              "type": "joinpoint",
              "name": "root"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the nodes of the scope of the current join point. If this node has a body (e.g., loop, function) corresponds to the children of the body. Otherwise, returns an empty array",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "scopeNodes"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that came before this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsLeft"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that come after this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsRight"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Converts this join point to a statement, or returns undefined if it was not possible",
          "children": [
            {
              "type": "statement",
              "name": "stmt"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "type",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrives values that have been associated to nodes of the AST with 'setUserField'",
          "children": [
            {
              "type": "Object",
              "name": "userField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a String with the type of the join point",
          "children": [
            {
              "type": "String",
              "name": "joinPointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the current join point is an instance of the given type",
          "children": [
            {
              "type": "Boolean",
              "name": "instanceOf"
            },
            {
              "type": "String",
              "name": "name"
            }
          ]
        },
        {
          "type": "select",
          "clazz": "vardecl",
          "alias": ""
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "insert"
            },
            {
              "type": "[before| after| replace]",
              "name": "position",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "def"
            },
            {
              "type": "String",
              "name": "attribute",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, but not of the nodes in its fields",
          "children": [
            {
              "type": "joinpoint",
              "name": "copy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Copies all enumerable own properties from the source object to the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataAssign"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Clears all properties from the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataClear"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, including the nodes in their fields (only the first level of field nodes, this function is not recursive)",
          "children": [
            {
              "type": "joinpoint",
              "name": "deepCopy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the node associated to this joinpoint from the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "detach"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point after this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point before this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Adds a message that will be printed to the user after weaving finishes. Identical messages are removed",
          "children": [
            {
              "type": "void",
              "name": "messageToUser"
            },
            {
              "type": "String",
              "name": "message",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the children of this node",
          "children": [
            {
              "type": "void",
              "name": "removeChildren"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this node with the given node",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of join points",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of strings",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWithStrings"
            },
            {
              "type": "String[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Setting data directly is not supported, this action just emits a warning and does nothing",
          "children": [
            {
              "type": "void",
              "name": "setData"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the first child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setFirstChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String[]",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the last child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setLastChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the type of a node, if it has a type",
          "children": [
            {
              "type": "void",
              "name": "setType"
            },
            {
              "type": "type",
              "name": "type",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Associates arbitrary values to nodes of the AST",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "String",
              "name": "fieldName",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a map",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "Map",
              "name": "fieldNameAndValue",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the value associated with the given property key",
          "children": [
            {
              "type": "joinpoint",
              "name": "setValue"
            },
            {
              "type": "String",
              "name": "key",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "suffix",
              "defaultValue": ""
            }
          ]
        }
      ]
    },
    {
      "type": "joinpoint",
      "name": "param",
      "defaultAttr": "name",
      "extends": "vardecl",
      "children": [
        {
          "type": "attribute",
          "tooltip": "The vardecl corresponding to the actual definition. For global variables, returns the vardecl of the file where it is actually defined (instead of the vardecl that defines an external link to the variable)",
          "children": [
            {
              "type": "vardecl",
              "name": "definition"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if vardecl has an initialization value",
          "children": [
            {
              "type": "Boolean",
              "name": "hasInit"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "If vardecl has an initialization value, returns an expression with that value",
          "children": [
            {
              "type": "expression",
              "name": "init"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The initialization style of this vardecl, which can be no_init, cinit, callinit, listinit",
          "children": [
            {
              "type": "String",
              "name": "initStyle"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if this variable does not have local storage. This includes all global variables as well as static variables declared within a function.",
          "children": [
            {
              "type": "Boolean",
              "name": "isGlobal"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if vardecl is a function parameter",
          "children": [
            {
              "type": "Boolean",
              "name": "isParam"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Storage class specifier, which can be none, extern, static, __private_extern__, auto, register",
          "children": [
            {
              "type": "String",
              "name": "storageClass"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isPublic"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String",
              "name": "name"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String",
              "name": "qualifiedName"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String",
              "name": "qualifiedPrefix"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The attributes (e.g. Pure, CUDAGlobal) associated to this decl",
          "children": [
            {
              "type": "attribute[]",
              "name": "attrs"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "attributes"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "selects"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "actions"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "ancestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with a dump of the AST representation starting from this node. This representation corresponds to the internal Java representation of the ClavaAst, where the node names correspond to Java classes. To get an equivalent representation with join point names, use the attribute 'dump'",
          "children": [
            {
              "type": "String",
              "name": "ast"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor AST name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "astAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, considering null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "astChild"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, considering null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "astChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String that uniquely identifies this node",
          "children": [
            {
              "type": "String",
              "name": "astId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if this node is a Java instance of the given name, which corresponds to a simple Java class name of an AST node. For an equivalent function for join point names, use 'instanceOf(joinPointName)'",
          "children": [
            {
              "type": "boolean",
              "name": "astIsInstance"
            },
            {
              "type": "String",
              "name": "className"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the Java class of this node, which is similar to the equivalent node in Clang AST",
          "children": [
            {
              "type": "String",
              "name": "astName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, considering null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "astNumChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "astParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The bit width of the type returned by this join point, in relation to the definitions of its Translation Unit, or undefined if there is no type or bitwidth defined, or if the join point is not in a TranslationUnit",
          "children": [
            {
              "type": "Integer",
              "name": "bitWidth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String list of the names of the join points that form a path from the root to this node",
          "children": [
            {
              "type": "String[]",
              "name": "chain"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the joinpoint chain",
          "children": [
            {
              "type": "joinpoint",
              "name": "chainAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "child"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "children"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the code represented by this node",
          "children": [
            {
              "type": "String",
              "name": "code"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "column"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the given node is a descendant of this node",
          "children": [
            {
              "type": "Boolean",
              "name": "contains"
            },
            {
              "type": "joinpoint",
              "name": "jp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "currentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "JS object associated with this node, containing parsed data of #pragma clava data when the node can be a target of pragmas. This is a special object, managed internally, and cannot be reassigned, to change its contents requires using key-value pairs. If the node can be the target of a pragma, the information stored in this object is persisted between rebuilds.",
          "children": [
            {
              "type": "Object",
              "name": "data"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the depth of this join point in the AST. If it is the root join point returns 0, if it is a child of the root node returns 1, etc.",
          "children": [
            {
              "type": "Integer",
              "name": "depth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves all descendants of the join point",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type, including the node itself",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendantsAndSelf"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endColumn"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endLine"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the file where the code of this node is located, if available",
          "children": [
            {
              "type": "String",
              "name": "filename"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the complete path to the file where the code of this node comes from",
          "children": [
            {
              "type": "String",
              "name": "filepath"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the first child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks in the descendants for the first node of the given type",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstJp"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use 'userField' instead]",
          "children": [
            {
              "type": "Object",
              "name": "getUserField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The value associated with the given property key",
          "children": [
            {
              "type": "Object",
              "name": "getValue"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use hasParent instead]",
          "children": [
            {
              "type": "boolean",
              "name": "hasAstParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the node has children, false otherwise",
          "children": [
            {
              "type": "Boolean",
              "name": "hasChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the given join point or AST node is the same (== test) as the current join point AST node",
          "children": [
            {
              "type": "Boolean",
              "name": "hasNode"
            },
            {
              "type": "Object",
              "name": "nodeOrJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this node has a parent",
          "children": [
            {
              "type": "boolean",
              "name": "hasParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point has a type",
          "children": [
            {
              "type": "Boolean",
              "name": "hasType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns comments that are not explicitly in the AST, but embedded in other nodes",
          "children": [
            {
              "type": "comment[]",
              "name": "inlineComments"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this is a Cilk node (i.e., cilk_spawn, cilk_sync or cilk_for)",
          "children": [
            {
              "type": "Boolean",
              "name": "isCilk"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is part of a system header file",
          "children": [
            {
              "type": "Boolean",
              "name": "isInSystemHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a header (e.g., if condition, for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a loop header (e.g., for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideLoopHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if any descendant or the node itself was defined as a macro",
          "children": [
            {
              "type": "Boolean",
              "name": "isMacro"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the full Java class name of the type of the Java field with the provided name",
          "children": [
            {
              "type": "String",
              "name": "javaFieldType"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'keys' instead, together with 'getValue'] The names of the Java fields of this node. Can be used as key of the attribute 'javaValue'",
          "children": [
            {
              "type": "String[]",
              "name": "javaFields"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'getValue' instead, with the names returned by the attribute 'keys'] Returns the value associated with the provided Java field name",
          "children": [
            {
              "type": "Object",
              "name": "javaValue"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use joinPointType instead (uppercase P)]",
          "children": [
            {
              "type": "String",
              "name": "joinpointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Id that is based on the position of the node in the code, and should remain stable between compilations (warning: only a few nodes - file, function, loop - currently support it)",
          "children": [
            {
              "type": "String",
              "name": "jpId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Java Class instance with the type of the given key",
          "children": [
            {
              "type": "Object",
              "name": "keyType"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A list of the properties currently supported by this node. Can be used as parameter of the attribute 'getValue'",
          "children": [
            {
              "type": "String[]",
              "name": "keys"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[HACK: .descendants(type) does not work in .lara files, after GraalVM update] Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "laraDescendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the last child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "lastChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that came before this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "leftJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "line"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A string with information about the file and code position of this node, if available",
          "children": [
            {
              "type": "String",
              "name": "location"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, ignoring null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "numChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope that is a parent of the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The pragmas associated with this node",
          "children": [
            {
              "type": "pragma[]",
              "name": "pragmas"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that comes after this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "rightJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the 'program' joinpoint",
          "children": [
            {
              "type": "joinpoint",
              "name": "root"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the nodes of the scope of the current join point. If this node has a body (e.g., loop, function) corresponds to the children of the body. Otherwise, returns an empty array",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "scopeNodes"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that came before this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsLeft"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that come after this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsRight"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Converts this join point to a statement, or returns undefined if it was not possible",
          "children": [
            {
              "type": "statement",
              "name": "stmt"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "type",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrives values that have been associated to nodes of the AST with 'setUserField'",
          "children": [
            {
              "type": "Object",
              "name": "userField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a String with the type of the join point",
          "children": [
            {
              "type": "String",
              "name": "joinPointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the current join point is an instance of the given type",
          "children": [
            {
              "type": "Boolean",
              "name": "instanceOf"
            },
            {
              "type": "String",
              "name": "name"
            }
          ]
        },
        {
          "type": "select",
          "clazz": "expression",
          "alias": "init"
        },
        {
          "type": "action",
          "tooltip": "If vardecl already has an initialization, removes it (also removes const if present). Otherwise does nothing",
          "children": [
            {
              "type": "void",
              "name": "removeInit"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "If vardecl already has an initialization, removes it. Otherwise does nothing",
          "children": [
            {
              "type": "void",
              "name": "removeInit"
            },
            {
              "type": "boolean",
              "name": "removeConst",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the given expression as the initialization of this vardecl. If undefined is passed and vardecl already has an initialization, removes that initialization",
          "children": [
            {
              "type": "void",
              "name": "setInit"
            },
            {
              "type": "expression",
              "name": "init",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Converts the given string to a literal expression and sets it as the initialization of this vardecl. If undefined is passed and vardecl already has an initialization, removes that initialization",
          "children": [
            {
              "type": "void",
              "name": "setInit"
            },
            {
              "type": "String",
              "name": "init",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the storage class specifier, which can be none, extern, static, __private_extern__, autovardecl",
          "children": [
            {
              "type": "void",
              "name": "setStorageClass"
            },
            {
              "type": "String",
              "name": "storageClass",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Creates a new varref based on this vardecl",
          "children": [
            {
              "type": "varref",
              "name": "varref"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the name of this namedDecl",
          "children": [
            {
              "type": "void",
              "name": "setName"
            },
            {
              "type": "String",
              "name": "name",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the qualified name of this namedDecl (changes both the name and qualified prefix)",
          "children": [
            {
              "type": "void",
              "name": "setQualifiedName"
            },
            {
              "type": "String",
              "name": "name",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the qualified prefix of this namedDecl",
          "children": [
            {
              "type": "void",
              "name": "setQualifiedPrefix"
            },
            {
              "type": "String",
              "name": "qualifiedPrefix",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "insert"
            },
            {
              "type": "[before| after| replace]",
              "name": "position",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "def"
            },
            {
              "type": "String",
              "name": "attribute",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, but not of the nodes in its fields",
          "children": [
            {
              "type": "joinpoint",
              "name": "copy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Copies all enumerable own properties from the source object to the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataAssign"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Clears all properties from the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataClear"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, including the nodes in their fields (only the first level of field nodes, this function is not recursive)",
          "children": [
            {
              "type": "joinpoint",
              "name": "deepCopy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the node associated to this joinpoint from the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "detach"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point after this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point before this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Adds a message that will be printed to the user after weaving finishes. Identical messages are removed",
          "children": [
            {
              "type": "void",
              "name": "messageToUser"
            },
            {
              "type": "String",
              "name": "message",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the children of this node",
          "children": [
            {
              "type": "void",
              "name": "removeChildren"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this node with the given node",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of join points",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of strings",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWithStrings"
            },
            {
              "type": "String[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Setting data directly is not supported, this action just emits a warning and does nothing",
          "children": [
            {
              "type": "void",
              "name": "setData"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the first child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setFirstChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String[]",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the last child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setLastChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the type of a node, if it has a type",
          "children": [
            {
              "type": "void",
              "name": "setType"
            },
            {
              "type": "type",
              "name": "type",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Associates arbitrary values to nodes of the AST",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "String",
              "name": "fieldName",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a map",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "Map",
              "name": "fieldNameAndValue",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the value associated with the given property key",
          "children": [
            {
              "type": "joinpoint",
              "name": "setValue"
            },
            {
              "type": "String",
              "name": "key",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "suffix",
              "defaultValue": ""
            }
          ]
        }
      ]
    },
    {
      "type": "joinpoint",
      "name": "parenExpr",
      "extends": "expression",
      "children": [
        {
          "type": "attribute",
          "tooltip": "Returns the expression inside this parenthesis expression",
          "children": [
            {
              "type": "expression",
              "name": "subExpr"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a 'decl' join point that represents the declaration associated with this expression, or undefined if there is none",
          "children": [
            {
              "type": "decl",
              "name": "decl"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "returns a cast joinpoint if this expression has an associated implicit cast, undefined otherwise",
          "children": [
            {
              "type": "cast",
              "name": "implicitCast"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the expression is part of an argument of a function call",
          "children": [
            {
              "type": "Boolean",
              "name": "isFunctionArgument"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "[read| write| readwrite]",
              "name": "use"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "vardecl",
              "name": "vardecl"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "attributes"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "selects"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "actions"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "ancestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with a dump of the AST representation starting from this node. This representation corresponds to the internal Java representation of the ClavaAst, where the node names correspond to Java classes. To get an equivalent representation with join point names, use the attribute 'dump'",
          "children": [
            {
              "type": "String",
              "name": "ast"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor AST name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "astAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, considering null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "astChild"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, considering null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "astChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String that uniquely identifies this node",
          "children": [
            {
              "type": "String",
              "name": "astId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if this node is a Java instance of the given name, which corresponds to a simple Java class name of an AST node. For an equivalent function for join point names, use 'instanceOf(joinPointName)'",
          "children": [
            {
              "type": "boolean",
              "name": "astIsInstance"
            },
            {
              "type": "String",
              "name": "className"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the Java class of this node, which is similar to the equivalent node in Clang AST",
          "children": [
            {
              "type": "String",
              "name": "astName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, considering null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "astNumChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "astParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The bit width of the type returned by this join point, in relation to the definitions of its Translation Unit, or undefined if there is no type or bitwidth defined, or if the join point is not in a TranslationUnit",
          "children": [
            {
              "type": "Integer",
              "name": "bitWidth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String list of the names of the join points that form a path from the root to this node",
          "children": [
            {
              "type": "String[]",
              "name": "chain"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the joinpoint chain",
          "children": [
            {
              "type": "joinpoint",
              "name": "chainAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "child"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "children"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the code represented by this node",
          "children": [
            {
              "type": "String",
              "name": "code"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "column"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the given node is a descendant of this node",
          "children": [
            {
              "type": "Boolean",
              "name": "contains"
            },
            {
              "type": "joinpoint",
              "name": "jp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "currentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "JS object associated with this node, containing parsed data of #pragma clava data when the node can be a target of pragmas. This is a special object, managed internally, and cannot be reassigned, to change its contents requires using key-value pairs. If the node can be the target of a pragma, the information stored in this object is persisted between rebuilds.",
          "children": [
            {
              "type": "Object",
              "name": "data"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the depth of this join point in the AST. If it is the root join point returns 0, if it is a child of the root node returns 1, etc.",
          "children": [
            {
              "type": "Integer",
              "name": "depth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves all descendants of the join point",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type, including the node itself",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendantsAndSelf"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endColumn"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endLine"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the file where the code of this node is located, if available",
          "children": [
            {
              "type": "String",
              "name": "filename"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the complete path to the file where the code of this node comes from",
          "children": [
            {
              "type": "String",
              "name": "filepath"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the first child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks in the descendants for the first node of the given type",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstJp"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use 'userField' instead]",
          "children": [
            {
              "type": "Object",
              "name": "getUserField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The value associated with the given property key",
          "children": [
            {
              "type": "Object",
              "name": "getValue"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use hasParent instead]",
          "children": [
            {
              "type": "boolean",
              "name": "hasAstParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the node has children, false otherwise",
          "children": [
            {
              "type": "Boolean",
              "name": "hasChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the given join point or AST node is the same (== test) as the current join point AST node",
          "children": [
            {
              "type": "Boolean",
              "name": "hasNode"
            },
            {
              "type": "Object",
              "name": "nodeOrJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this node has a parent",
          "children": [
            {
              "type": "boolean",
              "name": "hasParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point has a type",
          "children": [
            {
              "type": "Boolean",
              "name": "hasType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns comments that are not explicitly in the AST, but embedded in other nodes",
          "children": [
            {
              "type": "comment[]",
              "name": "inlineComments"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this is a Cilk node (i.e., cilk_spawn, cilk_sync or cilk_for)",
          "children": [
            {
              "type": "Boolean",
              "name": "isCilk"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is part of a system header file",
          "children": [
            {
              "type": "Boolean",
              "name": "isInSystemHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a header (e.g., if condition, for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a loop header (e.g., for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideLoopHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if any descendant or the node itself was defined as a macro",
          "children": [
            {
              "type": "Boolean",
              "name": "isMacro"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the full Java class name of the type of the Java field with the provided name",
          "children": [
            {
              "type": "String",
              "name": "javaFieldType"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'keys' instead, together with 'getValue'] The names of the Java fields of this node. Can be used as key of the attribute 'javaValue'",
          "children": [
            {
              "type": "String[]",
              "name": "javaFields"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'getValue' instead, with the names returned by the attribute 'keys'] Returns the value associated with the provided Java field name",
          "children": [
            {
              "type": "Object",
              "name": "javaValue"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use joinPointType instead (uppercase P)]",
          "children": [
            {
              "type": "String",
              "name": "joinpointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Id that is based on the position of the node in the code, and should remain stable between compilations (warning: only a few nodes - file, function, loop - currently support it)",
          "children": [
            {
              "type": "String",
              "name": "jpId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Java Class instance with the type of the given key",
          "children": [
            {
              "type": "Object",
              "name": "keyType"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A list of the properties currently supported by this node. Can be used as parameter of the attribute 'getValue'",
          "children": [
            {
              "type": "String[]",
              "name": "keys"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[HACK: .descendants(type) does not work in .lara files, after GraalVM update] Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "laraDescendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the last child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "lastChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that came before this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "leftJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "line"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A string with information about the file and code position of this node, if available",
          "children": [
            {
              "type": "String",
              "name": "location"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, ignoring null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "numChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope that is a parent of the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The pragmas associated with this node",
          "children": [
            {
              "type": "pragma[]",
              "name": "pragmas"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that comes after this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "rightJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the 'program' joinpoint",
          "children": [
            {
              "type": "joinpoint",
              "name": "root"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the nodes of the scope of the current join point. If this node has a body (e.g., loop, function) corresponds to the children of the body. Otherwise, returns an empty array",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "scopeNodes"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that came before this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsLeft"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that come after this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsRight"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Converts this join point to a statement, or returns undefined if it was not possible",
          "children": [
            {
              "type": "statement",
              "name": "stmt"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "type",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrives values that have been associated to nodes of the AST with 'setUserField'",
          "children": [
            {
              "type": "Object",
              "name": "userField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a String with the type of the join point",
          "children": [
            {
              "type": "String",
              "name": "joinPointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the current join point is an instance of the given type",
          "children": [
            {
              "type": "Boolean",
              "name": "instanceOf"
            },
            {
              "type": "String",
              "name": "name"
            }
          ]
        },
        {
          "type": "select",
          "clazz": "vardecl",
          "alias": ""
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "insert"
            },
            {
              "type": "[before| after| replace]",
              "name": "position",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "def"
            },
            {
              "type": "String",
              "name": "attribute",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, but not of the nodes in its fields",
          "children": [
            {
              "type": "joinpoint",
              "name": "copy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Copies all enumerable own properties from the source object to the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataAssign"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Clears all properties from the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataClear"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, including the nodes in their fields (only the first level of field nodes, this function is not recursive)",
          "children": [
            {
              "type": "joinpoint",
              "name": "deepCopy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the node associated to this joinpoint from the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "detach"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point after this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point before this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Adds a message that will be printed to the user after weaving finishes. Identical messages are removed",
          "children": [
            {
              "type": "void",
              "name": "messageToUser"
            },
            {
              "type": "String",
              "name": "message",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the children of this node",
          "children": [
            {
              "type": "void",
              "name": "removeChildren"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this node with the given node",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of join points",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of strings",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWithStrings"
            },
            {
              "type": "String[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Setting data directly is not supported, this action just emits a warning and does nothing",
          "children": [
            {
              "type": "void",
              "name": "setData"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the first child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setFirstChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String[]",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the last child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setLastChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the type of a node, if it has a type",
          "children": [
            {
              "type": "void",
              "name": "setType"
            },
            {
              "type": "type",
              "name": "type",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Associates arbitrary values to nodes of the AST",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "String",
              "name": "fieldName",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a map",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "Map",
              "name": "fieldNameAndValue",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the value associated with the given property key",
          "children": [
            {
              "type": "joinpoint",
              "name": "setValue"
            },
            {
              "type": "String",
              "name": "key",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "suffix",
              "defaultValue": ""
            }
          ]
        }
      ]
    },
    {
      "type": "joinpoint",
      "name": "parenType",
      "extends": "type",
      "children": [
        {
          "type": "attribute",
          "children": [
            {
              "type": "type",
              "name": "innerType"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Integer[]",
              "name": "arrayDims"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Integer",
              "name": "arraySize"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The bit width of this type in the Translation Unit of the given join point, or undefined if there is no bitwidth defined",
          "children": [
            {
              "type": "Integer",
              "name": "bitWidth"
            },
            {
              "type": "joinpoint",
              "name": "reference"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "constant"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Single-step desugar. Returns the type itself if it does not have sugar",
          "children": [
            {
              "type": "type",
              "name": "desugar"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Completely desugars the type",
          "children": [
            {
              "type": "type",
              "name": "desugarAll"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A tree representation of the fields of this type",
          "children": [
            {
              "type": "String",
              "name": "fieldTree"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "hasSugar"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "hasTemplateArgs"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isArray"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "True if this is a type declared with the 'auto' keyword",
          "children": [
            {
              "type": "Boolean",
              "name": "isAuto"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isBuiltin"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isPointer"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isTopLevel"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String",
              "name": "kind"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Ignores certain types (e.g., DecayedType)",
          "children": [
            {
              "type": "type",
              "name": "normalize"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "templateArgsStrings"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "type[]",
              "name": "templateArgsTypes"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Maps names of join point fields that represent type join points, to their respective values",
          "children": [
            {
              "type": "Map",
              "name": "typeFields"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "If the type encapsulates another type, returns the encapsulated type",
          "children": [
            {
              "type": "type",
              "name": "unwrap"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "attributes"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "selects"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "actions"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "ancestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with a dump of the AST representation starting from this node. This representation corresponds to the internal Java representation of the ClavaAst, where the node names correspond to Java classes. To get an equivalent representation with join point names, use the attribute 'dump'",
          "children": [
            {
              "type": "String",
              "name": "ast"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor AST name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "astAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, considering null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "astChild"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, considering null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "astChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String that uniquely identifies this node",
          "children": [
            {
              "type": "String",
              "name": "astId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if this node is a Java instance of the given name, which corresponds to a simple Java class name of an AST node. For an equivalent function for join point names, use 'instanceOf(joinPointName)'",
          "children": [
            {
              "type": "boolean",
              "name": "astIsInstance"
            },
            {
              "type": "String",
              "name": "className"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the Java class of this node, which is similar to the equivalent node in Clang AST",
          "children": [
            {
              "type": "String",
              "name": "astName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, considering null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "astNumChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "astParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The bit width of the type returned by this join point, in relation to the definitions of its Translation Unit, or undefined if there is no type or bitwidth defined, or if the join point is not in a TranslationUnit",
          "children": [
            {
              "type": "Integer",
              "name": "bitWidth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String list of the names of the join points that form a path from the root to this node",
          "children": [
            {
              "type": "String[]",
              "name": "chain"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the joinpoint chain",
          "children": [
            {
              "type": "joinpoint",
              "name": "chainAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "child"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "children"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the code represented by this node",
          "children": [
            {
              "type": "String",
              "name": "code"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "column"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the given node is a descendant of this node",
          "children": [
            {
              "type": "Boolean",
              "name": "contains"
            },
            {
              "type": "joinpoint",
              "name": "jp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "currentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "JS object associated with this node, containing parsed data of #pragma clava data when the node can be a target of pragmas. This is a special object, managed internally, and cannot be reassigned, to change its contents requires using key-value pairs. If the node can be the target of a pragma, the information stored in this object is persisted between rebuilds.",
          "children": [
            {
              "type": "Object",
              "name": "data"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the depth of this join point in the AST. If it is the root join point returns 0, if it is a child of the root node returns 1, etc.",
          "children": [
            {
              "type": "Integer",
              "name": "depth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves all descendants of the join point",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type, including the node itself",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendantsAndSelf"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endColumn"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endLine"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the file where the code of this node is located, if available",
          "children": [
            {
              "type": "String",
              "name": "filename"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the complete path to the file where the code of this node comes from",
          "children": [
            {
              "type": "String",
              "name": "filepath"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the first child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks in the descendants for the first node of the given type",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstJp"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use 'userField' instead]",
          "children": [
            {
              "type": "Object",
              "name": "getUserField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The value associated with the given property key",
          "children": [
            {
              "type": "Object",
              "name": "getValue"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use hasParent instead]",
          "children": [
            {
              "type": "boolean",
              "name": "hasAstParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the node has children, false otherwise",
          "children": [
            {
              "type": "Boolean",
              "name": "hasChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the given join point or AST node is the same (== test) as the current join point AST node",
          "children": [
            {
              "type": "Boolean",
              "name": "hasNode"
            },
            {
              "type": "Object",
              "name": "nodeOrJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this node has a parent",
          "children": [
            {
              "type": "boolean",
              "name": "hasParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point has a type",
          "children": [
            {
              "type": "Boolean",
              "name": "hasType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns comments that are not explicitly in the AST, but embedded in other nodes",
          "children": [
            {
              "type": "comment[]",
              "name": "inlineComments"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this is a Cilk node (i.e., cilk_spawn, cilk_sync or cilk_for)",
          "children": [
            {
              "type": "Boolean",
              "name": "isCilk"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is part of a system header file",
          "children": [
            {
              "type": "Boolean",
              "name": "isInSystemHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a header (e.g., if condition, for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a loop header (e.g., for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideLoopHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if any descendant or the node itself was defined as a macro",
          "children": [
            {
              "type": "Boolean",
              "name": "isMacro"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the full Java class name of the type of the Java field with the provided name",
          "children": [
            {
              "type": "String",
              "name": "javaFieldType"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'keys' instead, together with 'getValue'] The names of the Java fields of this node. Can be used as key of the attribute 'javaValue'",
          "children": [
            {
              "type": "String[]",
              "name": "javaFields"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'getValue' instead, with the names returned by the attribute 'keys'] Returns the value associated with the provided Java field name",
          "children": [
            {
              "type": "Object",
              "name": "javaValue"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use joinPointType instead (uppercase P)]",
          "children": [
            {
              "type": "String",
              "name": "joinpointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Id that is based on the position of the node in the code, and should remain stable between compilations (warning: only a few nodes - file, function, loop - currently support it)",
          "children": [
            {
              "type": "String",
              "name": "jpId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Java Class instance with the type of the given key",
          "children": [
            {
              "type": "Object",
              "name": "keyType"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A list of the properties currently supported by this node. Can be used as parameter of the attribute 'getValue'",
          "children": [
            {
              "type": "String[]",
              "name": "keys"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[HACK: .descendants(type) does not work in .lara files, after GraalVM update] Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "laraDescendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the last child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "lastChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that came before this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "leftJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "line"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A string with information about the file and code position of this node, if available",
          "children": [
            {
              "type": "String",
              "name": "location"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, ignoring null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "numChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope that is a parent of the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The pragmas associated with this node",
          "children": [
            {
              "type": "pragma[]",
              "name": "pragmas"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that comes after this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "rightJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the 'program' joinpoint",
          "children": [
            {
              "type": "joinpoint",
              "name": "root"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the nodes of the scope of the current join point. If this node has a body (e.g., loop, function) corresponds to the children of the body. Otherwise, returns an empty array",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "scopeNodes"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that came before this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsLeft"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that come after this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsRight"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Converts this join point to a statement, or returns undefined if it was not possible",
          "children": [
            {
              "type": "statement",
              "name": "stmt"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "type",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrives values that have been associated to nodes of the AST with 'setUserField'",
          "children": [
            {
              "type": "Object",
              "name": "userField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a String with the type of the join point",
          "children": [
            {
              "type": "String",
              "name": "joinPointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the current join point is an instance of the given type",
          "children": [
            {
              "type": "Boolean",
              "name": "instanceOf"
            },
            {
              "type": "String",
              "name": "name"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the inner type of this paren type",
          "children": [
            {
              "type": "void",
              "name": "setInnerType"
            },
            {
              "type": "type",
              "name": "innerType",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Returns a copy of this type with the qualifier const",
          "children": [
            {
              "type": "type",
              "name": "asConst"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the desugared type of this type",
          "children": [
            {
              "type": "void",
              "name": "setDesugar"
            },
            {
              "type": "type",
              "name": "desugaredType",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the template argument types of a template type",
          "children": [
            {
              "type": "void",
              "name": "setTemplateArgsTypes"
            },
            {
              "type": "type[]",
              "name": "templateArgTypes",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets a single template argument type of a template type",
          "children": [
            {
              "type": "void",
              "name": "setTemplateArgsTypes"
            },
            {
              "type": "Integer",
              "name": "index",
              "defaultValue": ""
            },
            {
              "type": "type",
              "name": "templateArgType",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Changes a single occurence of a type field that has the current value with new value. Returns true if there was a change",
          "children": [
            {
              "type": "boolean",
              "name": "setTypeFieldByValueRecursive"
            },
            {
              "type": "Object",
              "name": "currentValue",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "newValue",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces an underlying type of this instance with new type, if it matches the old type. Returns true if there were changes",
          "children": [
            {
              "type": "type",
              "name": "setUnderlyingType"
            },
            {
              "type": "type",
              "name": "oldValue",
              "defaultValue": ""
            },
            {
              "type": "type",
              "name": "newValue",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "insert"
            },
            {
              "type": "[before| after| replace]",
              "name": "position",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "def"
            },
            {
              "type": "String",
              "name": "attribute",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, but not of the nodes in its fields",
          "children": [
            {
              "type": "joinpoint",
              "name": "copy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Copies all enumerable own properties from the source object to the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataAssign"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Clears all properties from the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataClear"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, including the nodes in their fields (only the first level of field nodes, this function is not recursive)",
          "children": [
            {
              "type": "joinpoint",
              "name": "deepCopy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the node associated to this joinpoint from the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "detach"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point after this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point before this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Adds a message that will be printed to the user after weaving finishes. Identical messages are removed",
          "children": [
            {
              "type": "void",
              "name": "messageToUser"
            },
            {
              "type": "String",
              "name": "message",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the children of this node",
          "children": [
            {
              "type": "void",
              "name": "removeChildren"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this node with the given node",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of join points",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of strings",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWithStrings"
            },
            {
              "type": "String[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Setting data directly is not supported, this action just emits a warning and does nothing",
          "children": [
            {
              "type": "void",
              "name": "setData"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the first child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setFirstChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String[]",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the last child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setLastChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the type of a node, if it has a type",
          "children": [
            {
              "type": "void",
              "name": "setType"
            },
            {
              "type": "type",
              "name": "type",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Associates arbitrary values to nodes of the AST",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "String",
              "name": "fieldName",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a map",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "Map",
              "name": "fieldNameAndValue",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the value associated with the given property key",
          "children": [
            {
              "type": "joinpoint",
              "name": "setValue"
            },
            {
              "type": "String",
              "name": "key",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "suffix",
              "defaultValue": ""
            }
          ]
        }
      ]
    },
    {
      "type": "joinpoint",
      "name": "pointerType",
      "extends": "type",
      "children": [
        {
          "type": "attribute",
          "children": [
            {
              "type": "type",
              "name": "pointee"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Number of pointer levels from this pointer",
          "children": [
            {
              "type": "Integer",
              "name": "pointerLevels"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Integer[]",
              "name": "arrayDims"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Integer",
              "name": "arraySize"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The bit width of this type in the Translation Unit of the given join point, or undefined if there is no bitwidth defined",
          "children": [
            {
              "type": "Integer",
              "name": "bitWidth"
            },
            {
              "type": "joinpoint",
              "name": "reference"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "constant"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Single-step desugar. Returns the type itself if it does not have sugar",
          "children": [
            {
              "type": "type",
              "name": "desugar"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Completely desugars the type",
          "children": [
            {
              "type": "type",
              "name": "desugarAll"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A tree representation of the fields of this type",
          "children": [
            {
              "type": "String",
              "name": "fieldTree"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "hasSugar"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "hasTemplateArgs"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isArray"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "True if this is a type declared with the 'auto' keyword",
          "children": [
            {
              "type": "Boolean",
              "name": "isAuto"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isBuiltin"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isPointer"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isTopLevel"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String",
              "name": "kind"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Ignores certain types (e.g., DecayedType)",
          "children": [
            {
              "type": "type",
              "name": "normalize"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "templateArgsStrings"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "type[]",
              "name": "templateArgsTypes"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Maps names of join point fields that represent type join points, to their respective values",
          "children": [
            {
              "type": "Map",
              "name": "typeFields"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "If the type encapsulates another type, returns the encapsulated type",
          "children": [
            {
              "type": "type",
              "name": "unwrap"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "attributes"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "selects"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "actions"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "ancestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with a dump of the AST representation starting from this node. This representation corresponds to the internal Java representation of the ClavaAst, where the node names correspond to Java classes. To get an equivalent representation with join point names, use the attribute 'dump'",
          "children": [
            {
              "type": "String",
              "name": "ast"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor AST name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "astAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, considering null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "astChild"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, considering null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "astChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String that uniquely identifies this node",
          "children": [
            {
              "type": "String",
              "name": "astId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if this node is a Java instance of the given name, which corresponds to a simple Java class name of an AST node. For an equivalent function for join point names, use 'instanceOf(joinPointName)'",
          "children": [
            {
              "type": "boolean",
              "name": "astIsInstance"
            },
            {
              "type": "String",
              "name": "className"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the Java class of this node, which is similar to the equivalent node in Clang AST",
          "children": [
            {
              "type": "String",
              "name": "astName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, considering null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "astNumChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "astParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The bit width of the type returned by this join point, in relation to the definitions of its Translation Unit, or undefined if there is no type or bitwidth defined, or if the join point is not in a TranslationUnit",
          "children": [
            {
              "type": "Integer",
              "name": "bitWidth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String list of the names of the join points that form a path from the root to this node",
          "children": [
            {
              "type": "String[]",
              "name": "chain"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the joinpoint chain",
          "children": [
            {
              "type": "joinpoint",
              "name": "chainAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "child"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "children"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the code represented by this node",
          "children": [
            {
              "type": "String",
              "name": "code"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "column"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the given node is a descendant of this node",
          "children": [
            {
              "type": "Boolean",
              "name": "contains"
            },
            {
              "type": "joinpoint",
              "name": "jp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "currentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "JS object associated with this node, containing parsed data of #pragma clava data when the node can be a target of pragmas. This is a special object, managed internally, and cannot be reassigned, to change its contents requires using key-value pairs. If the node can be the target of a pragma, the information stored in this object is persisted between rebuilds.",
          "children": [
            {
              "type": "Object",
              "name": "data"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the depth of this join point in the AST. If it is the root join point returns 0, if it is a child of the root node returns 1, etc.",
          "children": [
            {
              "type": "Integer",
              "name": "depth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves all descendants of the join point",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type, including the node itself",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendantsAndSelf"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endColumn"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endLine"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the file where the code of this node is located, if available",
          "children": [
            {
              "type": "String",
              "name": "filename"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the complete path to the file where the code of this node comes from",
          "children": [
            {
              "type": "String",
              "name": "filepath"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the first child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks in the descendants for the first node of the given type",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstJp"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use 'userField' instead]",
          "children": [
            {
              "type": "Object",
              "name": "getUserField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The value associated with the given property key",
          "children": [
            {
              "type": "Object",
              "name": "getValue"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use hasParent instead]",
          "children": [
            {
              "type": "boolean",
              "name": "hasAstParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the node has children, false otherwise",
          "children": [
            {
              "type": "Boolean",
              "name": "hasChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the given join point or AST node is the same (== test) as the current join point AST node",
          "children": [
            {
              "type": "Boolean",
              "name": "hasNode"
            },
            {
              "type": "Object",
              "name": "nodeOrJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this node has a parent",
          "children": [
            {
              "type": "boolean",
              "name": "hasParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point has a type",
          "children": [
            {
              "type": "Boolean",
              "name": "hasType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns comments that are not explicitly in the AST, but embedded in other nodes",
          "children": [
            {
              "type": "comment[]",
              "name": "inlineComments"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this is a Cilk node (i.e., cilk_spawn, cilk_sync or cilk_for)",
          "children": [
            {
              "type": "Boolean",
              "name": "isCilk"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is part of a system header file",
          "children": [
            {
              "type": "Boolean",
              "name": "isInSystemHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a header (e.g., if condition, for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a loop header (e.g., for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideLoopHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if any descendant or the node itself was defined as a macro",
          "children": [
            {
              "type": "Boolean",
              "name": "isMacro"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the full Java class name of the type of the Java field with the provided name",
          "children": [
            {
              "type": "String",
              "name": "javaFieldType"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'keys' instead, together with 'getValue'] The names of the Java fields of this node. Can be used as key of the attribute 'javaValue'",
          "children": [
            {
              "type": "String[]",
              "name": "javaFields"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'getValue' instead, with the names returned by the attribute 'keys'] Returns the value associated with the provided Java field name",
          "children": [
            {
              "type": "Object",
              "name": "javaValue"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use joinPointType instead (uppercase P)]",
          "children": [
            {
              "type": "String",
              "name": "joinpointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Id that is based on the position of the node in the code, and should remain stable between compilations (warning: only a few nodes - file, function, loop - currently support it)",
          "children": [
            {
              "type": "String",
              "name": "jpId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Java Class instance with the type of the given key",
          "children": [
            {
              "type": "Object",
              "name": "keyType"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A list of the properties currently supported by this node. Can be used as parameter of the attribute 'getValue'",
          "children": [
            {
              "type": "String[]",
              "name": "keys"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[HACK: .descendants(type) does not work in .lara files, after GraalVM update] Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "laraDescendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the last child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "lastChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that came before this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "leftJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "line"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A string with information about the file and code position of this node, if available",
          "children": [
            {
              "type": "String",
              "name": "location"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, ignoring null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "numChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope that is a parent of the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The pragmas associated with this node",
          "children": [
            {
              "type": "pragma[]",
              "name": "pragmas"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that comes after this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "rightJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the 'program' joinpoint",
          "children": [
            {
              "type": "joinpoint",
              "name": "root"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the nodes of the scope of the current join point. If this node has a body (e.g., loop, function) corresponds to the children of the body. Otherwise, returns an empty array",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "scopeNodes"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that came before this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsLeft"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that come after this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsRight"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Converts this join point to a statement, or returns undefined if it was not possible",
          "children": [
            {
              "type": "statement",
              "name": "stmt"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "type",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrives values that have been associated to nodes of the AST with 'setUserField'",
          "children": [
            {
              "type": "Object",
              "name": "userField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a String with the type of the join point",
          "children": [
            {
              "type": "String",
              "name": "joinPointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the current join point is an instance of the given type",
          "children": [
            {
              "type": "Boolean",
              "name": "instanceOf"
            },
            {
              "type": "String",
              "name": "name"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the pointee type of this pointer type",
          "children": [
            {
              "type": "void",
              "name": "setPointee"
            },
            {
              "type": "type",
              "name": "pointeeType",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Returns a copy of this type with the qualifier const",
          "children": [
            {
              "type": "type",
              "name": "asConst"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the desugared type of this type",
          "children": [
            {
              "type": "void",
              "name": "setDesugar"
            },
            {
              "type": "type",
              "name": "desugaredType",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the template argument types of a template type",
          "children": [
            {
              "type": "void",
              "name": "setTemplateArgsTypes"
            },
            {
              "type": "type[]",
              "name": "templateArgTypes",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets a single template argument type of a template type",
          "children": [
            {
              "type": "void",
              "name": "setTemplateArgsTypes"
            },
            {
              "type": "Integer",
              "name": "index",
              "defaultValue": ""
            },
            {
              "type": "type",
              "name": "templateArgType",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Changes a single occurence of a type field that has the current value with new value. Returns true if there was a change",
          "children": [
            {
              "type": "boolean",
              "name": "setTypeFieldByValueRecursive"
            },
            {
              "type": "Object",
              "name": "currentValue",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "newValue",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces an underlying type of this instance with new type, if it matches the old type. Returns true if there were changes",
          "children": [
            {
              "type": "type",
              "name": "setUnderlyingType"
            },
            {
              "type": "type",
              "name": "oldValue",
              "defaultValue": ""
            },
            {
              "type": "type",
              "name": "newValue",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "insert"
            },
            {
              "type": "[before| after| replace]",
              "name": "position",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "def"
            },
            {
              "type": "String",
              "name": "attribute",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, but not of the nodes in its fields",
          "children": [
            {
              "type": "joinpoint",
              "name": "copy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Copies all enumerable own properties from the source object to the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataAssign"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Clears all properties from the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataClear"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, including the nodes in their fields (only the first level of field nodes, this function is not recursive)",
          "children": [
            {
              "type": "joinpoint",
              "name": "deepCopy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the node associated to this joinpoint from the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "detach"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point after this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point before this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Adds a message that will be printed to the user after weaving finishes. Identical messages are removed",
          "children": [
            {
              "type": "void",
              "name": "messageToUser"
            },
            {
              "type": "String",
              "name": "message",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the children of this node",
          "children": [
            {
              "type": "void",
              "name": "removeChildren"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this node with the given node",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of join points",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of strings",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWithStrings"
            },
            {
              "type": "String[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Setting data directly is not supported, this action just emits a warning and does nothing",
          "children": [
            {
              "type": "void",
              "name": "setData"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the first child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setFirstChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String[]",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the last child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setLastChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the type of a node, if it has a type",
          "children": [
            {
              "type": "void",
              "name": "setType"
            },
            {
              "type": "type",
              "name": "type",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Associates arbitrary values to nodes of the AST",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "String",
              "name": "fieldName",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a map",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "Map",
              "name": "fieldNameAndValue",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the value associated with the given property key",
          "children": [
            {
              "type": "joinpoint",
              "name": "setValue"
            },
            {
              "type": "String",
              "name": "key",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "suffix",
              "defaultValue": ""
            }
          ]
        }
      ]
    },
    {
      "type": "joinpoint",
      "name": "pragma",
      "defaultAttr": "name",
      "extends": "joinpoint",
      "tooltip": "Represents a pragma in the code (e.g., #pragma kernel)",
      "children": [
        {
          "type": "attribute",
          "tooltip": "Everything that is after the name of the pragma",
          "children": [
            {
              "type": "String",
              "name": "content"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the pragma. E.g. for #pragma foo bar, returns 'foo'",
          "children": [
            {
              "type": "String",
              "name": "name"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The first node below the pragma that is not a comment or another pragma. Example of pragma targets are statements and declarations",
          "children": [
            {
              "type": "joinpoint",
              "name": "target"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "All the nodes below the target node, including the target node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "targetNodes"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "All the nodes below the target node, including the target node, up until a pragma with the name given by argument 'endPragma'. If no end pragma is found, returns the same result as if not providing the argument",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "targetNodes"
            },
            {
              "type": "String",
              "name": "endPragma"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "attributes"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "selects"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "actions"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "ancestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with a dump of the AST representation starting from this node. This representation corresponds to the internal Java representation of the ClavaAst, where the node names correspond to Java classes. To get an equivalent representation with join point names, use the attribute 'dump'",
          "children": [
            {
              "type": "String",
              "name": "ast"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor AST name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "astAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, considering null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "astChild"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, considering null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "astChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String that uniquely identifies this node",
          "children": [
            {
              "type": "String",
              "name": "astId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if this node is a Java instance of the given name, which corresponds to a simple Java class name of an AST node. For an equivalent function for join point names, use 'instanceOf(joinPointName)'",
          "children": [
            {
              "type": "boolean",
              "name": "astIsInstance"
            },
            {
              "type": "String",
              "name": "className"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the Java class of this node, which is similar to the equivalent node in Clang AST",
          "children": [
            {
              "type": "String",
              "name": "astName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, considering null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "astNumChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "astParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The bit width of the type returned by this join point, in relation to the definitions of its Translation Unit, or undefined if there is no type or bitwidth defined, or if the join point is not in a TranslationUnit",
          "children": [
            {
              "type": "Integer",
              "name": "bitWidth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String list of the names of the join points that form a path from the root to this node",
          "children": [
            {
              "type": "String[]",
              "name": "chain"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the joinpoint chain",
          "children": [
            {
              "type": "joinpoint",
              "name": "chainAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "child"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "children"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the code represented by this node",
          "children": [
            {
              "type": "String",
              "name": "code"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "column"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the given node is a descendant of this node",
          "children": [
            {
              "type": "Boolean",
              "name": "contains"
            },
            {
              "type": "joinpoint",
              "name": "jp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "currentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "JS object associated with this node, containing parsed data of #pragma clava data when the node can be a target of pragmas. This is a special object, managed internally, and cannot be reassigned, to change its contents requires using key-value pairs. If the node can be the target of a pragma, the information stored in this object is persisted between rebuilds.",
          "children": [
            {
              "type": "Object",
              "name": "data"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the depth of this join point in the AST. If it is the root join point returns 0, if it is a child of the root node returns 1, etc.",
          "children": [
            {
              "type": "Integer",
              "name": "depth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves all descendants of the join point",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type, including the node itself",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendantsAndSelf"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endColumn"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endLine"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the file where the code of this node is located, if available",
          "children": [
            {
              "type": "String",
              "name": "filename"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the complete path to the file where the code of this node comes from",
          "children": [
            {
              "type": "String",
              "name": "filepath"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the first child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks in the descendants for the first node of the given type",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstJp"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use 'userField' instead]",
          "children": [
            {
              "type": "Object",
              "name": "getUserField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The value associated with the given property key",
          "children": [
            {
              "type": "Object",
              "name": "getValue"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use hasParent instead]",
          "children": [
            {
              "type": "boolean",
              "name": "hasAstParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the node has children, false otherwise",
          "children": [
            {
              "type": "Boolean",
              "name": "hasChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the given join point or AST node is the same (== test) as the current join point AST node",
          "children": [
            {
              "type": "Boolean",
              "name": "hasNode"
            },
            {
              "type": "Object",
              "name": "nodeOrJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this node has a parent",
          "children": [
            {
              "type": "boolean",
              "name": "hasParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point has a type",
          "children": [
            {
              "type": "Boolean",
              "name": "hasType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns comments that are not explicitly in the AST, but embedded in other nodes",
          "children": [
            {
              "type": "comment[]",
              "name": "inlineComments"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this is a Cilk node (i.e., cilk_spawn, cilk_sync or cilk_for)",
          "children": [
            {
              "type": "Boolean",
              "name": "isCilk"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is part of a system header file",
          "children": [
            {
              "type": "Boolean",
              "name": "isInSystemHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a header (e.g., if condition, for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a loop header (e.g., for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideLoopHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if any descendant or the node itself was defined as a macro",
          "children": [
            {
              "type": "Boolean",
              "name": "isMacro"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the full Java class name of the type of the Java field with the provided name",
          "children": [
            {
              "type": "String",
              "name": "javaFieldType"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'keys' instead, together with 'getValue'] The names of the Java fields of this node. Can be used as key of the attribute 'javaValue'",
          "children": [
            {
              "type": "String[]",
              "name": "javaFields"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'getValue' instead, with the names returned by the attribute 'keys'] Returns the value associated with the provided Java field name",
          "children": [
            {
              "type": "Object",
              "name": "javaValue"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use joinPointType instead (uppercase P)]",
          "children": [
            {
              "type": "String",
              "name": "joinpointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Id that is based on the position of the node in the code, and should remain stable between compilations (warning: only a few nodes - file, function, loop - currently support it)",
          "children": [
            {
              "type": "String",
              "name": "jpId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Java Class instance with the type of the given key",
          "children": [
            {
              "type": "Object",
              "name": "keyType"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A list of the properties currently supported by this node. Can be used as parameter of the attribute 'getValue'",
          "children": [
            {
              "type": "String[]",
              "name": "keys"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[HACK: .descendants(type) does not work in .lara files, after GraalVM update] Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "laraDescendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the last child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "lastChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that came before this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "leftJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "line"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A string with information about the file and code position of this node, if available",
          "children": [
            {
              "type": "String",
              "name": "location"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, ignoring null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "numChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope that is a parent of the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The pragmas associated with this node",
          "children": [
            {
              "type": "pragma[]",
              "name": "pragmas"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that comes after this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "rightJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the 'program' joinpoint",
          "children": [
            {
              "type": "joinpoint",
              "name": "root"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the nodes of the scope of the current join point. If this node has a body (e.g., loop, function) corresponds to the children of the body. Otherwise, returns an empty array",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "scopeNodes"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that came before this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsLeft"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that come after this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsRight"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Converts this join point to a statement, or returns undefined if it was not possible",
          "children": [
            {
              "type": "statement",
              "name": "stmt"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "type",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrives values that have been associated to nodes of the AST with 'setUserField'",
          "children": [
            {
              "type": "Object",
              "name": "userField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a String with the type of the join point",
          "children": [
            {
              "type": "String",
              "name": "joinPointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the current join point is an instance of the given type",
          "children": [
            {
              "type": "Boolean",
              "name": "instanceOf"
            },
            {
              "type": "String",
              "name": "name"
            }
          ]
        },
        {
          "type": "select",
          "clazz": "joinpoint",
          "alias": "target"
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "setContent"
            },
            {
              "type": "String",
              "name": "content",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "setName"
            },
            {
              "type": "String",
              "name": "name",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "insert"
            },
            {
              "type": "[before| after| replace]",
              "name": "position",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "def"
            },
            {
              "type": "String",
              "name": "attribute",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, but not of the nodes in its fields",
          "children": [
            {
              "type": "joinpoint",
              "name": "copy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Copies all enumerable own properties from the source object to the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataAssign"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Clears all properties from the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataClear"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, including the nodes in their fields (only the first level of field nodes, this function is not recursive)",
          "children": [
            {
              "type": "joinpoint",
              "name": "deepCopy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the node associated to this joinpoint from the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "detach"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point after this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point before this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Adds a message that will be printed to the user after weaving finishes. Identical messages are removed",
          "children": [
            {
              "type": "void",
              "name": "messageToUser"
            },
            {
              "type": "String",
              "name": "message",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the children of this node",
          "children": [
            {
              "type": "void",
              "name": "removeChildren"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this node with the given node",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of join points",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of strings",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWithStrings"
            },
            {
              "type": "String[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Setting data directly is not supported, this action just emits a warning and does nothing",
          "children": [
            {
              "type": "void",
              "name": "setData"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the first child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setFirstChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String[]",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the last child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setLastChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the type of a node, if it has a type",
          "children": [
            {
              "type": "void",
              "name": "setType"
            },
            {
              "type": "type",
              "name": "type",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Associates arbitrary values to nodes of the AST",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "String",
              "name": "fieldName",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a map",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "Map",
              "name": "fieldNameAndValue",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the value associated with the given property key",
          "children": [
            {
              "type": "joinpoint",
              "name": "setValue"
            },
            {
              "type": "String",
              "name": "key",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "suffix",
              "defaultValue": ""
            }
          ]
        }
      ]
    },
    {
      "type": "joinpoint",
      "name": "program",
      "defaultAttr": "name",
      "extends": "joinpoint",
      "tooltip": "Represents the complete program and is the top-most joinpoint in the hierarchy",
      "children": [
        {
          "type": "attribute",
          "children": [
            {
              "type": "String",
              "name": "baseFolder"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "defaultFlags"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "paths to includes that the current program depends on",
          "children": [
            {
              "type": "String[]",
              "name": "extraIncludes"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "link libraries of external projects the current program depends on",
          "children": [
            {
              "type": "String[]",
              "name": "extraLibs"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "paths to folders of projects that the current program depends on",
          "children": [
            {
              "type": "String[]",
              "name": "extraProjects"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "paths to sources that the current program depends on",
          "children": [
            {
              "type": "String[]",
              "name": "extraSources"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the source files in this program",
          "children": [
            {
              "type": "file[]",
              "name": "files"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "includeFolders"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the program was compiled with a C++ standard",
          "children": [
            {
              "type": "Boolean",
              "name": "isCxx"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a function join point with the main function of the program, if one is available",
          "children": [
            {
              "type": "function",
              "name": "main"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String",
              "name": "name"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the standard (e.g., c99, c++11)",
          "children": [
            {
              "type": "String",
              "name": "standard"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The flag of the standard (e.g., -std=c++11)",
          "children": [
            {
              "type": "String",
              "name": "stdFlag"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "userFlags"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String",
              "name": "weavingFolder"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "attributes"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "selects"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "actions"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "ancestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with a dump of the AST representation starting from this node. This representation corresponds to the internal Java representation of the ClavaAst, where the node names correspond to Java classes. To get an equivalent representation with join point names, use the attribute 'dump'",
          "children": [
            {
              "type": "String",
              "name": "ast"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor AST name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "astAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, considering null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "astChild"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, considering null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "astChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String that uniquely identifies this node",
          "children": [
            {
              "type": "String",
              "name": "astId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if this node is a Java instance of the given name, which corresponds to a simple Java class name of an AST node. For an equivalent function for join point names, use 'instanceOf(joinPointName)'",
          "children": [
            {
              "type": "boolean",
              "name": "astIsInstance"
            },
            {
              "type": "String",
              "name": "className"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the Java class of this node, which is similar to the equivalent node in Clang AST",
          "children": [
            {
              "type": "String",
              "name": "astName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, considering null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "astNumChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "astParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The bit width of the type returned by this join point, in relation to the definitions of its Translation Unit, or undefined if there is no type or bitwidth defined, or if the join point is not in a TranslationUnit",
          "children": [
            {
              "type": "Integer",
              "name": "bitWidth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String list of the names of the join points that form a path from the root to this node",
          "children": [
            {
              "type": "String[]",
              "name": "chain"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the joinpoint chain",
          "children": [
            {
              "type": "joinpoint",
              "name": "chainAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "child"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "children"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the code represented by this node",
          "children": [
            {
              "type": "String",
              "name": "code"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "column"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the given node is a descendant of this node",
          "children": [
            {
              "type": "Boolean",
              "name": "contains"
            },
            {
              "type": "joinpoint",
              "name": "jp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "currentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "JS object associated with this node, containing parsed data of #pragma clava data when the node can be a target of pragmas. This is a special object, managed internally, and cannot be reassigned, to change its contents requires using key-value pairs. If the node can be the target of a pragma, the information stored in this object is persisted between rebuilds.",
          "children": [
            {
              "type": "Object",
              "name": "data"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the depth of this join point in the AST. If it is the root join point returns 0, if it is a child of the root node returns 1, etc.",
          "children": [
            {
              "type": "Integer",
              "name": "depth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves all descendants of the join point",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type, including the node itself",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendantsAndSelf"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endColumn"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endLine"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the file where the code of this node is located, if available",
          "children": [
            {
              "type": "String",
              "name": "filename"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the complete path to the file where the code of this node comes from",
          "children": [
            {
              "type": "String",
              "name": "filepath"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the first child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks in the descendants for the first node of the given type",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstJp"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use 'userField' instead]",
          "children": [
            {
              "type": "Object",
              "name": "getUserField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The value associated with the given property key",
          "children": [
            {
              "type": "Object",
              "name": "getValue"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use hasParent instead]",
          "children": [
            {
              "type": "boolean",
              "name": "hasAstParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the node has children, false otherwise",
          "children": [
            {
              "type": "Boolean",
              "name": "hasChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the given join point or AST node is the same (== test) as the current join point AST node",
          "children": [
            {
              "type": "Boolean",
              "name": "hasNode"
            },
            {
              "type": "Object",
              "name": "nodeOrJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this node has a parent",
          "children": [
            {
              "type": "boolean",
              "name": "hasParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point has a type",
          "children": [
            {
              "type": "Boolean",
              "name": "hasType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns comments that are not explicitly in the AST, but embedded in other nodes",
          "children": [
            {
              "type": "comment[]",
              "name": "inlineComments"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this is a Cilk node (i.e., cilk_spawn, cilk_sync or cilk_for)",
          "children": [
            {
              "type": "Boolean",
              "name": "isCilk"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is part of a system header file",
          "children": [
            {
              "type": "Boolean",
              "name": "isInSystemHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a header (e.g., if condition, for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a loop header (e.g., for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideLoopHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if any descendant or the node itself was defined as a macro",
          "children": [
            {
              "type": "Boolean",
              "name": "isMacro"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the full Java class name of the type of the Java field with the provided name",
          "children": [
            {
              "type": "String",
              "name": "javaFieldType"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'keys' instead, together with 'getValue'] The names of the Java fields of this node. Can be used as key of the attribute 'javaValue'",
          "children": [
            {
              "type": "String[]",
              "name": "javaFields"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'getValue' instead, with the names returned by the attribute 'keys'] Returns the value associated with the provided Java field name",
          "children": [
            {
              "type": "Object",
              "name": "javaValue"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use joinPointType instead (uppercase P)]",
          "children": [
            {
              "type": "String",
              "name": "joinpointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Id that is based on the position of the node in the code, and should remain stable between compilations (warning: only a few nodes - file, function, loop - currently support it)",
          "children": [
            {
              "type": "String",
              "name": "jpId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Java Class instance with the type of the given key",
          "children": [
            {
              "type": "Object",
              "name": "keyType"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A list of the properties currently supported by this node. Can be used as parameter of the attribute 'getValue'",
          "children": [
            {
              "type": "String[]",
              "name": "keys"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[HACK: .descendants(type) does not work in .lara files, after GraalVM update] Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "laraDescendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the last child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "lastChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that came before this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "leftJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "line"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A string with information about the file and code position of this node, if available",
          "children": [
            {
              "type": "String",
              "name": "location"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, ignoring null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "numChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope that is a parent of the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The pragmas associated with this node",
          "children": [
            {
              "type": "pragma[]",
              "name": "pragmas"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that comes after this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "rightJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the 'program' joinpoint",
          "children": [
            {
              "type": "joinpoint",
              "name": "root"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the nodes of the scope of the current join point. If this node has a body (e.g., loop, function) corresponds to the children of the body. Otherwise, returns an empty array",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "scopeNodes"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that came before this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsLeft"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that come after this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsRight"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Converts this join point to a statement, or returns undefined if it was not possible",
          "children": [
            {
              "type": "statement",
              "name": "stmt"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "type",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrives values that have been associated to nodes of the AST with 'setUserField'",
          "children": [
            {
              "type": "Object",
              "name": "userField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a String with the type of the join point",
          "children": [
            {
              "type": "String",
              "name": "joinPointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the current join point is an instance of the given type",
          "children": [
            {
              "type": "Boolean",
              "name": "instanceOf"
            },
            {
              "type": "String",
              "name": "name"
            }
          ]
        },
        {
          "type": "select",
          "clazz": "file",
          "alias": ""
        },
        {
          "type": "action",
          "tooltip": "Adds a path to an include that the current program depends on",
          "children": [
            {
              "type": "void",
              "name": "addExtraInclude"
            },
            {
              "type": "String",
              "name": "path",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Adds a path based on a git repository to an include that the current program depends on",
          "children": [
            {
              "type": "void",
              "name": "addExtraIncludeFromGit"
            },
            {
              "type": "String",
              "name": "gitRepo",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Adds a path based on a git repository to an include that the current program depends on",
          "children": [
            {
              "type": "void",
              "name": "addExtraIncludeFromGit"
            },
            {
              "type": "String",
              "name": "gitRepo",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "path",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Adds a library (e.g., -pthreads) that the current program depends on",
          "children": [
            {
              "type": "void",
              "name": "addExtraLib"
            },
            {
              "type": "String",
              "name": "lib",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Adds a path to a source that the current program depends on",
          "children": [
            {
              "type": "void",
              "name": "addExtraSource"
            },
            {
              "type": "String",
              "name": "path",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Adds a path based on a git repository to a source that the current program depends on",
          "children": [
            {
              "type": "void",
              "name": "addExtraSourceFromGit"
            },
            {
              "type": "String",
              "name": "gitRepo",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Adds a path based on a git repository to a source that the current program depends on",
          "children": [
            {
              "type": "void",
              "name": "addExtraSourceFromGit"
            },
            {
              "type": "String",
              "name": "gitRepo",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "path",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Adds a file join point to the current program",
          "children": [
            {
              "type": "joinpoint",
              "name": "addFile"
            },
            {
              "type": "file",
              "name": "file",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Adds a file join point to the current program, from the given path, which can be either a Java File or a String",
          "children": [
            {
              "type": "joinpoint",
              "name": "addFileFromPath"
            },
            {
              "type": "Object",
              "name": "filepath",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Adds a path based on a git repository to a project that the current program depends on",
          "children": [
            {
              "type": "void",
              "name": "addProjectFromGit"
            },
            {
              "type": "String",
              "name": "gitRepo",
              "defaultValue": ""
            },
            {
              "type": "String[]",
              "name": "libs",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Adds a path based on a git repository to a project that the current program depends on",
          "children": [
            {
              "type": "void",
              "name": "addProjectFromGit"
            },
            {
              "type": "String",
              "name": "gitRepo",
              "defaultValue": ""
            },
            {
              "type": "String[]",
              "name": "libs",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "path",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Registers a function to be executed when the program exits",
          "children": [
            {
              "type": "void",
              "name": "atexit"
            },
            {
              "type": "function",
              "name": "function",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Discards the AST at the top of the ASt stack",
          "children": [
            {
              "type": "void",
              "name": "pop"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Creates a copy of the current AST and pushes it to the top of the AST stack",
          "children": [
            {
              "type": "void",
              "name": "push"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Recompiles the program currently represented by the AST, transforming literal code into AST nodes. Returns true if all files could be parsed correctly, or false otherwise",
          "children": [
            {
              "type": "boolean",
              "name": "rebuild"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Similar to rebuild, but tries to fix compilation errors. Resulting program may not represent the originally intended functionality",
          "children": [
            {
              "type": "void",
              "name": "rebuildFuzzy"
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "insert"
            },
            {
              "type": "[before| after| replace]",
              "name": "position",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "def"
            },
            {
              "type": "String",
              "name": "attribute",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, but not of the nodes in its fields",
          "children": [
            {
              "type": "joinpoint",
              "name": "copy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Copies all enumerable own properties from the source object to the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataAssign"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Clears all properties from the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataClear"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, including the nodes in their fields (only the first level of field nodes, this function is not recursive)",
          "children": [
            {
              "type": "joinpoint",
              "name": "deepCopy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the node associated to this joinpoint from the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "detach"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point after this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point before this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Adds a message that will be printed to the user after weaving finishes. Identical messages are removed",
          "children": [
            {
              "type": "void",
              "name": "messageToUser"
            },
            {
              "type": "String",
              "name": "message",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the children of this node",
          "children": [
            {
              "type": "void",
              "name": "removeChildren"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this node with the given node",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of join points",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of strings",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWithStrings"
            },
            {
              "type": "String[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Setting data directly is not supported, this action just emits a warning and does nothing",
          "children": [
            {
              "type": "void",
              "name": "setData"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the first child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setFirstChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String[]",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the last child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setLastChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the type of a node, if it has a type",
          "children": [
            {
              "type": "void",
              "name": "setType"
            },
            {
              "type": "type",
              "name": "type",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Associates arbitrary values to nodes of the AST",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "String",
              "name": "fieldName",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a map",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "Map",
              "name": "fieldNameAndValue",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the value associated with the given property key",
          "children": [
            {
              "type": "joinpoint",
              "name": "setValue"
            },
            {
              "type": "String",
              "name": "key",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "suffix",
              "defaultValue": ""
            }
          ]
        }
      ]
    },
    {
      "type": "joinpoint",
      "name": "qualType",
      "extends": "type",
      "children": [
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "qualifiers"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "type",
              "name": "unqualifiedType"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Integer[]",
              "name": "arrayDims"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Integer",
              "name": "arraySize"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The bit width of this type in the Translation Unit of the given join point, or undefined if there is no bitwidth defined",
          "children": [
            {
              "type": "Integer",
              "name": "bitWidth"
            },
            {
              "type": "joinpoint",
              "name": "reference"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "constant"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Single-step desugar. Returns the type itself if it does not have sugar",
          "children": [
            {
              "type": "type",
              "name": "desugar"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Completely desugars the type",
          "children": [
            {
              "type": "type",
              "name": "desugarAll"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A tree representation of the fields of this type",
          "children": [
            {
              "type": "String",
              "name": "fieldTree"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "hasSugar"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "hasTemplateArgs"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isArray"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "True if this is a type declared with the 'auto' keyword",
          "children": [
            {
              "type": "Boolean",
              "name": "isAuto"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isBuiltin"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isPointer"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isTopLevel"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String",
              "name": "kind"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Ignores certain types (e.g., DecayedType)",
          "children": [
            {
              "type": "type",
              "name": "normalize"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "templateArgsStrings"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "type[]",
              "name": "templateArgsTypes"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Maps names of join point fields that represent type join points, to their respective values",
          "children": [
            {
              "type": "Map",
              "name": "typeFields"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "If the type encapsulates another type, returns the encapsulated type",
          "children": [
            {
              "type": "type",
              "name": "unwrap"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "attributes"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "selects"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "actions"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "ancestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with a dump of the AST representation starting from this node. This representation corresponds to the internal Java representation of the ClavaAst, where the node names correspond to Java classes. To get an equivalent representation with join point names, use the attribute 'dump'",
          "children": [
            {
              "type": "String",
              "name": "ast"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor AST name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "astAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, considering null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "astChild"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, considering null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "astChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String that uniquely identifies this node",
          "children": [
            {
              "type": "String",
              "name": "astId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if this node is a Java instance of the given name, which corresponds to a simple Java class name of an AST node. For an equivalent function for join point names, use 'instanceOf(joinPointName)'",
          "children": [
            {
              "type": "boolean",
              "name": "astIsInstance"
            },
            {
              "type": "String",
              "name": "className"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the Java class of this node, which is similar to the equivalent node in Clang AST",
          "children": [
            {
              "type": "String",
              "name": "astName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, considering null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "astNumChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "astParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The bit width of the type returned by this join point, in relation to the definitions of its Translation Unit, or undefined if there is no type or bitwidth defined, or if the join point is not in a TranslationUnit",
          "children": [
            {
              "type": "Integer",
              "name": "bitWidth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String list of the names of the join points that form a path from the root to this node",
          "children": [
            {
              "type": "String[]",
              "name": "chain"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the joinpoint chain",
          "children": [
            {
              "type": "joinpoint",
              "name": "chainAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "child"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "children"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the code represented by this node",
          "children": [
            {
              "type": "String",
              "name": "code"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "column"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the given node is a descendant of this node",
          "children": [
            {
              "type": "Boolean",
              "name": "contains"
            },
            {
              "type": "joinpoint",
              "name": "jp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "currentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "JS object associated with this node, containing parsed data of #pragma clava data when the node can be a target of pragmas. This is a special object, managed internally, and cannot be reassigned, to change its contents requires using key-value pairs. If the node can be the target of a pragma, the information stored in this object is persisted between rebuilds.",
          "children": [
            {
              "type": "Object",
              "name": "data"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the depth of this join point in the AST. If it is the root join point returns 0, if it is a child of the root node returns 1, etc.",
          "children": [
            {
              "type": "Integer",
              "name": "depth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves all descendants of the join point",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type, including the node itself",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendantsAndSelf"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endColumn"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endLine"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the file where the code of this node is located, if available",
          "children": [
            {
              "type": "String",
              "name": "filename"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the complete path to the file where the code of this node comes from",
          "children": [
            {
              "type": "String",
              "name": "filepath"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the first child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks in the descendants for the first node of the given type",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstJp"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use 'userField' instead]",
          "children": [
            {
              "type": "Object",
              "name": "getUserField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The value associated with the given property key",
          "children": [
            {
              "type": "Object",
              "name": "getValue"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use hasParent instead]",
          "children": [
            {
              "type": "boolean",
              "name": "hasAstParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the node has children, false otherwise",
          "children": [
            {
              "type": "Boolean",
              "name": "hasChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the given join point or AST node is the same (== test) as the current join point AST node",
          "children": [
            {
              "type": "Boolean",
              "name": "hasNode"
            },
            {
              "type": "Object",
              "name": "nodeOrJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this node has a parent",
          "children": [
            {
              "type": "boolean",
              "name": "hasParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point has a type",
          "children": [
            {
              "type": "Boolean",
              "name": "hasType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns comments that are not explicitly in the AST, but embedded in other nodes",
          "children": [
            {
              "type": "comment[]",
              "name": "inlineComments"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this is a Cilk node (i.e., cilk_spawn, cilk_sync or cilk_for)",
          "children": [
            {
              "type": "Boolean",
              "name": "isCilk"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is part of a system header file",
          "children": [
            {
              "type": "Boolean",
              "name": "isInSystemHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a header (e.g., if condition, for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a loop header (e.g., for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideLoopHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if any descendant or the node itself was defined as a macro",
          "children": [
            {
              "type": "Boolean",
              "name": "isMacro"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the full Java class name of the type of the Java field with the provided name",
          "children": [
            {
              "type": "String",
              "name": "javaFieldType"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'keys' instead, together with 'getValue'] The names of the Java fields of this node. Can be used as key of the attribute 'javaValue'",
          "children": [
            {
              "type": "String[]",
              "name": "javaFields"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'getValue' instead, with the names returned by the attribute 'keys'] Returns the value associated with the provided Java field name",
          "children": [
            {
              "type": "Object",
              "name": "javaValue"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use joinPointType instead (uppercase P)]",
          "children": [
            {
              "type": "String",
              "name": "joinpointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Id that is based on the position of the node in the code, and should remain stable between compilations (warning: only a few nodes - file, function, loop - currently support it)",
          "children": [
            {
              "type": "String",
              "name": "jpId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Java Class instance with the type of the given key",
          "children": [
            {
              "type": "Object",
              "name": "keyType"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A list of the properties currently supported by this node. Can be used as parameter of the attribute 'getValue'",
          "children": [
            {
              "type": "String[]",
              "name": "keys"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[HACK: .descendants(type) does not work in .lara files, after GraalVM update] Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "laraDescendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the last child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "lastChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that came before this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "leftJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "line"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A string with information about the file and code position of this node, if available",
          "children": [
            {
              "type": "String",
              "name": "location"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, ignoring null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "numChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope that is a parent of the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The pragmas associated with this node",
          "children": [
            {
              "type": "pragma[]",
              "name": "pragmas"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that comes after this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "rightJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the 'program' joinpoint",
          "children": [
            {
              "type": "joinpoint",
              "name": "root"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the nodes of the scope of the current join point. If this node has a body (e.g., loop, function) corresponds to the children of the body. Otherwise, returns an empty array",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "scopeNodes"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that came before this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsLeft"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that come after this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsRight"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Converts this join point to a statement, or returns undefined if it was not possible",
          "children": [
            {
              "type": "statement",
              "name": "stmt"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "type",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrives values that have been associated to nodes of the AST with 'setUserField'",
          "children": [
            {
              "type": "Object",
              "name": "userField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a String with the type of the join point",
          "children": [
            {
              "type": "String",
              "name": "joinPointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the current join point is an instance of the given type",
          "children": [
            {
              "type": "Boolean",
              "name": "instanceOf"
            },
            {
              "type": "String",
              "name": "name"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Returns a copy of this type with the qualifier const",
          "children": [
            {
              "type": "type",
              "name": "asConst"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the desugared type of this type",
          "children": [
            {
              "type": "void",
              "name": "setDesugar"
            },
            {
              "type": "type",
              "name": "desugaredType",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the template argument types of a template type",
          "children": [
            {
              "type": "void",
              "name": "setTemplateArgsTypes"
            },
            {
              "type": "type[]",
              "name": "templateArgTypes",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets a single template argument type of a template type",
          "children": [
            {
              "type": "void",
              "name": "setTemplateArgsTypes"
            },
            {
              "type": "Integer",
              "name": "index",
              "defaultValue": ""
            },
            {
              "type": "type",
              "name": "templateArgType",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Changes a single occurence of a type field that has the current value with new value. Returns true if there was a change",
          "children": [
            {
              "type": "boolean",
              "name": "setTypeFieldByValueRecursive"
            },
            {
              "type": "Object",
              "name": "currentValue",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "newValue",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces an underlying type of this instance with new type, if it matches the old type. Returns true if there were changes",
          "children": [
            {
              "type": "type",
              "name": "setUnderlyingType"
            },
            {
              "type": "type",
              "name": "oldValue",
              "defaultValue": ""
            },
            {
              "type": "type",
              "name": "newValue",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "insert"
            },
            {
              "type": "[before| after| replace]",
              "name": "position",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "def"
            },
            {
              "type": "String",
              "name": "attribute",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, but not of the nodes in its fields",
          "children": [
            {
              "type": "joinpoint",
              "name": "copy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Copies all enumerable own properties from the source object to the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataAssign"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Clears all properties from the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataClear"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, including the nodes in their fields (only the first level of field nodes, this function is not recursive)",
          "children": [
            {
              "type": "joinpoint",
              "name": "deepCopy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the node associated to this joinpoint from the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "detach"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point after this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point before this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Adds a message that will be printed to the user after weaving finishes. Identical messages are removed",
          "children": [
            {
              "type": "void",
              "name": "messageToUser"
            },
            {
              "type": "String",
              "name": "message",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the children of this node",
          "children": [
            {
              "type": "void",
              "name": "removeChildren"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this node with the given node",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of join points",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of strings",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWithStrings"
            },
            {
              "type": "String[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Setting data directly is not supported, this action just emits a warning and does nothing",
          "children": [
            {
              "type": "void",
              "name": "setData"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the first child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setFirstChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String[]",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the last child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setLastChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the type of a node, if it has a type",
          "children": [
            {
              "type": "void",
              "name": "setType"
            },
            {
              "type": "type",
              "name": "type",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Associates arbitrary values to nodes of the AST",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "String",
              "name": "fieldName",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a map",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "Map",
              "name": "fieldNameAndValue",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the value associated with the given property key",
          "children": [
            {
              "type": "joinpoint",
              "name": "setValue"
            },
            {
              "type": "String",
              "name": "key",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "suffix",
              "defaultValue": ""
            }
          ]
        }
      ]
    },
    {
      "type": "joinpoint",
      "name": "record",
      "defaultAttr": "name",
      "extends": "namedDecl",
      "tooltip": "Common class of struct, union and class",
      "children": [
        {
          "type": "attribute",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "fields"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "function[]",
              "name": "functions"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this particular join point is an implementation (i.e. has its body fully specified), false otherwise",
          "children": [
            {
              "type": "Boolean",
              "name": "isImplementation"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this particular join point is a prototype (i.e. does not have its body fully specified), false otherwise",
          "children": [
            {
              "type": "Boolean",
              "name": "isPrototype"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String",
              "name": "kind"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isPublic"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String",
              "name": "name"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String",
              "name": "qualifiedName"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String",
              "name": "qualifiedPrefix"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The attributes (e.g. Pure, CUDAGlobal) associated to this decl",
          "children": [
            {
              "type": "attribute[]",
              "name": "attrs"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "attributes"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "selects"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "actions"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "ancestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with a dump of the AST representation starting from this node. This representation corresponds to the internal Java representation of the ClavaAst, where the node names correspond to Java classes. To get an equivalent representation with join point names, use the attribute 'dump'",
          "children": [
            {
              "type": "String",
              "name": "ast"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor AST name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "astAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, considering null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "astChild"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, considering null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "astChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String that uniquely identifies this node",
          "children": [
            {
              "type": "String",
              "name": "astId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if this node is a Java instance of the given name, which corresponds to a simple Java class name of an AST node. For an equivalent function for join point names, use 'instanceOf(joinPointName)'",
          "children": [
            {
              "type": "boolean",
              "name": "astIsInstance"
            },
            {
              "type": "String",
              "name": "className"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the Java class of this node, which is similar to the equivalent node in Clang AST",
          "children": [
            {
              "type": "String",
              "name": "astName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, considering null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "astNumChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "astParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The bit width of the type returned by this join point, in relation to the definitions of its Translation Unit, or undefined if there is no type or bitwidth defined, or if the join point is not in a TranslationUnit",
          "children": [
            {
              "type": "Integer",
              "name": "bitWidth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String list of the names of the join points that form a path from the root to this node",
          "children": [
            {
              "type": "String[]",
              "name": "chain"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the joinpoint chain",
          "children": [
            {
              "type": "joinpoint",
              "name": "chainAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "child"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "children"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the code represented by this node",
          "children": [
            {
              "type": "String",
              "name": "code"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "column"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the given node is a descendant of this node",
          "children": [
            {
              "type": "Boolean",
              "name": "contains"
            },
            {
              "type": "joinpoint",
              "name": "jp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "currentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "JS object associated with this node, containing parsed data of #pragma clava data when the node can be a target of pragmas. This is a special object, managed internally, and cannot be reassigned, to change its contents requires using key-value pairs. If the node can be the target of a pragma, the information stored in this object is persisted between rebuilds.",
          "children": [
            {
              "type": "Object",
              "name": "data"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the depth of this join point in the AST. If it is the root join point returns 0, if it is a child of the root node returns 1, etc.",
          "children": [
            {
              "type": "Integer",
              "name": "depth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves all descendants of the join point",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type, including the node itself",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendantsAndSelf"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endColumn"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endLine"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the file where the code of this node is located, if available",
          "children": [
            {
              "type": "String",
              "name": "filename"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the complete path to the file where the code of this node comes from",
          "children": [
            {
              "type": "String",
              "name": "filepath"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the first child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks in the descendants for the first node of the given type",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstJp"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use 'userField' instead]",
          "children": [
            {
              "type": "Object",
              "name": "getUserField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The value associated with the given property key",
          "children": [
            {
              "type": "Object",
              "name": "getValue"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use hasParent instead]",
          "children": [
            {
              "type": "boolean",
              "name": "hasAstParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the node has children, false otherwise",
          "children": [
            {
              "type": "Boolean",
              "name": "hasChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the given join point or AST node is the same (== test) as the current join point AST node",
          "children": [
            {
              "type": "Boolean",
              "name": "hasNode"
            },
            {
              "type": "Object",
              "name": "nodeOrJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this node has a parent",
          "children": [
            {
              "type": "boolean",
              "name": "hasParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point has a type",
          "children": [
            {
              "type": "Boolean",
              "name": "hasType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns comments that are not explicitly in the AST, but embedded in other nodes",
          "children": [
            {
              "type": "comment[]",
              "name": "inlineComments"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this is a Cilk node (i.e., cilk_spawn, cilk_sync or cilk_for)",
          "children": [
            {
              "type": "Boolean",
              "name": "isCilk"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is part of a system header file",
          "children": [
            {
              "type": "Boolean",
              "name": "isInSystemHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a header (e.g., if condition, for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a loop header (e.g., for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideLoopHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if any descendant or the node itself was defined as a macro",
          "children": [
            {
              "type": "Boolean",
              "name": "isMacro"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the full Java class name of the type of the Java field with the provided name",
          "children": [
            {
              "type": "String",
              "name": "javaFieldType"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'keys' instead, together with 'getValue'] The names of the Java fields of this node. Can be used as key of the attribute 'javaValue'",
          "children": [
            {
              "type": "String[]",
              "name": "javaFields"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'getValue' instead, with the names returned by the attribute 'keys'] Returns the value associated with the provided Java field name",
          "children": [
            {
              "type": "Object",
              "name": "javaValue"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use joinPointType instead (uppercase P)]",
          "children": [
            {
              "type": "String",
              "name": "joinpointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Id that is based on the position of the node in the code, and should remain stable between compilations (warning: only a few nodes - file, function, loop - currently support it)",
          "children": [
            {
              "type": "String",
              "name": "jpId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Java Class instance with the type of the given key",
          "children": [
            {
              "type": "Object",
              "name": "keyType"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A list of the properties currently supported by this node. Can be used as parameter of the attribute 'getValue'",
          "children": [
            {
              "type": "String[]",
              "name": "keys"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[HACK: .descendants(type) does not work in .lara files, after GraalVM update] Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "laraDescendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the last child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "lastChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that came before this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "leftJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "line"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A string with information about the file and code position of this node, if available",
          "children": [
            {
              "type": "String",
              "name": "location"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, ignoring null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "numChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope that is a parent of the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The pragmas associated with this node",
          "children": [
            {
              "type": "pragma[]",
              "name": "pragmas"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that comes after this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "rightJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the 'program' joinpoint",
          "children": [
            {
              "type": "joinpoint",
              "name": "root"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the nodes of the scope of the current join point. If this node has a body (e.g., loop, function) corresponds to the children of the body. Otherwise, returns an empty array",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "scopeNodes"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that came before this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsLeft"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that come after this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsRight"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Converts this join point to a statement, or returns undefined if it was not possible",
          "children": [
            {
              "type": "statement",
              "name": "stmt"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "type",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrives values that have been associated to nodes of the AST with 'setUserField'",
          "children": [
            {
              "type": "Object",
              "name": "userField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a String with the type of the join point",
          "children": [
            {
              "type": "String",
              "name": "joinPointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the current join point is an instance of the given type",
          "children": [
            {
              "type": "Boolean",
              "name": "instanceOf"
            },
            {
              "type": "String",
              "name": "name"
            }
          ]
        },
        {
          "type": "select",
          "clazz": "field",
          "alias": ""
        },
        {
          "type": "action",
          "tooltip": "Adds a field to a record (struct, class).",
          "children": [
            {
              "type": "void",
              "name": "addField"
            },
            {
              "type": "field",
              "name": "field",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the name of this namedDecl",
          "children": [
            {
              "type": "void",
              "name": "setName"
            },
            {
              "type": "String",
              "name": "name",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the qualified name of this namedDecl (changes both the name and qualified prefix)",
          "children": [
            {
              "type": "void",
              "name": "setQualifiedName"
            },
            {
              "type": "String",
              "name": "name",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the qualified prefix of this namedDecl",
          "children": [
            {
              "type": "void",
              "name": "setQualifiedPrefix"
            },
            {
              "type": "String",
              "name": "qualifiedPrefix",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "insert"
            },
            {
              "type": "[before| after| replace]",
              "name": "position",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "def"
            },
            {
              "type": "String",
              "name": "attribute",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, but not of the nodes in its fields",
          "children": [
            {
              "type": "joinpoint",
              "name": "copy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Copies all enumerable own properties from the source object to the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataAssign"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Clears all properties from the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataClear"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, including the nodes in their fields (only the first level of field nodes, this function is not recursive)",
          "children": [
            {
              "type": "joinpoint",
              "name": "deepCopy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the node associated to this joinpoint from the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "detach"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point after this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point before this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Adds a message that will be printed to the user after weaving finishes. Identical messages are removed",
          "children": [
            {
              "type": "void",
              "name": "messageToUser"
            },
            {
              "type": "String",
              "name": "message",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the children of this node",
          "children": [
            {
              "type": "void",
              "name": "removeChildren"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this node with the given node",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of join points",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of strings",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWithStrings"
            },
            {
              "type": "String[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Setting data directly is not supported, this action just emits a warning and does nothing",
          "children": [
            {
              "type": "void",
              "name": "setData"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the first child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setFirstChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String[]",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the last child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setLastChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the type of a node, if it has a type",
          "children": [
            {
              "type": "void",
              "name": "setType"
            },
            {
              "type": "type",
              "name": "type",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Associates arbitrary values to nodes of the AST",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "String",
              "name": "fieldName",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a map",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "Map",
              "name": "fieldNameAndValue",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the value associated with the given property key",
          "children": [
            {
              "type": "joinpoint",
              "name": "setValue"
            },
            {
              "type": "String",
              "name": "key",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "suffix",
              "defaultValue": ""
            }
          ]
        }
      ]
    },
    {
      "type": "joinpoint",
      "name": "returnStmt",
      "extends": "statement",
      "children": [
        {
          "type": "attribute",
          "children": [
            {
              "type": "expression",
              "name": "returnExpr"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isFirst"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isLast"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "attributes"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "selects"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "actions"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "ancestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with a dump of the AST representation starting from this node. This representation corresponds to the internal Java representation of the ClavaAst, where the node names correspond to Java classes. To get an equivalent representation with join point names, use the attribute 'dump'",
          "children": [
            {
              "type": "String",
              "name": "ast"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor AST name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "astAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, considering null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "astChild"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, considering null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "astChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String that uniquely identifies this node",
          "children": [
            {
              "type": "String",
              "name": "astId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if this node is a Java instance of the given name, which corresponds to a simple Java class name of an AST node. For an equivalent function for join point names, use 'instanceOf(joinPointName)'",
          "children": [
            {
              "type": "boolean",
              "name": "astIsInstance"
            },
            {
              "type": "String",
              "name": "className"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the Java class of this node, which is similar to the equivalent node in Clang AST",
          "children": [
            {
              "type": "String",
              "name": "astName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, considering null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "astNumChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "astParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The bit width of the type returned by this join point, in relation to the definitions of its Translation Unit, or undefined if there is no type or bitwidth defined, or if the join point is not in a TranslationUnit",
          "children": [
            {
              "type": "Integer",
              "name": "bitWidth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String list of the names of the join points that form a path from the root to this node",
          "children": [
            {
              "type": "String[]",
              "name": "chain"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the joinpoint chain",
          "children": [
            {
              "type": "joinpoint",
              "name": "chainAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "child"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "children"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the code represented by this node",
          "children": [
            {
              "type": "String",
              "name": "code"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "column"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the given node is a descendant of this node",
          "children": [
            {
              "type": "Boolean",
              "name": "contains"
            },
            {
              "type": "joinpoint",
              "name": "jp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "currentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "JS object associated with this node, containing parsed data of #pragma clava data when the node can be a target of pragmas. This is a special object, managed internally, and cannot be reassigned, to change its contents requires using key-value pairs. If the node can be the target of a pragma, the information stored in this object is persisted between rebuilds.",
          "children": [
            {
              "type": "Object",
              "name": "data"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the depth of this join point in the AST. If it is the root join point returns 0, if it is a child of the root node returns 1, etc.",
          "children": [
            {
              "type": "Integer",
              "name": "depth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves all descendants of the join point",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type, including the node itself",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendantsAndSelf"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endColumn"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endLine"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the file where the code of this node is located, if available",
          "children": [
            {
              "type": "String",
              "name": "filename"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the complete path to the file where the code of this node comes from",
          "children": [
            {
              "type": "String",
              "name": "filepath"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the first child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks in the descendants for the first node of the given type",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstJp"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use 'userField' instead]",
          "children": [
            {
              "type": "Object",
              "name": "getUserField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The value associated with the given property key",
          "children": [
            {
              "type": "Object",
              "name": "getValue"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use hasParent instead]",
          "children": [
            {
              "type": "boolean",
              "name": "hasAstParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the node has children, false otherwise",
          "children": [
            {
              "type": "Boolean",
              "name": "hasChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the given join point or AST node is the same (== test) as the current join point AST node",
          "children": [
            {
              "type": "Boolean",
              "name": "hasNode"
            },
            {
              "type": "Object",
              "name": "nodeOrJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this node has a parent",
          "children": [
            {
              "type": "boolean",
              "name": "hasParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point has a type",
          "children": [
            {
              "type": "Boolean",
              "name": "hasType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns comments that are not explicitly in the AST, but embedded in other nodes",
          "children": [
            {
              "type": "comment[]",
              "name": "inlineComments"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this is a Cilk node (i.e., cilk_spawn, cilk_sync or cilk_for)",
          "children": [
            {
              "type": "Boolean",
              "name": "isCilk"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is part of a system header file",
          "children": [
            {
              "type": "Boolean",
              "name": "isInSystemHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a header (e.g., if condition, for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a loop header (e.g., for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideLoopHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if any descendant or the node itself was defined as a macro",
          "children": [
            {
              "type": "Boolean",
              "name": "isMacro"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the full Java class name of the type of the Java field with the provided name",
          "children": [
            {
              "type": "String",
              "name": "javaFieldType"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'keys' instead, together with 'getValue'] The names of the Java fields of this node. Can be used as key of the attribute 'javaValue'",
          "children": [
            {
              "type": "String[]",
              "name": "javaFields"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'getValue' instead, with the names returned by the attribute 'keys'] Returns the value associated with the provided Java field name",
          "children": [
            {
              "type": "Object",
              "name": "javaValue"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use joinPointType instead (uppercase P)]",
          "children": [
            {
              "type": "String",
              "name": "joinpointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Id that is based on the position of the node in the code, and should remain stable between compilations (warning: only a few nodes - file, function, loop - currently support it)",
          "children": [
            {
              "type": "String",
              "name": "jpId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Java Class instance with the type of the given key",
          "children": [
            {
              "type": "Object",
              "name": "keyType"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A list of the properties currently supported by this node. Can be used as parameter of the attribute 'getValue'",
          "children": [
            {
              "type": "String[]",
              "name": "keys"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[HACK: .descendants(type) does not work in .lara files, after GraalVM update] Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "laraDescendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the last child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "lastChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that came before this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "leftJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "line"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A string with information about the file and code position of this node, if available",
          "children": [
            {
              "type": "String",
              "name": "location"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, ignoring null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "numChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope that is a parent of the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The pragmas associated with this node",
          "children": [
            {
              "type": "pragma[]",
              "name": "pragmas"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that comes after this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "rightJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the 'program' joinpoint",
          "children": [
            {
              "type": "joinpoint",
              "name": "root"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the nodes of the scope of the current join point. If this node has a body (e.g., loop, function) corresponds to the children of the body. Otherwise, returns an empty array",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "scopeNodes"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that came before this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsLeft"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that come after this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsRight"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Converts this join point to a statement, or returns undefined if it was not possible",
          "children": [
            {
              "type": "statement",
              "name": "stmt"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "type",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrives values that have been associated to nodes of the AST with 'setUserField'",
          "children": [
            {
              "type": "Object",
              "name": "userField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a String with the type of the join point",
          "children": [
            {
              "type": "String",
              "name": "joinPointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the current join point is an instance of the given type",
          "children": [
            {
              "type": "Boolean",
              "name": "instanceOf"
            },
            {
              "type": "String",
              "name": "name"
            }
          ]
        },
        {
          "type": "select",
          "clazz": "expression",
          "alias": "returnExpr"
        },
        {
          "type": "select",
          "clazz": "expression",
          "alias": "expr"
        },
        {
          "type": "select",
          "clazz": "expression",
          "alias": "childExpr"
        },
        {
          "type": "select",
          "clazz": "call",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "call",
          "alias": "stmtCall"
        },
        {
          "type": "select",
          "clazz": "memberCall",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "memberAccess",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "arrayAccess",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "vardecl",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "varref",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "op",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "binaryOp",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "unaryOp",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "newExpr",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "deleteExpr",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "cilkSpawn",
          "alias": ""
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "insert"
            },
            {
              "type": "[before| after| replace]",
              "name": "position",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "def"
            },
            {
              "type": "String",
              "name": "attribute",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, but not of the nodes in its fields",
          "children": [
            {
              "type": "joinpoint",
              "name": "copy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Copies all enumerable own properties from the source object to the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataAssign"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Clears all properties from the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataClear"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, including the nodes in their fields (only the first level of field nodes, this function is not recursive)",
          "children": [
            {
              "type": "joinpoint",
              "name": "deepCopy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the node associated to this joinpoint from the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "detach"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point after this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point before this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Adds a message that will be printed to the user after weaving finishes. Identical messages are removed",
          "children": [
            {
              "type": "void",
              "name": "messageToUser"
            },
            {
              "type": "String",
              "name": "message",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the children of this node",
          "children": [
            {
              "type": "void",
              "name": "removeChildren"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this node with the given node",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of join points",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of strings",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWithStrings"
            },
            {
              "type": "String[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Setting data directly is not supported, this action just emits a warning and does nothing",
          "children": [
            {
              "type": "void",
              "name": "setData"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the first child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setFirstChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String[]",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the last child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setLastChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the type of a node, if it has a type",
          "children": [
            {
              "type": "void",
              "name": "setType"
            },
            {
              "type": "type",
              "name": "type",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Associates arbitrary values to nodes of the AST",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "String",
              "name": "fieldName",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a map",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "Map",
              "name": "fieldNameAndValue",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the value associated with the given property key",
          "children": [
            {
              "type": "joinpoint",
              "name": "setValue"
            },
            {
              "type": "String",
              "name": "key",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "suffix",
              "defaultValue": ""
            }
          ]
        }
      ]
    },
    {
      "type": "joinpoint",
      "name": "scope",
      "extends": "statement",
      "tooltip": "Represents a group of statements",
      "children": [
        {
          "type": "attribute",
          "tooltip": "Returns the descendant statements of this scope, excluding other scopes, loops, ifs and wrapper statements",
          "children": [
            {
              "type": "statement[]",
              "name": "allStmts"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "statement",
              "name": "firstStmt"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "statement",
              "name": "lastStmt"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the scope does not have curly braces",
          "children": [
            {
              "type": "Boolean",
              "name": "naked"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The number of statements in the scope, including the statements inside the declaration and bodies of structures such as ifs and loops, and not considering comments and pragmas",
          "children": [
            {
              "type": "Long",
              "name": "numStatements"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The number of statements in the scope, not considering comments and pragmas. If flat is true, does not consider the statements inside structures such as ifs and loops (e.g., a loop counts as one statement)",
          "children": [
            {
              "type": "Long",
              "name": "numStatements"
            },
            {
              "type": "Boolean",
              "name": "flat"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The statement that owns the scope (e.g., function, loop...)",
          "children": [
            {
              "type": "joinpoint",
              "name": "owner"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the direct (children) statements of this scope",
          "children": [
            {
              "type": "statement[]",
              "name": "stmts"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isFirst"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isLast"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "attributes"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "selects"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "actions"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "ancestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with a dump of the AST representation starting from this node. This representation corresponds to the internal Java representation of the ClavaAst, where the node names correspond to Java classes. To get an equivalent representation with join point names, use the attribute 'dump'",
          "children": [
            {
              "type": "String",
              "name": "ast"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor AST name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "astAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, considering null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "astChild"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, considering null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "astChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String that uniquely identifies this node",
          "children": [
            {
              "type": "String",
              "name": "astId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if this node is a Java instance of the given name, which corresponds to a simple Java class name of an AST node. For an equivalent function for join point names, use 'instanceOf(joinPointName)'",
          "children": [
            {
              "type": "boolean",
              "name": "astIsInstance"
            },
            {
              "type": "String",
              "name": "className"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the Java class of this node, which is similar to the equivalent node in Clang AST",
          "children": [
            {
              "type": "String",
              "name": "astName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, considering null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "astNumChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "astParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The bit width of the type returned by this join point, in relation to the definitions of its Translation Unit, or undefined if there is no type or bitwidth defined, or if the join point is not in a TranslationUnit",
          "children": [
            {
              "type": "Integer",
              "name": "bitWidth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String list of the names of the join points that form a path from the root to this node",
          "children": [
            {
              "type": "String[]",
              "name": "chain"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the joinpoint chain",
          "children": [
            {
              "type": "joinpoint",
              "name": "chainAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "child"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "children"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the code represented by this node",
          "children": [
            {
              "type": "String",
              "name": "code"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "column"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the given node is a descendant of this node",
          "children": [
            {
              "type": "Boolean",
              "name": "contains"
            },
            {
              "type": "joinpoint",
              "name": "jp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "currentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "JS object associated with this node, containing parsed data of #pragma clava data when the node can be a target of pragmas. This is a special object, managed internally, and cannot be reassigned, to change its contents requires using key-value pairs. If the node can be the target of a pragma, the information stored in this object is persisted between rebuilds.",
          "children": [
            {
              "type": "Object",
              "name": "data"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the depth of this join point in the AST. If it is the root join point returns 0, if it is a child of the root node returns 1, etc.",
          "children": [
            {
              "type": "Integer",
              "name": "depth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves all descendants of the join point",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type, including the node itself",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendantsAndSelf"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endColumn"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endLine"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the file where the code of this node is located, if available",
          "children": [
            {
              "type": "String",
              "name": "filename"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the complete path to the file where the code of this node comes from",
          "children": [
            {
              "type": "String",
              "name": "filepath"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the first child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks in the descendants for the first node of the given type",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstJp"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use 'userField' instead]",
          "children": [
            {
              "type": "Object",
              "name": "getUserField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The value associated with the given property key",
          "children": [
            {
              "type": "Object",
              "name": "getValue"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use hasParent instead]",
          "children": [
            {
              "type": "boolean",
              "name": "hasAstParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the node has children, false otherwise",
          "children": [
            {
              "type": "Boolean",
              "name": "hasChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the given join point or AST node is the same (== test) as the current join point AST node",
          "children": [
            {
              "type": "Boolean",
              "name": "hasNode"
            },
            {
              "type": "Object",
              "name": "nodeOrJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this node has a parent",
          "children": [
            {
              "type": "boolean",
              "name": "hasParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point has a type",
          "children": [
            {
              "type": "Boolean",
              "name": "hasType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns comments that are not explicitly in the AST, but embedded in other nodes",
          "children": [
            {
              "type": "comment[]",
              "name": "inlineComments"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this is a Cilk node (i.e., cilk_spawn, cilk_sync or cilk_for)",
          "children": [
            {
              "type": "Boolean",
              "name": "isCilk"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is part of a system header file",
          "children": [
            {
              "type": "Boolean",
              "name": "isInSystemHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a header (e.g., if condition, for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a loop header (e.g., for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideLoopHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if any descendant or the node itself was defined as a macro",
          "children": [
            {
              "type": "Boolean",
              "name": "isMacro"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the full Java class name of the type of the Java field with the provided name",
          "children": [
            {
              "type": "String",
              "name": "javaFieldType"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'keys' instead, together with 'getValue'] The names of the Java fields of this node. Can be used as key of the attribute 'javaValue'",
          "children": [
            {
              "type": "String[]",
              "name": "javaFields"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'getValue' instead, with the names returned by the attribute 'keys'] Returns the value associated with the provided Java field name",
          "children": [
            {
              "type": "Object",
              "name": "javaValue"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use joinPointType instead (uppercase P)]",
          "children": [
            {
              "type": "String",
              "name": "joinpointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Id that is based on the position of the node in the code, and should remain stable between compilations (warning: only a few nodes - file, function, loop - currently support it)",
          "children": [
            {
              "type": "String",
              "name": "jpId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Java Class instance with the type of the given key",
          "children": [
            {
              "type": "Object",
              "name": "keyType"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A list of the properties currently supported by this node. Can be used as parameter of the attribute 'getValue'",
          "children": [
            {
              "type": "String[]",
              "name": "keys"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[HACK: .descendants(type) does not work in .lara files, after GraalVM update] Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "laraDescendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the last child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "lastChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that came before this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "leftJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "line"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A string with information about the file and code position of this node, if available",
          "children": [
            {
              "type": "String",
              "name": "location"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, ignoring null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "numChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope that is a parent of the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The pragmas associated with this node",
          "children": [
            {
              "type": "pragma[]",
              "name": "pragmas"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that comes after this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "rightJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the 'program' joinpoint",
          "children": [
            {
              "type": "joinpoint",
              "name": "root"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the nodes of the scope of the current join point. If this node has a body (e.g., loop, function) corresponds to the children of the body. Otherwise, returns an empty array",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "scopeNodes"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that came before this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsLeft"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that come after this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsRight"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Converts this join point to a statement, or returns undefined if it was not possible",
          "children": [
            {
              "type": "statement",
              "name": "stmt"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "type",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrives values that have been associated to nodes of the AST with 'setUserField'",
          "children": [
            {
              "type": "Object",
              "name": "userField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a String with the type of the join point",
          "children": [
            {
              "type": "String",
              "name": "joinPointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the current join point is an instance of the given type",
          "children": [
            {
              "type": "Boolean",
              "name": "instanceOf"
            },
            {
              "type": "String",
              "name": "name"
            }
          ]
        },
        {
          "type": "select",
          "clazz": "statement",
          "alias": "stmt"
        },
        {
          "type": "select",
          "clazz": "statement",
          "alias": "childStmt"
        },
        {
          "type": "select",
          "clazz": "scope",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "if",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "loop",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "pragma",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "marker",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "tag",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "omp",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "comment",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "returnStmt",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "cilkFor",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "cilkSync",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "expression",
          "alias": "expr"
        },
        {
          "type": "select",
          "clazz": "expression",
          "alias": "childExpr"
        },
        {
          "type": "select",
          "clazz": "call",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "call",
          "alias": "stmtCall"
        },
        {
          "type": "select",
          "clazz": "memberCall",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "memberAccess",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "arrayAccess",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "vardecl",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "varref",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "op",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "binaryOp",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "unaryOp",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "newExpr",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "deleteExpr",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "cilkSpawn",
          "alias": ""
        },
        {
          "type": "action",
          "tooltip": "Adds a new local variable to this scope",
          "children": [
            {
              "type": "joinpoint",
              "name": "addLocal"
            },
            {
              "type": "String",
              "name": "name",
              "defaultValue": ""
            },
            {
              "type": "joinpoint",
              "name": "type",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "initValue",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which does not initialize the local variable",
          "children": [
            {
              "type": "joinpoint",
              "name": "addLocal"
            },
            {
              "type": "String",
              "name": "name",
              "defaultValue": ""
            },
            {
              "type": "joinpoint",
              "name": "type",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "CFG tester",
          "children": [
            {
              "type": "String",
              "name": "cfg"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Clears the contents of this scope (untested)",
          "children": [
            {
              "type": "void",
              "name": "clear"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "DFG tester",
          "children": [
            {
              "type": "String",
              "name": "dfg"
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBegin"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBegin"
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertEnd"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertEnd"
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the joinpoint before the return points of the scope (return statements and implicitly, at the end of the scope). Returns the last inserted node",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertReturn"
            },
            {
              "type": "joinpoint",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the joinpoint before the return points of the scope (return statements and implicitly, at the end of the scope). Returns the last inserted node",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertReturn"
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the 'naked' status of a scope (a scope is naked if it does not have curly braces)",
          "children": [
            {
              "type": "void",
              "name": "setNaked"
            },
            {
              "type": "Boolean",
              "name": "isNaked",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "insert"
            },
            {
              "type": "[before| after| replace]",
              "name": "position",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "def"
            },
            {
              "type": "String",
              "name": "attribute",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, but not of the nodes in its fields",
          "children": [
            {
              "type": "joinpoint",
              "name": "copy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Copies all enumerable own properties from the source object to the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataAssign"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Clears all properties from the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataClear"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, including the nodes in their fields (only the first level of field nodes, this function is not recursive)",
          "children": [
            {
              "type": "joinpoint",
              "name": "deepCopy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the node associated to this joinpoint from the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "detach"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point after this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point before this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Adds a message that will be printed to the user after weaving finishes. Identical messages are removed",
          "children": [
            {
              "type": "void",
              "name": "messageToUser"
            },
            {
              "type": "String",
              "name": "message",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the children of this node",
          "children": [
            {
              "type": "void",
              "name": "removeChildren"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this node with the given node",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of join points",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of strings",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWithStrings"
            },
            {
              "type": "String[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Setting data directly is not supported, this action just emits a warning and does nothing",
          "children": [
            {
              "type": "void",
              "name": "setData"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the first child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setFirstChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String[]",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the last child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setLastChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the type of a node, if it has a type",
          "children": [
            {
              "type": "void",
              "name": "setType"
            },
            {
              "type": "type",
              "name": "type",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Associates arbitrary values to nodes of the AST",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "String",
              "name": "fieldName",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a map",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "Map",
              "name": "fieldNameAndValue",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the value associated with the given property key",
          "children": [
            {
              "type": "joinpoint",
              "name": "setValue"
            },
            {
              "type": "String",
              "name": "key",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "suffix",
              "defaultValue": ""
            }
          ]
        }
      ]
    },
    {
      "type": "joinpoint",
      "name": "statement",
      "extends": "joinpoint",
      "children": [
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isFirst"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isLast"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "attributes"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "selects"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "actions"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "ancestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with a dump of the AST representation starting from this node. This representation corresponds to the internal Java representation of the ClavaAst, where the node names correspond to Java classes. To get an equivalent representation with join point names, use the attribute 'dump'",
          "children": [
            {
              "type": "String",
              "name": "ast"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor AST name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "astAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, considering null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "astChild"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, considering null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "astChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String that uniquely identifies this node",
          "children": [
            {
              "type": "String",
              "name": "astId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if this node is a Java instance of the given name, which corresponds to a simple Java class name of an AST node. For an equivalent function for join point names, use 'instanceOf(joinPointName)'",
          "children": [
            {
              "type": "boolean",
              "name": "astIsInstance"
            },
            {
              "type": "String",
              "name": "className"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the Java class of this node, which is similar to the equivalent node in Clang AST",
          "children": [
            {
              "type": "String",
              "name": "astName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, considering null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "astNumChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "astParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The bit width of the type returned by this join point, in relation to the definitions of its Translation Unit, or undefined if there is no type or bitwidth defined, or if the join point is not in a TranslationUnit",
          "children": [
            {
              "type": "Integer",
              "name": "bitWidth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String list of the names of the join points that form a path from the root to this node",
          "children": [
            {
              "type": "String[]",
              "name": "chain"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the joinpoint chain",
          "children": [
            {
              "type": "joinpoint",
              "name": "chainAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "child"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "children"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the code represented by this node",
          "children": [
            {
              "type": "String",
              "name": "code"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "column"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the given node is a descendant of this node",
          "children": [
            {
              "type": "Boolean",
              "name": "contains"
            },
            {
              "type": "joinpoint",
              "name": "jp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "currentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "JS object associated with this node, containing parsed data of #pragma clava data when the node can be a target of pragmas. This is a special object, managed internally, and cannot be reassigned, to change its contents requires using key-value pairs. If the node can be the target of a pragma, the information stored in this object is persisted between rebuilds.",
          "children": [
            {
              "type": "Object",
              "name": "data"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the depth of this join point in the AST. If it is the root join point returns 0, if it is a child of the root node returns 1, etc.",
          "children": [
            {
              "type": "Integer",
              "name": "depth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves all descendants of the join point",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type, including the node itself",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendantsAndSelf"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endColumn"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endLine"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the file where the code of this node is located, if available",
          "children": [
            {
              "type": "String",
              "name": "filename"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the complete path to the file where the code of this node comes from",
          "children": [
            {
              "type": "String",
              "name": "filepath"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the first child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks in the descendants for the first node of the given type",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstJp"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use 'userField' instead]",
          "children": [
            {
              "type": "Object",
              "name": "getUserField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The value associated with the given property key",
          "children": [
            {
              "type": "Object",
              "name": "getValue"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use hasParent instead]",
          "children": [
            {
              "type": "boolean",
              "name": "hasAstParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the node has children, false otherwise",
          "children": [
            {
              "type": "Boolean",
              "name": "hasChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the given join point or AST node is the same (== test) as the current join point AST node",
          "children": [
            {
              "type": "Boolean",
              "name": "hasNode"
            },
            {
              "type": "Object",
              "name": "nodeOrJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this node has a parent",
          "children": [
            {
              "type": "boolean",
              "name": "hasParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point has a type",
          "children": [
            {
              "type": "Boolean",
              "name": "hasType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns comments that are not explicitly in the AST, but embedded in other nodes",
          "children": [
            {
              "type": "comment[]",
              "name": "inlineComments"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this is a Cilk node (i.e., cilk_spawn, cilk_sync or cilk_for)",
          "children": [
            {
              "type": "Boolean",
              "name": "isCilk"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is part of a system header file",
          "children": [
            {
              "type": "Boolean",
              "name": "isInSystemHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a header (e.g., if condition, for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a loop header (e.g., for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideLoopHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if any descendant or the node itself was defined as a macro",
          "children": [
            {
              "type": "Boolean",
              "name": "isMacro"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the full Java class name of the type of the Java field with the provided name",
          "children": [
            {
              "type": "String",
              "name": "javaFieldType"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'keys' instead, together with 'getValue'] The names of the Java fields of this node. Can be used as key of the attribute 'javaValue'",
          "children": [
            {
              "type": "String[]",
              "name": "javaFields"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'getValue' instead, with the names returned by the attribute 'keys'] Returns the value associated with the provided Java field name",
          "children": [
            {
              "type": "Object",
              "name": "javaValue"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use joinPointType instead (uppercase P)]",
          "children": [
            {
              "type": "String",
              "name": "joinpointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Id that is based on the position of the node in the code, and should remain stable between compilations (warning: only a few nodes - file, function, loop - currently support it)",
          "children": [
            {
              "type": "String",
              "name": "jpId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Java Class instance with the type of the given key",
          "children": [
            {
              "type": "Object",
              "name": "keyType"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A list of the properties currently supported by this node. Can be used as parameter of the attribute 'getValue'",
          "children": [
            {
              "type": "String[]",
              "name": "keys"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[HACK: .descendants(type) does not work in .lara files, after GraalVM update] Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "laraDescendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the last child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "lastChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that came before this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "leftJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "line"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A string with information about the file and code position of this node, if available",
          "children": [
            {
              "type": "String",
              "name": "location"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, ignoring null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "numChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope that is a parent of the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The pragmas associated with this node",
          "children": [
            {
              "type": "pragma[]",
              "name": "pragmas"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that comes after this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "rightJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the 'program' joinpoint",
          "children": [
            {
              "type": "joinpoint",
              "name": "root"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the nodes of the scope of the current join point. If this node has a body (e.g., loop, function) corresponds to the children of the body. Otherwise, returns an empty array",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "scopeNodes"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that came before this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsLeft"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that come after this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsRight"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Converts this join point to a statement, or returns undefined if it was not possible",
          "children": [
            {
              "type": "statement",
              "name": "stmt"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "type",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrives values that have been associated to nodes of the AST with 'setUserField'",
          "children": [
            {
              "type": "Object",
              "name": "userField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a String with the type of the join point",
          "children": [
            {
              "type": "String",
              "name": "joinPointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the current join point is an instance of the given type",
          "children": [
            {
              "type": "Boolean",
              "name": "instanceOf"
            },
            {
              "type": "String",
              "name": "name"
            }
          ]
        },
        {
          "type": "select",
          "clazz": "expression",
          "alias": "expr"
        },
        {
          "type": "select",
          "clazz": "expression",
          "alias": "childExpr"
        },
        {
          "type": "select",
          "clazz": "call",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "call",
          "alias": "stmtCall"
        },
        {
          "type": "select",
          "clazz": "memberCall",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "memberAccess",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "arrayAccess",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "vardecl",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "varref",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "op",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "binaryOp",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "unaryOp",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "newExpr",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "deleteExpr",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "cilkSpawn",
          "alias": ""
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "insert"
            },
            {
              "type": "[before| after| replace]",
              "name": "position",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "def"
            },
            {
              "type": "String",
              "name": "attribute",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, but not of the nodes in its fields",
          "children": [
            {
              "type": "joinpoint",
              "name": "copy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Copies all enumerable own properties from the source object to the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataAssign"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Clears all properties from the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataClear"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, including the nodes in their fields (only the first level of field nodes, this function is not recursive)",
          "children": [
            {
              "type": "joinpoint",
              "name": "deepCopy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the node associated to this joinpoint from the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "detach"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point after this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point before this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Adds a message that will be printed to the user after weaving finishes. Identical messages are removed",
          "children": [
            {
              "type": "void",
              "name": "messageToUser"
            },
            {
              "type": "String",
              "name": "message",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the children of this node",
          "children": [
            {
              "type": "void",
              "name": "removeChildren"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this node with the given node",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of join points",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of strings",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWithStrings"
            },
            {
              "type": "String[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Setting data directly is not supported, this action just emits a warning and does nothing",
          "children": [
            {
              "type": "void",
              "name": "setData"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the first child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setFirstChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String[]",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the last child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setLastChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the type of a node, if it has a type",
          "children": [
            {
              "type": "void",
              "name": "setType"
            },
            {
              "type": "type",
              "name": "type",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Associates arbitrary values to nodes of the AST",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "String",
              "name": "fieldName",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a map",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "Map",
              "name": "fieldNameAndValue",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the value associated with the given property key",
          "children": [
            {
              "type": "joinpoint",
              "name": "setValue"
            },
            {
              "type": "String",
              "name": "key",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "suffix",
              "defaultValue": ""
            }
          ]
        }
      ]
    },
    {
      "type": "joinpoint",
      "name": "struct",
      "defaultAttr": "name",
      "extends": "record",
      "tooltip": "Represets a struct declaration",
      "children": [
        {
          "type": "attribute",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "fields"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "function[]",
              "name": "functions"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this particular join point is an implementation (i.e. has its body fully specified), false otherwise",
          "children": [
            {
              "type": "Boolean",
              "name": "isImplementation"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this particular join point is a prototype (i.e. does not have its body fully specified), false otherwise",
          "children": [
            {
              "type": "Boolean",
              "name": "isPrototype"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String",
              "name": "kind"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isPublic"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String",
              "name": "name"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String",
              "name": "qualifiedName"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String",
              "name": "qualifiedPrefix"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The attributes (e.g. Pure, CUDAGlobal) associated to this decl",
          "children": [
            {
              "type": "attribute[]",
              "name": "attrs"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "attributes"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "selects"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "actions"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "ancestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with a dump of the AST representation starting from this node. This representation corresponds to the internal Java representation of the ClavaAst, where the node names correspond to Java classes. To get an equivalent representation with join point names, use the attribute 'dump'",
          "children": [
            {
              "type": "String",
              "name": "ast"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor AST name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "astAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, considering null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "astChild"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, considering null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "astChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String that uniquely identifies this node",
          "children": [
            {
              "type": "String",
              "name": "astId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if this node is a Java instance of the given name, which corresponds to a simple Java class name of an AST node. For an equivalent function for join point names, use 'instanceOf(joinPointName)'",
          "children": [
            {
              "type": "boolean",
              "name": "astIsInstance"
            },
            {
              "type": "String",
              "name": "className"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the Java class of this node, which is similar to the equivalent node in Clang AST",
          "children": [
            {
              "type": "String",
              "name": "astName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, considering null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "astNumChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "astParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The bit width of the type returned by this join point, in relation to the definitions of its Translation Unit, or undefined if there is no type or bitwidth defined, or if the join point is not in a TranslationUnit",
          "children": [
            {
              "type": "Integer",
              "name": "bitWidth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String list of the names of the join points that form a path from the root to this node",
          "children": [
            {
              "type": "String[]",
              "name": "chain"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the joinpoint chain",
          "children": [
            {
              "type": "joinpoint",
              "name": "chainAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "child"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "children"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the code represented by this node",
          "children": [
            {
              "type": "String",
              "name": "code"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "column"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the given node is a descendant of this node",
          "children": [
            {
              "type": "Boolean",
              "name": "contains"
            },
            {
              "type": "joinpoint",
              "name": "jp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "currentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "JS object associated with this node, containing parsed data of #pragma clava data when the node can be a target of pragmas. This is a special object, managed internally, and cannot be reassigned, to change its contents requires using key-value pairs. If the node can be the target of a pragma, the information stored in this object is persisted between rebuilds.",
          "children": [
            {
              "type": "Object",
              "name": "data"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the depth of this join point in the AST. If it is the root join point returns 0, if it is a child of the root node returns 1, etc.",
          "children": [
            {
              "type": "Integer",
              "name": "depth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves all descendants of the join point",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type, including the node itself",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendantsAndSelf"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endColumn"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endLine"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the file where the code of this node is located, if available",
          "children": [
            {
              "type": "String",
              "name": "filename"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the complete path to the file where the code of this node comes from",
          "children": [
            {
              "type": "String",
              "name": "filepath"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the first child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks in the descendants for the first node of the given type",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstJp"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use 'userField' instead]",
          "children": [
            {
              "type": "Object",
              "name": "getUserField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The value associated with the given property key",
          "children": [
            {
              "type": "Object",
              "name": "getValue"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use hasParent instead]",
          "children": [
            {
              "type": "boolean",
              "name": "hasAstParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the node has children, false otherwise",
          "children": [
            {
              "type": "Boolean",
              "name": "hasChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the given join point or AST node is the same (== test) as the current join point AST node",
          "children": [
            {
              "type": "Boolean",
              "name": "hasNode"
            },
            {
              "type": "Object",
              "name": "nodeOrJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this node has a parent",
          "children": [
            {
              "type": "boolean",
              "name": "hasParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point has a type",
          "children": [
            {
              "type": "Boolean",
              "name": "hasType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns comments that are not explicitly in the AST, but embedded in other nodes",
          "children": [
            {
              "type": "comment[]",
              "name": "inlineComments"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this is a Cilk node (i.e., cilk_spawn, cilk_sync or cilk_for)",
          "children": [
            {
              "type": "Boolean",
              "name": "isCilk"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is part of a system header file",
          "children": [
            {
              "type": "Boolean",
              "name": "isInSystemHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a header (e.g., if condition, for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a loop header (e.g., for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideLoopHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if any descendant or the node itself was defined as a macro",
          "children": [
            {
              "type": "Boolean",
              "name": "isMacro"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the full Java class name of the type of the Java field with the provided name",
          "children": [
            {
              "type": "String",
              "name": "javaFieldType"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'keys' instead, together with 'getValue'] The names of the Java fields of this node. Can be used as key of the attribute 'javaValue'",
          "children": [
            {
              "type": "String[]",
              "name": "javaFields"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'getValue' instead, with the names returned by the attribute 'keys'] Returns the value associated with the provided Java field name",
          "children": [
            {
              "type": "Object",
              "name": "javaValue"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use joinPointType instead (uppercase P)]",
          "children": [
            {
              "type": "String",
              "name": "joinpointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Id that is based on the position of the node in the code, and should remain stable between compilations (warning: only a few nodes - file, function, loop - currently support it)",
          "children": [
            {
              "type": "String",
              "name": "jpId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Java Class instance with the type of the given key",
          "children": [
            {
              "type": "Object",
              "name": "keyType"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A list of the properties currently supported by this node. Can be used as parameter of the attribute 'getValue'",
          "children": [
            {
              "type": "String[]",
              "name": "keys"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[HACK: .descendants(type) does not work in .lara files, after GraalVM update] Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "laraDescendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the last child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "lastChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that came before this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "leftJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "line"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A string with information about the file and code position of this node, if available",
          "children": [
            {
              "type": "String",
              "name": "location"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, ignoring null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "numChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope that is a parent of the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The pragmas associated with this node",
          "children": [
            {
              "type": "pragma[]",
              "name": "pragmas"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that comes after this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "rightJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the 'program' joinpoint",
          "children": [
            {
              "type": "joinpoint",
              "name": "root"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the nodes of the scope of the current join point. If this node has a body (e.g., loop, function) corresponds to the children of the body. Otherwise, returns an empty array",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "scopeNodes"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that came before this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsLeft"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that come after this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsRight"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Converts this join point to a statement, or returns undefined if it was not possible",
          "children": [
            {
              "type": "statement",
              "name": "stmt"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "type",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrives values that have been associated to nodes of the AST with 'setUserField'",
          "children": [
            {
              "type": "Object",
              "name": "userField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a String with the type of the join point",
          "children": [
            {
              "type": "String",
              "name": "joinPointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the current join point is an instance of the given type",
          "children": [
            {
              "type": "Boolean",
              "name": "instanceOf"
            },
            {
              "type": "String",
              "name": "name"
            }
          ]
        },
        {
          "type": "select",
          "clazz": "field",
          "alias": ""
        },
        {
          "type": "action",
          "tooltip": "Adds a field to a record (struct, class).",
          "children": [
            {
              "type": "void",
              "name": "addField"
            },
            {
              "type": "field",
              "name": "field",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the name of this namedDecl",
          "children": [
            {
              "type": "void",
              "name": "setName"
            },
            {
              "type": "String",
              "name": "name",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the qualified name of this namedDecl (changes both the name and qualified prefix)",
          "children": [
            {
              "type": "void",
              "name": "setQualifiedName"
            },
            {
              "type": "String",
              "name": "name",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the qualified prefix of this namedDecl",
          "children": [
            {
              "type": "void",
              "name": "setQualifiedPrefix"
            },
            {
              "type": "String",
              "name": "qualifiedPrefix",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "insert"
            },
            {
              "type": "[before| after| replace]",
              "name": "position",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "def"
            },
            {
              "type": "String",
              "name": "attribute",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, but not of the nodes in its fields",
          "children": [
            {
              "type": "joinpoint",
              "name": "copy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Copies all enumerable own properties from the source object to the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataAssign"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Clears all properties from the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataClear"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, including the nodes in their fields (only the first level of field nodes, this function is not recursive)",
          "children": [
            {
              "type": "joinpoint",
              "name": "deepCopy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the node associated to this joinpoint from the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "detach"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point after this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point before this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Adds a message that will be printed to the user after weaving finishes. Identical messages are removed",
          "children": [
            {
              "type": "void",
              "name": "messageToUser"
            },
            {
              "type": "String",
              "name": "message",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the children of this node",
          "children": [
            {
              "type": "void",
              "name": "removeChildren"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this node with the given node",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of join points",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of strings",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWithStrings"
            },
            {
              "type": "String[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Setting data directly is not supported, this action just emits a warning and does nothing",
          "children": [
            {
              "type": "void",
              "name": "setData"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the first child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setFirstChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String[]",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the last child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setLastChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the type of a node, if it has a type",
          "children": [
            {
              "type": "void",
              "name": "setType"
            },
            {
              "type": "type",
              "name": "type",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Associates arbitrary values to nodes of the AST",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "String",
              "name": "fieldName",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a map",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "Map",
              "name": "fieldNameAndValue",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the value associated with the given property key",
          "children": [
            {
              "type": "joinpoint",
              "name": "setValue"
            },
            {
              "type": "String",
              "name": "key",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "suffix",
              "defaultValue": ""
            }
          ]
        }
      ]
    },
    {
      "type": "joinpoint",
      "name": "switch",
      "extends": "statement",
      "children": [
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isFirst"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isLast"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "attributes"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "selects"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "actions"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "ancestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with a dump of the AST representation starting from this node. This representation corresponds to the internal Java representation of the ClavaAst, where the node names correspond to Java classes. To get an equivalent representation with join point names, use the attribute 'dump'",
          "children": [
            {
              "type": "String",
              "name": "ast"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor AST name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "astAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, considering null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "astChild"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, considering null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "astChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String that uniquely identifies this node",
          "children": [
            {
              "type": "String",
              "name": "astId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if this node is a Java instance of the given name, which corresponds to a simple Java class name of an AST node. For an equivalent function for join point names, use 'instanceOf(joinPointName)'",
          "children": [
            {
              "type": "boolean",
              "name": "astIsInstance"
            },
            {
              "type": "String",
              "name": "className"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the Java class of this node, which is similar to the equivalent node in Clang AST",
          "children": [
            {
              "type": "String",
              "name": "astName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, considering null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "astNumChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "astParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The bit width of the type returned by this join point, in relation to the definitions of its Translation Unit, or undefined if there is no type or bitwidth defined, or if the join point is not in a TranslationUnit",
          "children": [
            {
              "type": "Integer",
              "name": "bitWidth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String list of the names of the join points that form a path from the root to this node",
          "children": [
            {
              "type": "String[]",
              "name": "chain"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the joinpoint chain",
          "children": [
            {
              "type": "joinpoint",
              "name": "chainAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "child"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "children"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the code represented by this node",
          "children": [
            {
              "type": "String",
              "name": "code"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "column"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the given node is a descendant of this node",
          "children": [
            {
              "type": "Boolean",
              "name": "contains"
            },
            {
              "type": "joinpoint",
              "name": "jp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "currentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "JS object associated with this node, containing parsed data of #pragma clava data when the node can be a target of pragmas. This is a special object, managed internally, and cannot be reassigned, to change its contents requires using key-value pairs. If the node can be the target of a pragma, the information stored in this object is persisted between rebuilds.",
          "children": [
            {
              "type": "Object",
              "name": "data"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the depth of this join point in the AST. If it is the root join point returns 0, if it is a child of the root node returns 1, etc.",
          "children": [
            {
              "type": "Integer",
              "name": "depth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves all descendants of the join point",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type, including the node itself",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendantsAndSelf"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endColumn"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endLine"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the file where the code of this node is located, if available",
          "children": [
            {
              "type": "String",
              "name": "filename"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the complete path to the file where the code of this node comes from",
          "children": [
            {
              "type": "String",
              "name": "filepath"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the first child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks in the descendants for the first node of the given type",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstJp"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use 'userField' instead]",
          "children": [
            {
              "type": "Object",
              "name": "getUserField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The value associated with the given property key",
          "children": [
            {
              "type": "Object",
              "name": "getValue"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use hasParent instead]",
          "children": [
            {
              "type": "boolean",
              "name": "hasAstParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the node has children, false otherwise",
          "children": [
            {
              "type": "Boolean",
              "name": "hasChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the given join point or AST node is the same (== test) as the current join point AST node",
          "children": [
            {
              "type": "Boolean",
              "name": "hasNode"
            },
            {
              "type": "Object",
              "name": "nodeOrJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this node has a parent",
          "children": [
            {
              "type": "boolean",
              "name": "hasParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point has a type",
          "children": [
            {
              "type": "Boolean",
              "name": "hasType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns comments that are not explicitly in the AST, but embedded in other nodes",
          "children": [
            {
              "type": "comment[]",
              "name": "inlineComments"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this is a Cilk node (i.e., cilk_spawn, cilk_sync or cilk_for)",
          "children": [
            {
              "type": "Boolean",
              "name": "isCilk"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is part of a system header file",
          "children": [
            {
              "type": "Boolean",
              "name": "isInSystemHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a header (e.g., if condition, for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a loop header (e.g., for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideLoopHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if any descendant or the node itself was defined as a macro",
          "children": [
            {
              "type": "Boolean",
              "name": "isMacro"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the full Java class name of the type of the Java field with the provided name",
          "children": [
            {
              "type": "String",
              "name": "javaFieldType"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'keys' instead, together with 'getValue'] The names of the Java fields of this node. Can be used as key of the attribute 'javaValue'",
          "children": [
            {
              "type": "String[]",
              "name": "javaFields"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'getValue' instead, with the names returned by the attribute 'keys'] Returns the value associated with the provided Java field name",
          "children": [
            {
              "type": "Object",
              "name": "javaValue"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use joinPointType instead (uppercase P)]",
          "children": [
            {
              "type": "String",
              "name": "joinpointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Id that is based on the position of the node in the code, and should remain stable between compilations (warning: only a few nodes - file, function, loop - currently support it)",
          "children": [
            {
              "type": "String",
              "name": "jpId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Java Class instance with the type of the given key",
          "children": [
            {
              "type": "Object",
              "name": "keyType"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A list of the properties currently supported by this node. Can be used as parameter of the attribute 'getValue'",
          "children": [
            {
              "type": "String[]",
              "name": "keys"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[HACK: .descendants(type) does not work in .lara files, after GraalVM update] Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "laraDescendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the last child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "lastChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that came before this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "leftJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "line"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A string with information about the file and code position of this node, if available",
          "children": [
            {
              "type": "String",
              "name": "location"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, ignoring null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "numChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope that is a parent of the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The pragmas associated with this node",
          "children": [
            {
              "type": "pragma[]",
              "name": "pragmas"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that comes after this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "rightJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the 'program' joinpoint",
          "children": [
            {
              "type": "joinpoint",
              "name": "root"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the nodes of the scope of the current join point. If this node has a body (e.g., loop, function) corresponds to the children of the body. Otherwise, returns an empty array",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "scopeNodes"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that came before this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsLeft"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that come after this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsRight"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Converts this join point to a statement, or returns undefined if it was not possible",
          "children": [
            {
              "type": "statement",
              "name": "stmt"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "type",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrives values that have been associated to nodes of the AST with 'setUserField'",
          "children": [
            {
              "type": "Object",
              "name": "userField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a String with the type of the join point",
          "children": [
            {
              "type": "String",
              "name": "joinPointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the current join point is an instance of the given type",
          "children": [
            {
              "type": "Boolean",
              "name": "instanceOf"
            },
            {
              "type": "String",
              "name": "name"
            }
          ]
        },
        {
          "type": "select",
          "clazz": "expression",
          "alias": "expr"
        },
        {
          "type": "select",
          "clazz": "expression",
          "alias": "childExpr"
        },
        {
          "type": "select",
          "clazz": "call",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "call",
          "alias": "stmtCall"
        },
        {
          "type": "select",
          "clazz": "memberCall",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "memberAccess",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "arrayAccess",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "vardecl",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "varref",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "op",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "binaryOp",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "unaryOp",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "newExpr",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "deleteExpr",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "cilkSpawn",
          "alias": ""
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "insert"
            },
            {
              "type": "[before| after| replace]",
              "name": "position",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "def"
            },
            {
              "type": "String",
              "name": "attribute",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, but not of the nodes in its fields",
          "children": [
            {
              "type": "joinpoint",
              "name": "copy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Copies all enumerable own properties from the source object to the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataAssign"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Clears all properties from the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataClear"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, including the nodes in their fields (only the first level of field nodes, this function is not recursive)",
          "children": [
            {
              "type": "joinpoint",
              "name": "deepCopy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the node associated to this joinpoint from the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "detach"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point after this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point before this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Adds a message that will be printed to the user after weaving finishes. Identical messages are removed",
          "children": [
            {
              "type": "void",
              "name": "messageToUser"
            },
            {
              "type": "String",
              "name": "message",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the children of this node",
          "children": [
            {
              "type": "void",
              "name": "removeChildren"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this node with the given node",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of join points",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of strings",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWithStrings"
            },
            {
              "type": "String[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Setting data directly is not supported, this action just emits a warning and does nothing",
          "children": [
            {
              "type": "void",
              "name": "setData"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the first child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setFirstChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String[]",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the last child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setLastChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the type of a node, if it has a type",
          "children": [
            {
              "type": "void",
              "name": "setType"
            },
            {
              "type": "type",
              "name": "type",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Associates arbitrary values to nodes of the AST",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "String",
              "name": "fieldName",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a map",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "Map",
              "name": "fieldNameAndValue",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the value associated with the given property key",
          "children": [
            {
              "type": "joinpoint",
              "name": "setValue"
            },
            {
              "type": "String",
              "name": "key",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "suffix",
              "defaultValue": ""
            }
          ]
        }
      ]
    },
    {
      "type": "joinpoint",
      "name": "tag",
      "defaultAttr": "id",
      "extends": "pragma",
      "tooltip": "A pragma that references a point in the code and sticks to it",
      "children": [
        {
          "type": "attribute",
          "tooltip": "The ID of the pragma",
          "children": [
            {
              "type": "String",
              "name": "id"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Everything that is after the name of the pragma",
          "children": [
            {
              "type": "String",
              "name": "content"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the pragma. E.g. for #pragma foo bar, returns 'foo'",
          "children": [
            {
              "type": "String",
              "name": "name"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The first node below the pragma that is not a comment or another pragma. Example of pragma targets are statements and declarations",
          "children": [
            {
              "type": "joinpoint",
              "name": "target"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "All the nodes below the target node, including the target node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "targetNodes"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "All the nodes below the target node, including the target node, up until a pragma with the name given by argument 'endPragma'. If no end pragma is found, returns the same result as if not providing the argument",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "targetNodes"
            },
            {
              "type": "String",
              "name": "endPragma"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "attributes"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "selects"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "actions"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "ancestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with a dump of the AST representation starting from this node. This representation corresponds to the internal Java representation of the ClavaAst, where the node names correspond to Java classes. To get an equivalent representation with join point names, use the attribute 'dump'",
          "children": [
            {
              "type": "String",
              "name": "ast"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor AST name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "astAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, considering null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "astChild"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, considering null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "astChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String that uniquely identifies this node",
          "children": [
            {
              "type": "String",
              "name": "astId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if this node is a Java instance of the given name, which corresponds to a simple Java class name of an AST node. For an equivalent function for join point names, use 'instanceOf(joinPointName)'",
          "children": [
            {
              "type": "boolean",
              "name": "astIsInstance"
            },
            {
              "type": "String",
              "name": "className"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the Java class of this node, which is similar to the equivalent node in Clang AST",
          "children": [
            {
              "type": "String",
              "name": "astName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, considering null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "astNumChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "astParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The bit width of the type returned by this join point, in relation to the definitions of its Translation Unit, or undefined if there is no type or bitwidth defined, or if the join point is not in a TranslationUnit",
          "children": [
            {
              "type": "Integer",
              "name": "bitWidth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String list of the names of the join points that form a path from the root to this node",
          "children": [
            {
              "type": "String[]",
              "name": "chain"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the joinpoint chain",
          "children": [
            {
              "type": "joinpoint",
              "name": "chainAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "child"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "children"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the code represented by this node",
          "children": [
            {
              "type": "String",
              "name": "code"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "column"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the given node is a descendant of this node",
          "children": [
            {
              "type": "Boolean",
              "name": "contains"
            },
            {
              "type": "joinpoint",
              "name": "jp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "currentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "JS object associated with this node, containing parsed data of #pragma clava data when the node can be a target of pragmas. This is a special object, managed internally, and cannot be reassigned, to change its contents requires using key-value pairs. If the node can be the target of a pragma, the information stored in this object is persisted between rebuilds.",
          "children": [
            {
              "type": "Object",
              "name": "data"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the depth of this join point in the AST. If it is the root join point returns 0, if it is a child of the root node returns 1, etc.",
          "children": [
            {
              "type": "Integer",
              "name": "depth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves all descendants of the join point",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type, including the node itself",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendantsAndSelf"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endColumn"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endLine"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the file where the code of this node is located, if available",
          "children": [
            {
              "type": "String",
              "name": "filename"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the complete path to the file where the code of this node comes from",
          "children": [
            {
              "type": "String",
              "name": "filepath"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the first child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks in the descendants for the first node of the given type",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstJp"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use 'userField' instead]",
          "children": [
            {
              "type": "Object",
              "name": "getUserField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The value associated with the given property key",
          "children": [
            {
              "type": "Object",
              "name": "getValue"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use hasParent instead]",
          "children": [
            {
              "type": "boolean",
              "name": "hasAstParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the node has children, false otherwise",
          "children": [
            {
              "type": "Boolean",
              "name": "hasChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the given join point or AST node is the same (== test) as the current join point AST node",
          "children": [
            {
              "type": "Boolean",
              "name": "hasNode"
            },
            {
              "type": "Object",
              "name": "nodeOrJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this node has a parent",
          "children": [
            {
              "type": "boolean",
              "name": "hasParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point has a type",
          "children": [
            {
              "type": "Boolean",
              "name": "hasType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns comments that are not explicitly in the AST, but embedded in other nodes",
          "children": [
            {
              "type": "comment[]",
              "name": "inlineComments"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this is a Cilk node (i.e., cilk_spawn, cilk_sync or cilk_for)",
          "children": [
            {
              "type": "Boolean",
              "name": "isCilk"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is part of a system header file",
          "children": [
            {
              "type": "Boolean",
              "name": "isInSystemHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a header (e.g., if condition, for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a loop header (e.g., for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideLoopHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if any descendant or the node itself was defined as a macro",
          "children": [
            {
              "type": "Boolean",
              "name": "isMacro"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the full Java class name of the type of the Java field with the provided name",
          "children": [
            {
              "type": "String",
              "name": "javaFieldType"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'keys' instead, together with 'getValue'] The names of the Java fields of this node. Can be used as key of the attribute 'javaValue'",
          "children": [
            {
              "type": "String[]",
              "name": "javaFields"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'getValue' instead, with the names returned by the attribute 'keys'] Returns the value associated with the provided Java field name",
          "children": [
            {
              "type": "Object",
              "name": "javaValue"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use joinPointType instead (uppercase P)]",
          "children": [
            {
              "type": "String",
              "name": "joinpointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Id that is based on the position of the node in the code, and should remain stable between compilations (warning: only a few nodes - file, function, loop - currently support it)",
          "children": [
            {
              "type": "String",
              "name": "jpId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Java Class instance with the type of the given key",
          "children": [
            {
              "type": "Object",
              "name": "keyType"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A list of the properties currently supported by this node. Can be used as parameter of the attribute 'getValue'",
          "children": [
            {
              "type": "String[]",
              "name": "keys"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[HACK: .descendants(type) does not work in .lara files, after GraalVM update] Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "laraDescendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the last child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "lastChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that came before this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "leftJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "line"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A string with information about the file and code position of this node, if available",
          "children": [
            {
              "type": "String",
              "name": "location"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, ignoring null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "numChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope that is a parent of the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The pragmas associated with this node",
          "children": [
            {
              "type": "pragma[]",
              "name": "pragmas"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that comes after this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "rightJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the 'program' joinpoint",
          "children": [
            {
              "type": "joinpoint",
              "name": "root"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the nodes of the scope of the current join point. If this node has a body (e.g., loop, function) corresponds to the children of the body. Otherwise, returns an empty array",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "scopeNodes"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that came before this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsLeft"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that come after this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsRight"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Converts this join point to a statement, or returns undefined if it was not possible",
          "children": [
            {
              "type": "statement",
              "name": "stmt"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "type",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrives values that have been associated to nodes of the AST with 'setUserField'",
          "children": [
            {
              "type": "Object",
              "name": "userField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a String with the type of the join point",
          "children": [
            {
              "type": "String",
              "name": "joinPointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the current join point is an instance of the given type",
          "children": [
            {
              "type": "Boolean",
              "name": "instanceOf"
            },
            {
              "type": "String",
              "name": "name"
            }
          ]
        },
        {
          "type": "select",
          "clazz": "joinpoint",
          "alias": "target"
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "setContent"
            },
            {
              "type": "String",
              "name": "content",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "setName"
            },
            {
              "type": "String",
              "name": "name",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "insert"
            },
            {
              "type": "[before| after| replace]",
              "name": "position",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "def"
            },
            {
              "type": "String",
              "name": "attribute",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, but not of the nodes in its fields",
          "children": [
            {
              "type": "joinpoint",
              "name": "copy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Copies all enumerable own properties from the source object to the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataAssign"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Clears all properties from the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataClear"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, including the nodes in their fields (only the first level of field nodes, this function is not recursive)",
          "children": [
            {
              "type": "joinpoint",
              "name": "deepCopy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the node associated to this joinpoint from the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "detach"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point after this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point before this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Adds a message that will be printed to the user after weaving finishes. Identical messages are removed",
          "children": [
            {
              "type": "void",
              "name": "messageToUser"
            },
            {
              "type": "String",
              "name": "message",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the children of this node",
          "children": [
            {
              "type": "void",
              "name": "removeChildren"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this node with the given node",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of join points",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of strings",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWithStrings"
            },
            {
              "type": "String[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Setting data directly is not supported, this action just emits a warning and does nothing",
          "children": [
            {
              "type": "void",
              "name": "setData"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the first child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setFirstChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String[]",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the last child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setLastChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the type of a node, if it has a type",
          "children": [
            {
              "type": "void",
              "name": "setType"
            },
            {
              "type": "type",
              "name": "type",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Associates arbitrary values to nodes of the AST",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "String",
              "name": "fieldName",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a map",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "Map",
              "name": "fieldNameAndValue",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the value associated with the given property key",
          "children": [
            {
              "type": "joinpoint",
              "name": "setValue"
            },
            {
              "type": "String",
              "name": "key",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "suffix",
              "defaultValue": ""
            }
          ]
        }
      ]
    },
    {
      "type": "joinpoint",
      "name": "tagType",
      "extends": "type",
      "children": [
        {
          "type": "attribute",
          "tooltip": "a 'decl' join point that represents the declaration of this tag type",
          "children": [
            {
              "type": "decl",
              "name": "decl"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String",
              "name": "name"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Integer[]",
              "name": "arrayDims"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Integer",
              "name": "arraySize"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The bit width of this type in the Translation Unit of the given join point, or undefined if there is no bitwidth defined",
          "children": [
            {
              "type": "Integer",
              "name": "bitWidth"
            },
            {
              "type": "joinpoint",
              "name": "reference"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "constant"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Single-step desugar. Returns the type itself if it does not have sugar",
          "children": [
            {
              "type": "type",
              "name": "desugar"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Completely desugars the type",
          "children": [
            {
              "type": "type",
              "name": "desugarAll"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A tree representation of the fields of this type",
          "children": [
            {
              "type": "String",
              "name": "fieldTree"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "hasSugar"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "hasTemplateArgs"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isArray"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "True if this is a type declared with the 'auto' keyword",
          "children": [
            {
              "type": "Boolean",
              "name": "isAuto"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isBuiltin"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isPointer"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isTopLevel"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String",
              "name": "kind"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Ignores certain types (e.g., DecayedType)",
          "children": [
            {
              "type": "type",
              "name": "normalize"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "templateArgsStrings"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "type[]",
              "name": "templateArgsTypes"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Maps names of join point fields that represent type join points, to their respective values",
          "children": [
            {
              "type": "Map",
              "name": "typeFields"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "If the type encapsulates another type, returns the encapsulated type",
          "children": [
            {
              "type": "type",
              "name": "unwrap"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "attributes"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "selects"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "actions"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "ancestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with a dump of the AST representation starting from this node. This representation corresponds to the internal Java representation of the ClavaAst, where the node names correspond to Java classes. To get an equivalent representation with join point names, use the attribute 'dump'",
          "children": [
            {
              "type": "String",
              "name": "ast"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor AST name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "astAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, considering null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "astChild"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, considering null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "astChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String that uniquely identifies this node",
          "children": [
            {
              "type": "String",
              "name": "astId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if this node is a Java instance of the given name, which corresponds to a simple Java class name of an AST node. For an equivalent function for join point names, use 'instanceOf(joinPointName)'",
          "children": [
            {
              "type": "boolean",
              "name": "astIsInstance"
            },
            {
              "type": "String",
              "name": "className"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the Java class of this node, which is similar to the equivalent node in Clang AST",
          "children": [
            {
              "type": "String",
              "name": "astName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, considering null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "astNumChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "astParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The bit width of the type returned by this join point, in relation to the definitions of its Translation Unit, or undefined if there is no type or bitwidth defined, or if the join point is not in a TranslationUnit",
          "children": [
            {
              "type": "Integer",
              "name": "bitWidth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String list of the names of the join points that form a path from the root to this node",
          "children": [
            {
              "type": "String[]",
              "name": "chain"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the joinpoint chain",
          "children": [
            {
              "type": "joinpoint",
              "name": "chainAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "child"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "children"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the code represented by this node",
          "children": [
            {
              "type": "String",
              "name": "code"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "column"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the given node is a descendant of this node",
          "children": [
            {
              "type": "Boolean",
              "name": "contains"
            },
            {
              "type": "joinpoint",
              "name": "jp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "currentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "JS object associated with this node, containing parsed data of #pragma clava data when the node can be a target of pragmas. This is a special object, managed internally, and cannot be reassigned, to change its contents requires using key-value pairs. If the node can be the target of a pragma, the information stored in this object is persisted between rebuilds.",
          "children": [
            {
              "type": "Object",
              "name": "data"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the depth of this join point in the AST. If it is the root join point returns 0, if it is a child of the root node returns 1, etc.",
          "children": [
            {
              "type": "Integer",
              "name": "depth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves all descendants of the join point",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type, including the node itself",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendantsAndSelf"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endColumn"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endLine"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the file where the code of this node is located, if available",
          "children": [
            {
              "type": "String",
              "name": "filename"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the complete path to the file where the code of this node comes from",
          "children": [
            {
              "type": "String",
              "name": "filepath"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the first child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks in the descendants for the first node of the given type",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstJp"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use 'userField' instead]",
          "children": [
            {
              "type": "Object",
              "name": "getUserField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The value associated with the given property key",
          "children": [
            {
              "type": "Object",
              "name": "getValue"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use hasParent instead]",
          "children": [
            {
              "type": "boolean",
              "name": "hasAstParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the node has children, false otherwise",
          "children": [
            {
              "type": "Boolean",
              "name": "hasChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the given join point or AST node is the same (== test) as the current join point AST node",
          "children": [
            {
              "type": "Boolean",
              "name": "hasNode"
            },
            {
              "type": "Object",
              "name": "nodeOrJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this node has a parent",
          "children": [
            {
              "type": "boolean",
              "name": "hasParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point has a type",
          "children": [
            {
              "type": "Boolean",
              "name": "hasType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns comments that are not explicitly in the AST, but embedded in other nodes",
          "children": [
            {
              "type": "comment[]",
              "name": "inlineComments"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this is a Cilk node (i.e., cilk_spawn, cilk_sync or cilk_for)",
          "children": [
            {
              "type": "Boolean",
              "name": "isCilk"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is part of a system header file",
          "children": [
            {
              "type": "Boolean",
              "name": "isInSystemHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a header (e.g., if condition, for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a loop header (e.g., for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideLoopHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if any descendant or the node itself was defined as a macro",
          "children": [
            {
              "type": "Boolean",
              "name": "isMacro"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the full Java class name of the type of the Java field with the provided name",
          "children": [
            {
              "type": "String",
              "name": "javaFieldType"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'keys' instead, together with 'getValue'] The names of the Java fields of this node. Can be used as key of the attribute 'javaValue'",
          "children": [
            {
              "type": "String[]",
              "name": "javaFields"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'getValue' instead, with the names returned by the attribute 'keys'] Returns the value associated with the provided Java field name",
          "children": [
            {
              "type": "Object",
              "name": "javaValue"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use joinPointType instead (uppercase P)]",
          "children": [
            {
              "type": "String",
              "name": "joinpointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Id that is based on the position of the node in the code, and should remain stable between compilations (warning: only a few nodes - file, function, loop - currently support it)",
          "children": [
            {
              "type": "String",
              "name": "jpId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Java Class instance with the type of the given key",
          "children": [
            {
              "type": "Object",
              "name": "keyType"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A list of the properties currently supported by this node. Can be used as parameter of the attribute 'getValue'",
          "children": [
            {
              "type": "String[]",
              "name": "keys"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[HACK: .descendants(type) does not work in .lara files, after GraalVM update] Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "laraDescendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the last child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "lastChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that came before this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "leftJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "line"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A string with information about the file and code position of this node, if available",
          "children": [
            {
              "type": "String",
              "name": "location"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, ignoring null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "numChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope that is a parent of the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The pragmas associated with this node",
          "children": [
            {
              "type": "pragma[]",
              "name": "pragmas"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that comes after this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "rightJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the 'program' joinpoint",
          "children": [
            {
              "type": "joinpoint",
              "name": "root"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the nodes of the scope of the current join point. If this node has a body (e.g., loop, function) corresponds to the children of the body. Otherwise, returns an empty array",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "scopeNodes"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that came before this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsLeft"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that come after this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsRight"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Converts this join point to a statement, or returns undefined if it was not possible",
          "children": [
            {
              "type": "statement",
              "name": "stmt"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "type",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrives values that have been associated to nodes of the AST with 'setUserField'",
          "children": [
            {
              "type": "Object",
              "name": "userField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a String with the type of the join point",
          "children": [
            {
              "type": "String",
              "name": "joinPointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the current join point is an instance of the given type",
          "children": [
            {
              "type": "Boolean",
              "name": "instanceOf"
            },
            {
              "type": "String",
              "name": "name"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Returns a copy of this type with the qualifier const",
          "children": [
            {
              "type": "type",
              "name": "asConst"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the desugared type of this type",
          "children": [
            {
              "type": "void",
              "name": "setDesugar"
            },
            {
              "type": "type",
              "name": "desugaredType",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the template argument types of a template type",
          "children": [
            {
              "type": "void",
              "name": "setTemplateArgsTypes"
            },
            {
              "type": "type[]",
              "name": "templateArgTypes",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets a single template argument type of a template type",
          "children": [
            {
              "type": "void",
              "name": "setTemplateArgsTypes"
            },
            {
              "type": "Integer",
              "name": "index",
              "defaultValue": ""
            },
            {
              "type": "type",
              "name": "templateArgType",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Changes a single occurence of a type field that has the current value with new value. Returns true if there was a change",
          "children": [
            {
              "type": "boolean",
              "name": "setTypeFieldByValueRecursive"
            },
            {
              "type": "Object",
              "name": "currentValue",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "newValue",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces an underlying type of this instance with new type, if it matches the old type. Returns true if there were changes",
          "children": [
            {
              "type": "type",
              "name": "setUnderlyingType"
            },
            {
              "type": "type",
              "name": "oldValue",
              "defaultValue": ""
            },
            {
              "type": "type",
              "name": "newValue",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "insert"
            },
            {
              "type": "[before| after| replace]",
              "name": "position",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "def"
            },
            {
              "type": "String",
              "name": "attribute",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, but not of the nodes in its fields",
          "children": [
            {
              "type": "joinpoint",
              "name": "copy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Copies all enumerable own properties from the source object to the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataAssign"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Clears all properties from the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataClear"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, including the nodes in their fields (only the first level of field nodes, this function is not recursive)",
          "children": [
            {
              "type": "joinpoint",
              "name": "deepCopy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the node associated to this joinpoint from the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "detach"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point after this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point before this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Adds a message that will be printed to the user after weaving finishes. Identical messages are removed",
          "children": [
            {
              "type": "void",
              "name": "messageToUser"
            },
            {
              "type": "String",
              "name": "message",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the children of this node",
          "children": [
            {
              "type": "void",
              "name": "removeChildren"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this node with the given node",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of join points",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of strings",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWithStrings"
            },
            {
              "type": "String[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Setting data directly is not supported, this action just emits a warning and does nothing",
          "children": [
            {
              "type": "void",
              "name": "setData"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the first child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setFirstChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String[]",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the last child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setLastChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the type of a node, if it has a type",
          "children": [
            {
              "type": "void",
              "name": "setType"
            },
            {
              "type": "type",
              "name": "type",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Associates arbitrary values to nodes of the AST",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "String",
              "name": "fieldName",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a map",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "Map",
              "name": "fieldNameAndValue",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the value associated with the given property key",
          "children": [
            {
              "type": "joinpoint",
              "name": "setValue"
            },
            {
              "type": "String",
              "name": "key",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "suffix",
              "defaultValue": ""
            }
          ]
        }
      ]
    },
    {
      "type": "joinpoint",
      "name": "templateSpecializationType",
      "extends": "type",
      "children": [
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "args"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "type",
              "name": "firstArgType"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Integer",
              "name": "numArgs"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String",
              "name": "templateName"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Integer[]",
              "name": "arrayDims"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Integer",
              "name": "arraySize"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The bit width of this type in the Translation Unit of the given join point, or undefined if there is no bitwidth defined",
          "children": [
            {
              "type": "Integer",
              "name": "bitWidth"
            },
            {
              "type": "joinpoint",
              "name": "reference"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "constant"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Single-step desugar. Returns the type itself if it does not have sugar",
          "children": [
            {
              "type": "type",
              "name": "desugar"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Completely desugars the type",
          "children": [
            {
              "type": "type",
              "name": "desugarAll"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A tree representation of the fields of this type",
          "children": [
            {
              "type": "String",
              "name": "fieldTree"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "hasSugar"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "hasTemplateArgs"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isArray"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "True if this is a type declared with the 'auto' keyword",
          "children": [
            {
              "type": "Boolean",
              "name": "isAuto"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isBuiltin"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isPointer"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isTopLevel"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String",
              "name": "kind"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Ignores certain types (e.g., DecayedType)",
          "children": [
            {
              "type": "type",
              "name": "normalize"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "templateArgsStrings"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "type[]",
              "name": "templateArgsTypes"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Maps names of join point fields that represent type join points, to their respective values",
          "children": [
            {
              "type": "Map",
              "name": "typeFields"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "If the type encapsulates another type, returns the encapsulated type",
          "children": [
            {
              "type": "type",
              "name": "unwrap"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "attributes"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "selects"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "actions"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "ancestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with a dump of the AST representation starting from this node. This representation corresponds to the internal Java representation of the ClavaAst, where the node names correspond to Java classes. To get an equivalent representation with join point names, use the attribute 'dump'",
          "children": [
            {
              "type": "String",
              "name": "ast"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor AST name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "astAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, considering null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "astChild"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, considering null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "astChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String that uniquely identifies this node",
          "children": [
            {
              "type": "String",
              "name": "astId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if this node is a Java instance of the given name, which corresponds to a simple Java class name of an AST node. For an equivalent function for join point names, use 'instanceOf(joinPointName)'",
          "children": [
            {
              "type": "boolean",
              "name": "astIsInstance"
            },
            {
              "type": "String",
              "name": "className"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the Java class of this node, which is similar to the equivalent node in Clang AST",
          "children": [
            {
              "type": "String",
              "name": "astName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, considering null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "astNumChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "astParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The bit width of the type returned by this join point, in relation to the definitions of its Translation Unit, or undefined if there is no type or bitwidth defined, or if the join point is not in a TranslationUnit",
          "children": [
            {
              "type": "Integer",
              "name": "bitWidth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String list of the names of the join points that form a path from the root to this node",
          "children": [
            {
              "type": "String[]",
              "name": "chain"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the joinpoint chain",
          "children": [
            {
              "type": "joinpoint",
              "name": "chainAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "child"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "children"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the code represented by this node",
          "children": [
            {
              "type": "String",
              "name": "code"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "column"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the given node is a descendant of this node",
          "children": [
            {
              "type": "Boolean",
              "name": "contains"
            },
            {
              "type": "joinpoint",
              "name": "jp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "currentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "JS object associated with this node, containing parsed data of #pragma clava data when the node can be a target of pragmas. This is a special object, managed internally, and cannot be reassigned, to change its contents requires using key-value pairs. If the node can be the target of a pragma, the information stored in this object is persisted between rebuilds.",
          "children": [
            {
              "type": "Object",
              "name": "data"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the depth of this join point in the AST. If it is the root join point returns 0, if it is a child of the root node returns 1, etc.",
          "children": [
            {
              "type": "Integer",
              "name": "depth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves all descendants of the join point",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type, including the node itself",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendantsAndSelf"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endColumn"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endLine"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the file where the code of this node is located, if available",
          "children": [
            {
              "type": "String",
              "name": "filename"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the complete path to the file where the code of this node comes from",
          "children": [
            {
              "type": "String",
              "name": "filepath"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the first child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks in the descendants for the first node of the given type",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstJp"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use 'userField' instead]",
          "children": [
            {
              "type": "Object",
              "name": "getUserField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The value associated with the given property key",
          "children": [
            {
              "type": "Object",
              "name": "getValue"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use hasParent instead]",
          "children": [
            {
              "type": "boolean",
              "name": "hasAstParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the node has children, false otherwise",
          "children": [
            {
              "type": "Boolean",
              "name": "hasChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the given join point or AST node is the same (== test) as the current join point AST node",
          "children": [
            {
              "type": "Boolean",
              "name": "hasNode"
            },
            {
              "type": "Object",
              "name": "nodeOrJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this node has a parent",
          "children": [
            {
              "type": "boolean",
              "name": "hasParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point has a type",
          "children": [
            {
              "type": "Boolean",
              "name": "hasType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns comments that are not explicitly in the AST, but embedded in other nodes",
          "children": [
            {
              "type": "comment[]",
              "name": "inlineComments"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this is a Cilk node (i.e., cilk_spawn, cilk_sync or cilk_for)",
          "children": [
            {
              "type": "Boolean",
              "name": "isCilk"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is part of a system header file",
          "children": [
            {
              "type": "Boolean",
              "name": "isInSystemHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a header (e.g., if condition, for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a loop header (e.g., for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideLoopHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if any descendant or the node itself was defined as a macro",
          "children": [
            {
              "type": "Boolean",
              "name": "isMacro"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the full Java class name of the type of the Java field with the provided name",
          "children": [
            {
              "type": "String",
              "name": "javaFieldType"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'keys' instead, together with 'getValue'] The names of the Java fields of this node. Can be used as key of the attribute 'javaValue'",
          "children": [
            {
              "type": "String[]",
              "name": "javaFields"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'getValue' instead, with the names returned by the attribute 'keys'] Returns the value associated with the provided Java field name",
          "children": [
            {
              "type": "Object",
              "name": "javaValue"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use joinPointType instead (uppercase P)]",
          "children": [
            {
              "type": "String",
              "name": "joinpointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Id that is based on the position of the node in the code, and should remain stable between compilations (warning: only a few nodes - file, function, loop - currently support it)",
          "children": [
            {
              "type": "String",
              "name": "jpId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Java Class instance with the type of the given key",
          "children": [
            {
              "type": "Object",
              "name": "keyType"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A list of the properties currently supported by this node. Can be used as parameter of the attribute 'getValue'",
          "children": [
            {
              "type": "String[]",
              "name": "keys"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[HACK: .descendants(type) does not work in .lara files, after GraalVM update] Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "laraDescendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the last child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "lastChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that came before this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "leftJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "line"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A string with information about the file and code position of this node, if available",
          "children": [
            {
              "type": "String",
              "name": "location"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, ignoring null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "numChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope that is a parent of the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The pragmas associated with this node",
          "children": [
            {
              "type": "pragma[]",
              "name": "pragmas"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that comes after this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "rightJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the 'program' joinpoint",
          "children": [
            {
              "type": "joinpoint",
              "name": "root"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the nodes of the scope of the current join point. If this node has a body (e.g., loop, function) corresponds to the children of the body. Otherwise, returns an empty array",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "scopeNodes"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that came before this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsLeft"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that come after this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsRight"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Converts this join point to a statement, or returns undefined if it was not possible",
          "children": [
            {
              "type": "statement",
              "name": "stmt"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "type",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrives values that have been associated to nodes of the AST with 'setUserField'",
          "children": [
            {
              "type": "Object",
              "name": "userField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a String with the type of the join point",
          "children": [
            {
              "type": "String",
              "name": "joinPointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the current join point is an instance of the given type",
          "children": [
            {
              "type": "Boolean",
              "name": "instanceOf"
            },
            {
              "type": "String",
              "name": "name"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Returns a copy of this type with the qualifier const",
          "children": [
            {
              "type": "type",
              "name": "asConst"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the desugared type of this type",
          "children": [
            {
              "type": "void",
              "name": "setDesugar"
            },
            {
              "type": "type",
              "name": "desugaredType",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the template argument types of a template type",
          "children": [
            {
              "type": "void",
              "name": "setTemplateArgsTypes"
            },
            {
              "type": "type[]",
              "name": "templateArgTypes",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets a single template argument type of a template type",
          "children": [
            {
              "type": "void",
              "name": "setTemplateArgsTypes"
            },
            {
              "type": "Integer",
              "name": "index",
              "defaultValue": ""
            },
            {
              "type": "type",
              "name": "templateArgType",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Changes a single occurence of a type field that has the current value with new value. Returns true if there was a change",
          "children": [
            {
              "type": "boolean",
              "name": "setTypeFieldByValueRecursive"
            },
            {
              "type": "Object",
              "name": "currentValue",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "newValue",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces an underlying type of this instance with new type, if it matches the old type. Returns true if there were changes",
          "children": [
            {
              "type": "type",
              "name": "setUnderlyingType"
            },
            {
              "type": "type",
              "name": "oldValue",
              "defaultValue": ""
            },
            {
              "type": "type",
              "name": "newValue",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "insert"
            },
            {
              "type": "[before| after| replace]",
              "name": "position",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "def"
            },
            {
              "type": "String",
              "name": "attribute",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, but not of the nodes in its fields",
          "children": [
            {
              "type": "joinpoint",
              "name": "copy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Copies all enumerable own properties from the source object to the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataAssign"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Clears all properties from the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataClear"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, including the nodes in their fields (only the first level of field nodes, this function is not recursive)",
          "children": [
            {
              "type": "joinpoint",
              "name": "deepCopy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the node associated to this joinpoint from the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "detach"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point after this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point before this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Adds a message that will be printed to the user after weaving finishes. Identical messages are removed",
          "children": [
            {
              "type": "void",
              "name": "messageToUser"
            },
            {
              "type": "String",
              "name": "message",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the children of this node",
          "children": [
            {
              "type": "void",
              "name": "removeChildren"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this node with the given node",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of join points",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of strings",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWithStrings"
            },
            {
              "type": "String[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Setting data directly is not supported, this action just emits a warning and does nothing",
          "children": [
            {
              "type": "void",
              "name": "setData"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the first child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setFirstChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String[]",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the last child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setLastChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the type of a node, if it has a type",
          "children": [
            {
              "type": "void",
              "name": "setType"
            },
            {
              "type": "type",
              "name": "type",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Associates arbitrary values to nodes of the AST",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "String",
              "name": "fieldName",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a map",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "Map",
              "name": "fieldNameAndValue",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the value associated with the given property key",
          "children": [
            {
              "type": "joinpoint",
              "name": "setValue"
            },
            {
              "type": "String",
              "name": "key",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "suffix",
              "defaultValue": ""
            }
          ]
        }
      ]
    },
    {
      "type": "joinpoint",
      "name": "ternaryOp",
      "extends": "op",
      "children": [
        {
          "type": "attribute",
          "children": [
            {
              "type": "expression",
              "name": "cond"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "expression",
              "name": "falseExpr"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "expression",
              "name": "trueExpr"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isBitwise"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The kind of the operator. If it is a binary operator, can be one of: ptr_mem_d, ptr_mem_i, mul, div, rem, add, sub, shl, shr, cmp, lt, gt, le, ge, eq, ne, and, xor, or, l_and, l_or, assign, mul_assign, div_assign, rem_assign, add_assign, sub_assign, shl_assign, shr_assign, and_assign, xor_assign, or_assign, comma. If it is a unary operator, can be one of: post_inc, post_dec, pre_inc, pre_dec, addr_of, deref, plus, minus, not, l_not, real, imag, extension, cowait.",
          "children": [
            {
              "type": "String",
              "name": "kind"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String",
              "name": "operator"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a 'decl' join point that represents the declaration associated with this expression, or undefined if there is none",
          "children": [
            {
              "type": "decl",
              "name": "decl"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "returns a cast joinpoint if this expression has an associated implicit cast, undefined otherwise",
          "children": [
            {
              "type": "cast",
              "name": "implicitCast"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the expression is part of an argument of a function call",
          "children": [
            {
              "type": "Boolean",
              "name": "isFunctionArgument"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "[read| write| readwrite]",
              "name": "use"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "vardecl",
              "name": "vardecl"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "attributes"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "selects"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "actions"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "ancestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with a dump of the AST representation starting from this node. This representation corresponds to the internal Java representation of the ClavaAst, where the node names correspond to Java classes. To get an equivalent representation with join point names, use the attribute 'dump'",
          "children": [
            {
              "type": "String",
              "name": "ast"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor AST name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "astAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, considering null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "astChild"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, considering null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "astChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String that uniquely identifies this node",
          "children": [
            {
              "type": "String",
              "name": "astId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if this node is a Java instance of the given name, which corresponds to a simple Java class name of an AST node. For an equivalent function for join point names, use 'instanceOf(joinPointName)'",
          "children": [
            {
              "type": "boolean",
              "name": "astIsInstance"
            },
            {
              "type": "String",
              "name": "className"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the Java class of this node, which is similar to the equivalent node in Clang AST",
          "children": [
            {
              "type": "String",
              "name": "astName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, considering null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "astNumChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "astParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The bit width of the type returned by this join point, in relation to the definitions of its Translation Unit, or undefined if there is no type or bitwidth defined, or if the join point is not in a TranslationUnit",
          "children": [
            {
              "type": "Integer",
              "name": "bitWidth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String list of the names of the join points that form a path from the root to this node",
          "children": [
            {
              "type": "String[]",
              "name": "chain"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the joinpoint chain",
          "children": [
            {
              "type": "joinpoint",
              "name": "chainAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "child"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "children"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the code represented by this node",
          "children": [
            {
              "type": "String",
              "name": "code"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "column"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the given node is a descendant of this node",
          "children": [
            {
              "type": "Boolean",
              "name": "contains"
            },
            {
              "type": "joinpoint",
              "name": "jp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "currentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "JS object associated with this node, containing parsed data of #pragma clava data when the node can be a target of pragmas. This is a special object, managed internally, and cannot be reassigned, to change its contents requires using key-value pairs. If the node can be the target of a pragma, the information stored in this object is persisted between rebuilds.",
          "children": [
            {
              "type": "Object",
              "name": "data"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the depth of this join point in the AST. If it is the root join point returns 0, if it is a child of the root node returns 1, etc.",
          "children": [
            {
              "type": "Integer",
              "name": "depth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves all descendants of the join point",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type, including the node itself",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendantsAndSelf"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endColumn"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endLine"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the file where the code of this node is located, if available",
          "children": [
            {
              "type": "String",
              "name": "filename"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the complete path to the file where the code of this node comes from",
          "children": [
            {
              "type": "String",
              "name": "filepath"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the first child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks in the descendants for the first node of the given type",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstJp"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use 'userField' instead]",
          "children": [
            {
              "type": "Object",
              "name": "getUserField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The value associated with the given property key",
          "children": [
            {
              "type": "Object",
              "name": "getValue"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use hasParent instead]",
          "children": [
            {
              "type": "boolean",
              "name": "hasAstParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the node has children, false otherwise",
          "children": [
            {
              "type": "Boolean",
              "name": "hasChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the given join point or AST node is the same (== test) as the current join point AST node",
          "children": [
            {
              "type": "Boolean",
              "name": "hasNode"
            },
            {
              "type": "Object",
              "name": "nodeOrJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this node has a parent",
          "children": [
            {
              "type": "boolean",
              "name": "hasParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point has a type",
          "children": [
            {
              "type": "Boolean",
              "name": "hasType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns comments that are not explicitly in the AST, but embedded in other nodes",
          "children": [
            {
              "type": "comment[]",
              "name": "inlineComments"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this is a Cilk node (i.e., cilk_spawn, cilk_sync or cilk_for)",
          "children": [
            {
              "type": "Boolean",
              "name": "isCilk"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is part of a system header file",
          "children": [
            {
              "type": "Boolean",
              "name": "isInSystemHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a header (e.g., if condition, for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a loop header (e.g., for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideLoopHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if any descendant or the node itself was defined as a macro",
          "children": [
            {
              "type": "Boolean",
              "name": "isMacro"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the full Java class name of the type of the Java field with the provided name",
          "children": [
            {
              "type": "String",
              "name": "javaFieldType"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'keys' instead, together with 'getValue'] The names of the Java fields of this node. Can be used as key of the attribute 'javaValue'",
          "children": [
            {
              "type": "String[]",
              "name": "javaFields"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'getValue' instead, with the names returned by the attribute 'keys'] Returns the value associated with the provided Java field name",
          "children": [
            {
              "type": "Object",
              "name": "javaValue"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use joinPointType instead (uppercase P)]",
          "children": [
            {
              "type": "String",
              "name": "joinpointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Id that is based on the position of the node in the code, and should remain stable between compilations (warning: only a few nodes - file, function, loop - currently support it)",
          "children": [
            {
              "type": "String",
              "name": "jpId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Java Class instance with the type of the given key",
          "children": [
            {
              "type": "Object",
              "name": "keyType"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A list of the properties currently supported by this node. Can be used as parameter of the attribute 'getValue'",
          "children": [
            {
              "type": "String[]",
              "name": "keys"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[HACK: .descendants(type) does not work in .lara files, after GraalVM update] Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "laraDescendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the last child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "lastChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that came before this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "leftJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "line"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A string with information about the file and code position of this node, if available",
          "children": [
            {
              "type": "String",
              "name": "location"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, ignoring null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "numChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope that is a parent of the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The pragmas associated with this node",
          "children": [
            {
              "type": "pragma[]",
              "name": "pragmas"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that comes after this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "rightJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the 'program' joinpoint",
          "children": [
            {
              "type": "joinpoint",
              "name": "root"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the nodes of the scope of the current join point. If this node has a body (e.g., loop, function) corresponds to the children of the body. Otherwise, returns an empty array",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "scopeNodes"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that came before this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsLeft"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that come after this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsRight"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Converts this join point to a statement, or returns undefined if it was not possible",
          "children": [
            {
              "type": "statement",
              "name": "stmt"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "type",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrives values that have been associated to nodes of the AST with 'setUserField'",
          "children": [
            {
              "type": "Object",
              "name": "userField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a String with the type of the join point",
          "children": [
            {
              "type": "String",
              "name": "joinPointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the current join point is an instance of the given type",
          "children": [
            {
              "type": "Boolean",
              "name": "instanceOf"
            },
            {
              "type": "String",
              "name": "name"
            }
          ]
        },
        {
          "type": "select",
          "clazz": "expression",
          "alias": "cond"
        },
        {
          "type": "select",
          "clazz": "expression",
          "alias": "trueExpr"
        },
        {
          "type": "select",
          "clazz": "expression",
          "alias": "falseExpr"
        },
        {
          "type": "select",
          "clazz": "vardecl",
          "alias": ""
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "insert"
            },
            {
              "type": "[before| after| replace]",
              "name": "position",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "def"
            },
            {
              "type": "String",
              "name": "attribute",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, but not of the nodes in its fields",
          "children": [
            {
              "type": "joinpoint",
              "name": "copy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Copies all enumerable own properties from the source object to the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataAssign"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Clears all properties from the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataClear"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, including the nodes in their fields (only the first level of field nodes, this function is not recursive)",
          "children": [
            {
              "type": "joinpoint",
              "name": "deepCopy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the node associated to this joinpoint from the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "detach"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point after this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point before this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Adds a message that will be printed to the user after weaving finishes. Identical messages are removed",
          "children": [
            {
              "type": "void",
              "name": "messageToUser"
            },
            {
              "type": "String",
              "name": "message",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the children of this node",
          "children": [
            {
              "type": "void",
              "name": "removeChildren"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this node with the given node",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of join points",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of strings",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWithStrings"
            },
            {
              "type": "String[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Setting data directly is not supported, this action just emits a warning and does nothing",
          "children": [
            {
              "type": "void",
              "name": "setData"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the first child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setFirstChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String[]",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the last child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setLastChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the type of a node, if it has a type",
          "children": [
            {
              "type": "void",
              "name": "setType"
            },
            {
              "type": "type",
              "name": "type",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Associates arbitrary values to nodes of the AST",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "String",
              "name": "fieldName",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a map",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "Map",
              "name": "fieldNameAndValue",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the value associated with the given property key",
          "children": [
            {
              "type": "joinpoint",
              "name": "setValue"
            },
            {
              "type": "String",
              "name": "key",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "suffix",
              "defaultValue": ""
            }
          ]
        }
      ]
    },
    {
      "type": "joinpoint",
      "name": "this",
      "extends": "expression",
      "children": [
        {
          "type": "attribute",
          "tooltip": "a 'decl' join point that represents the declaration associated with this expression, or undefined if there is none",
          "children": [
            {
              "type": "decl",
              "name": "decl"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "returns a cast joinpoint if this expression has an associated implicit cast, undefined otherwise",
          "children": [
            {
              "type": "cast",
              "name": "implicitCast"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the expression is part of an argument of a function call",
          "children": [
            {
              "type": "Boolean",
              "name": "isFunctionArgument"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "[read| write| readwrite]",
              "name": "use"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "vardecl",
              "name": "vardecl"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "attributes"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "selects"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "actions"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "ancestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with a dump of the AST representation starting from this node. This representation corresponds to the internal Java representation of the ClavaAst, where the node names correspond to Java classes. To get an equivalent representation with join point names, use the attribute 'dump'",
          "children": [
            {
              "type": "String",
              "name": "ast"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor AST name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "astAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, considering null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "astChild"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, considering null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "astChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String that uniquely identifies this node",
          "children": [
            {
              "type": "String",
              "name": "astId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if this node is a Java instance of the given name, which corresponds to a simple Java class name of an AST node. For an equivalent function for join point names, use 'instanceOf(joinPointName)'",
          "children": [
            {
              "type": "boolean",
              "name": "astIsInstance"
            },
            {
              "type": "String",
              "name": "className"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the Java class of this node, which is similar to the equivalent node in Clang AST",
          "children": [
            {
              "type": "String",
              "name": "astName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, considering null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "astNumChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "astParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The bit width of the type returned by this join point, in relation to the definitions of its Translation Unit, or undefined if there is no type or bitwidth defined, or if the join point is not in a TranslationUnit",
          "children": [
            {
              "type": "Integer",
              "name": "bitWidth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String list of the names of the join points that form a path from the root to this node",
          "children": [
            {
              "type": "String[]",
              "name": "chain"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the joinpoint chain",
          "children": [
            {
              "type": "joinpoint",
              "name": "chainAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "child"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "children"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the code represented by this node",
          "children": [
            {
              "type": "String",
              "name": "code"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "column"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the given node is a descendant of this node",
          "children": [
            {
              "type": "Boolean",
              "name": "contains"
            },
            {
              "type": "joinpoint",
              "name": "jp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "currentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "JS object associated with this node, containing parsed data of #pragma clava data when the node can be a target of pragmas. This is a special object, managed internally, and cannot be reassigned, to change its contents requires using key-value pairs. If the node can be the target of a pragma, the information stored in this object is persisted between rebuilds.",
          "children": [
            {
              "type": "Object",
              "name": "data"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the depth of this join point in the AST. If it is the root join point returns 0, if it is a child of the root node returns 1, etc.",
          "children": [
            {
              "type": "Integer",
              "name": "depth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves all descendants of the join point",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type, including the node itself",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendantsAndSelf"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endColumn"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endLine"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the file where the code of this node is located, if available",
          "children": [
            {
              "type": "String",
              "name": "filename"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the complete path to the file where the code of this node comes from",
          "children": [
            {
              "type": "String",
              "name": "filepath"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the first child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks in the descendants for the first node of the given type",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstJp"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use 'userField' instead]",
          "children": [
            {
              "type": "Object",
              "name": "getUserField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The value associated with the given property key",
          "children": [
            {
              "type": "Object",
              "name": "getValue"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use hasParent instead]",
          "children": [
            {
              "type": "boolean",
              "name": "hasAstParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the node has children, false otherwise",
          "children": [
            {
              "type": "Boolean",
              "name": "hasChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the given join point or AST node is the same (== test) as the current join point AST node",
          "children": [
            {
              "type": "Boolean",
              "name": "hasNode"
            },
            {
              "type": "Object",
              "name": "nodeOrJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this node has a parent",
          "children": [
            {
              "type": "boolean",
              "name": "hasParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point has a type",
          "children": [
            {
              "type": "Boolean",
              "name": "hasType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns comments that are not explicitly in the AST, but embedded in other nodes",
          "children": [
            {
              "type": "comment[]",
              "name": "inlineComments"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this is a Cilk node (i.e., cilk_spawn, cilk_sync or cilk_for)",
          "children": [
            {
              "type": "Boolean",
              "name": "isCilk"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is part of a system header file",
          "children": [
            {
              "type": "Boolean",
              "name": "isInSystemHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a header (e.g., if condition, for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a loop header (e.g., for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideLoopHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if any descendant or the node itself was defined as a macro",
          "children": [
            {
              "type": "Boolean",
              "name": "isMacro"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the full Java class name of the type of the Java field with the provided name",
          "children": [
            {
              "type": "String",
              "name": "javaFieldType"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'keys' instead, together with 'getValue'] The names of the Java fields of this node. Can be used as key of the attribute 'javaValue'",
          "children": [
            {
              "type": "String[]",
              "name": "javaFields"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'getValue' instead, with the names returned by the attribute 'keys'] Returns the value associated with the provided Java field name",
          "children": [
            {
              "type": "Object",
              "name": "javaValue"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use joinPointType instead (uppercase P)]",
          "children": [
            {
              "type": "String",
              "name": "joinpointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Id that is based on the position of the node in the code, and should remain stable between compilations (warning: only a few nodes - file, function, loop - currently support it)",
          "children": [
            {
              "type": "String",
              "name": "jpId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Java Class instance with the type of the given key",
          "children": [
            {
              "type": "Object",
              "name": "keyType"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A list of the properties currently supported by this node. Can be used as parameter of the attribute 'getValue'",
          "children": [
            {
              "type": "String[]",
              "name": "keys"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[HACK: .descendants(type) does not work in .lara files, after GraalVM update] Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "laraDescendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the last child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "lastChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that came before this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "leftJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "line"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A string with information about the file and code position of this node, if available",
          "children": [
            {
              "type": "String",
              "name": "location"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, ignoring null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "numChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope that is a parent of the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The pragmas associated with this node",
          "children": [
            {
              "type": "pragma[]",
              "name": "pragmas"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that comes after this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "rightJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the 'program' joinpoint",
          "children": [
            {
              "type": "joinpoint",
              "name": "root"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the nodes of the scope of the current join point. If this node has a body (e.g., loop, function) corresponds to the children of the body. Otherwise, returns an empty array",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "scopeNodes"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that came before this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsLeft"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that come after this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsRight"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Converts this join point to a statement, or returns undefined if it was not possible",
          "children": [
            {
              "type": "statement",
              "name": "stmt"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "type",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrives values that have been associated to nodes of the AST with 'setUserField'",
          "children": [
            {
              "type": "Object",
              "name": "userField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a String with the type of the join point",
          "children": [
            {
              "type": "String",
              "name": "joinPointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the current join point is an instance of the given type",
          "children": [
            {
              "type": "Boolean",
              "name": "instanceOf"
            },
            {
              "type": "String",
              "name": "name"
            }
          ]
        },
        {
          "type": "select",
          "clazz": "vardecl",
          "alias": ""
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "insert"
            },
            {
              "type": "[before| after| replace]",
              "name": "position",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "def"
            },
            {
              "type": "String",
              "name": "attribute",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, but not of the nodes in its fields",
          "children": [
            {
              "type": "joinpoint",
              "name": "copy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Copies all enumerable own properties from the source object to the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataAssign"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Clears all properties from the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataClear"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, including the nodes in their fields (only the first level of field nodes, this function is not recursive)",
          "children": [
            {
              "type": "joinpoint",
              "name": "deepCopy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the node associated to this joinpoint from the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "detach"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point after this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point before this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Adds a message that will be printed to the user after weaving finishes. Identical messages are removed",
          "children": [
            {
              "type": "void",
              "name": "messageToUser"
            },
            {
              "type": "String",
              "name": "message",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the children of this node",
          "children": [
            {
              "type": "void",
              "name": "removeChildren"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this node with the given node",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of join points",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of strings",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWithStrings"
            },
            {
              "type": "String[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Setting data directly is not supported, this action just emits a warning and does nothing",
          "children": [
            {
              "type": "void",
              "name": "setData"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the first child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setFirstChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String[]",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the last child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setLastChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the type of a node, if it has a type",
          "children": [
            {
              "type": "void",
              "name": "setType"
            },
            {
              "type": "type",
              "name": "type",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Associates arbitrary values to nodes of the AST",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "String",
              "name": "fieldName",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a map",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "Map",
              "name": "fieldNameAndValue",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the value associated with the given property key",
          "children": [
            {
              "type": "joinpoint",
              "name": "setValue"
            },
            {
              "type": "String",
              "name": "key",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "suffix",
              "defaultValue": ""
            }
          ]
        }
      ]
    },
    {
      "type": "joinpoint",
      "name": "type",
      "extends": "joinpoint",
      "children": [
        {
          "type": "attribute",
          "children": [
            {
              "type": "Integer[]",
              "name": "arrayDims"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Integer",
              "name": "arraySize"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The bit width of this type in the Translation Unit of the given join point, or undefined if there is no bitwidth defined",
          "children": [
            {
              "type": "Integer",
              "name": "bitWidth"
            },
            {
              "type": "joinpoint",
              "name": "reference"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "constant"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Single-step desugar. Returns the type itself if it does not have sugar",
          "children": [
            {
              "type": "type",
              "name": "desugar"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Completely desugars the type",
          "children": [
            {
              "type": "type",
              "name": "desugarAll"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A tree representation of the fields of this type",
          "children": [
            {
              "type": "String",
              "name": "fieldTree"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "hasSugar"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "hasTemplateArgs"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isArray"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "True if this is a type declared with the 'auto' keyword",
          "children": [
            {
              "type": "Boolean",
              "name": "isAuto"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isBuiltin"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isPointer"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isTopLevel"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String",
              "name": "kind"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Ignores certain types (e.g., DecayedType)",
          "children": [
            {
              "type": "type",
              "name": "normalize"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "templateArgsStrings"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "type[]",
              "name": "templateArgsTypes"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Maps names of join point fields that represent type join points, to their respective values",
          "children": [
            {
              "type": "Map",
              "name": "typeFields"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "If the type encapsulates another type, returns the encapsulated type",
          "children": [
            {
              "type": "type",
              "name": "unwrap"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "attributes"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "selects"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "actions"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "ancestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with a dump of the AST representation starting from this node. This representation corresponds to the internal Java representation of the ClavaAst, where the node names correspond to Java classes. To get an equivalent representation with join point names, use the attribute 'dump'",
          "children": [
            {
              "type": "String",
              "name": "ast"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor AST name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "astAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, considering null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "astChild"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, considering null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "astChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String that uniquely identifies this node",
          "children": [
            {
              "type": "String",
              "name": "astId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if this node is a Java instance of the given name, which corresponds to a simple Java class name of an AST node. For an equivalent function for join point names, use 'instanceOf(joinPointName)'",
          "children": [
            {
              "type": "boolean",
              "name": "astIsInstance"
            },
            {
              "type": "String",
              "name": "className"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the Java class of this node, which is similar to the equivalent node in Clang AST",
          "children": [
            {
              "type": "String",
              "name": "astName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, considering null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "astNumChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "astParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The bit width of the type returned by this join point, in relation to the definitions of its Translation Unit, or undefined if there is no type or bitwidth defined, or if the join point is not in a TranslationUnit",
          "children": [
            {
              "type": "Integer",
              "name": "bitWidth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String list of the names of the join points that form a path from the root to this node",
          "children": [
            {
              "type": "String[]",
              "name": "chain"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the joinpoint chain",
          "children": [
            {
              "type": "joinpoint",
              "name": "chainAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "child"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "children"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the code represented by this node",
          "children": [
            {
              "type": "String",
              "name": "code"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "column"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the given node is a descendant of this node",
          "children": [
            {
              "type": "Boolean",
              "name": "contains"
            },
            {
              "type": "joinpoint",
              "name": "jp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "currentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "JS object associated with this node, containing parsed data of #pragma clava data when the node can be a target of pragmas. This is a special object, managed internally, and cannot be reassigned, to change its contents requires using key-value pairs. If the node can be the target of a pragma, the information stored in this object is persisted between rebuilds.",
          "children": [
            {
              "type": "Object",
              "name": "data"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the depth of this join point in the AST. If it is the root join point returns 0, if it is a child of the root node returns 1, etc.",
          "children": [
            {
              "type": "Integer",
              "name": "depth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves all descendants of the join point",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type, including the node itself",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendantsAndSelf"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endColumn"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endLine"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the file where the code of this node is located, if available",
          "children": [
            {
              "type": "String",
              "name": "filename"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the complete path to the file where the code of this node comes from",
          "children": [
            {
              "type": "String",
              "name": "filepath"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the first child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks in the descendants for the first node of the given type",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstJp"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use 'userField' instead]",
          "children": [
            {
              "type": "Object",
              "name": "getUserField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The value associated with the given property key",
          "children": [
            {
              "type": "Object",
              "name": "getValue"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use hasParent instead]",
          "children": [
            {
              "type": "boolean",
              "name": "hasAstParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the node has children, false otherwise",
          "children": [
            {
              "type": "Boolean",
              "name": "hasChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the given join point or AST node is the same (== test) as the current join point AST node",
          "children": [
            {
              "type": "Boolean",
              "name": "hasNode"
            },
            {
              "type": "Object",
              "name": "nodeOrJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this node has a parent",
          "children": [
            {
              "type": "boolean",
              "name": "hasParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point has a type",
          "children": [
            {
              "type": "Boolean",
              "name": "hasType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns comments that are not explicitly in the AST, but embedded in other nodes",
          "children": [
            {
              "type": "comment[]",
              "name": "inlineComments"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this is a Cilk node (i.e., cilk_spawn, cilk_sync or cilk_for)",
          "children": [
            {
              "type": "Boolean",
              "name": "isCilk"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is part of a system header file",
          "children": [
            {
              "type": "Boolean",
              "name": "isInSystemHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a header (e.g., if condition, for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a loop header (e.g., for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideLoopHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if any descendant or the node itself was defined as a macro",
          "children": [
            {
              "type": "Boolean",
              "name": "isMacro"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the full Java class name of the type of the Java field with the provided name",
          "children": [
            {
              "type": "String",
              "name": "javaFieldType"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'keys' instead, together with 'getValue'] The names of the Java fields of this node. Can be used as key of the attribute 'javaValue'",
          "children": [
            {
              "type": "String[]",
              "name": "javaFields"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'getValue' instead, with the names returned by the attribute 'keys'] Returns the value associated with the provided Java field name",
          "children": [
            {
              "type": "Object",
              "name": "javaValue"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use joinPointType instead (uppercase P)]",
          "children": [
            {
              "type": "String",
              "name": "joinpointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Id that is based on the position of the node in the code, and should remain stable between compilations (warning: only a few nodes - file, function, loop - currently support it)",
          "children": [
            {
              "type": "String",
              "name": "jpId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Java Class instance with the type of the given key",
          "children": [
            {
              "type": "Object",
              "name": "keyType"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A list of the properties currently supported by this node. Can be used as parameter of the attribute 'getValue'",
          "children": [
            {
              "type": "String[]",
              "name": "keys"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[HACK: .descendants(type) does not work in .lara files, after GraalVM update] Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "laraDescendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the last child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "lastChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that came before this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "leftJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "line"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A string with information about the file and code position of this node, if available",
          "children": [
            {
              "type": "String",
              "name": "location"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, ignoring null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "numChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope that is a parent of the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The pragmas associated with this node",
          "children": [
            {
              "type": "pragma[]",
              "name": "pragmas"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that comes after this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "rightJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the 'program' joinpoint",
          "children": [
            {
              "type": "joinpoint",
              "name": "root"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the nodes of the scope of the current join point. If this node has a body (e.g., loop, function) corresponds to the children of the body. Otherwise, returns an empty array",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "scopeNodes"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that came before this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsLeft"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that come after this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsRight"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Converts this join point to a statement, or returns undefined if it was not possible",
          "children": [
            {
              "type": "statement",
              "name": "stmt"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "type",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrives values that have been associated to nodes of the AST with 'setUserField'",
          "children": [
            {
              "type": "Object",
              "name": "userField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a String with the type of the join point",
          "children": [
            {
              "type": "String",
              "name": "joinPointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the current join point is an instance of the given type",
          "children": [
            {
              "type": "Boolean",
              "name": "instanceOf"
            },
            {
              "type": "String",
              "name": "name"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Returns a copy of this type with the qualifier const",
          "children": [
            {
              "type": "type",
              "name": "asConst"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the desugared type of this type",
          "children": [
            {
              "type": "void",
              "name": "setDesugar"
            },
            {
              "type": "type",
              "name": "desugaredType",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the template argument types of a template type",
          "children": [
            {
              "type": "void",
              "name": "setTemplateArgsTypes"
            },
            {
              "type": "type[]",
              "name": "templateArgTypes",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets a single template argument type of a template type",
          "children": [
            {
              "type": "void",
              "name": "setTemplateArgsTypes"
            },
            {
              "type": "Integer",
              "name": "index",
              "defaultValue": ""
            },
            {
              "type": "type",
              "name": "templateArgType",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Changes a single occurence of a type field that has the current value with new value. Returns true if there was a change",
          "children": [
            {
              "type": "boolean",
              "name": "setTypeFieldByValueRecursive"
            },
            {
              "type": "Object",
              "name": "currentValue",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "newValue",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces an underlying type of this instance with new type, if it matches the old type. Returns true if there were changes",
          "children": [
            {
              "type": "type",
              "name": "setUnderlyingType"
            },
            {
              "type": "type",
              "name": "oldValue",
              "defaultValue": ""
            },
            {
              "type": "type",
              "name": "newValue",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "insert"
            },
            {
              "type": "[before| after| replace]",
              "name": "position",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "def"
            },
            {
              "type": "String",
              "name": "attribute",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, but not of the nodes in its fields",
          "children": [
            {
              "type": "joinpoint",
              "name": "copy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Copies all enumerable own properties from the source object to the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataAssign"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Clears all properties from the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataClear"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, including the nodes in their fields (only the first level of field nodes, this function is not recursive)",
          "children": [
            {
              "type": "joinpoint",
              "name": "deepCopy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the node associated to this joinpoint from the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "detach"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point after this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point before this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Adds a message that will be printed to the user after weaving finishes. Identical messages are removed",
          "children": [
            {
              "type": "void",
              "name": "messageToUser"
            },
            {
              "type": "String",
              "name": "message",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the children of this node",
          "children": [
            {
              "type": "void",
              "name": "removeChildren"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this node with the given node",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of join points",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of strings",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWithStrings"
            },
            {
              "type": "String[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Setting data directly is not supported, this action just emits a warning and does nothing",
          "children": [
            {
              "type": "void",
              "name": "setData"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the first child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setFirstChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String[]",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the last child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setLastChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the type of a node, if it has a type",
          "children": [
            {
              "type": "void",
              "name": "setType"
            },
            {
              "type": "type",
              "name": "type",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Associates arbitrary values to nodes of the AST",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "String",
              "name": "fieldName",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a map",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "Map",
              "name": "fieldNameAndValue",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the value associated with the given property key",
          "children": [
            {
              "type": "joinpoint",
              "name": "setValue"
            },
            {
              "type": "String",
              "name": "key",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "suffix",
              "defaultValue": ""
            }
          ]
        }
      ]
    },
    {
      "type": "joinpoint",
      "name": "typedefDecl",
      "defaultAttr": "name",
      "extends": "typedefNameDecl",
      "tooltip": "Declaration of a typedef-name via the 'typedef' type specifier",
      "children": [
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isPublic"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String",
              "name": "name"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String",
              "name": "qualifiedName"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String",
              "name": "qualifiedPrefix"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The attributes (e.g. Pure, CUDAGlobal) associated to this decl",
          "children": [
            {
              "type": "attribute[]",
              "name": "attrs"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "attributes"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "selects"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "actions"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "ancestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with a dump of the AST representation starting from this node. This representation corresponds to the internal Java representation of the ClavaAst, where the node names correspond to Java classes. To get an equivalent representation with join point names, use the attribute 'dump'",
          "children": [
            {
              "type": "String",
              "name": "ast"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor AST name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "astAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, considering null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "astChild"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, considering null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "astChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String that uniquely identifies this node",
          "children": [
            {
              "type": "String",
              "name": "astId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if this node is a Java instance of the given name, which corresponds to a simple Java class name of an AST node. For an equivalent function for join point names, use 'instanceOf(joinPointName)'",
          "children": [
            {
              "type": "boolean",
              "name": "astIsInstance"
            },
            {
              "type": "String",
              "name": "className"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the Java class of this node, which is similar to the equivalent node in Clang AST",
          "children": [
            {
              "type": "String",
              "name": "astName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, considering null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "astNumChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "astParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The bit width of the type returned by this join point, in relation to the definitions of its Translation Unit, or undefined if there is no type or bitwidth defined, or if the join point is not in a TranslationUnit",
          "children": [
            {
              "type": "Integer",
              "name": "bitWidth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String list of the names of the join points that form a path from the root to this node",
          "children": [
            {
              "type": "String[]",
              "name": "chain"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the joinpoint chain",
          "children": [
            {
              "type": "joinpoint",
              "name": "chainAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "child"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "children"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the code represented by this node",
          "children": [
            {
              "type": "String",
              "name": "code"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "column"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the given node is a descendant of this node",
          "children": [
            {
              "type": "Boolean",
              "name": "contains"
            },
            {
              "type": "joinpoint",
              "name": "jp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "currentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "JS object associated with this node, containing parsed data of #pragma clava data when the node can be a target of pragmas. This is a special object, managed internally, and cannot be reassigned, to change its contents requires using key-value pairs. If the node can be the target of a pragma, the information stored in this object is persisted between rebuilds.",
          "children": [
            {
              "type": "Object",
              "name": "data"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the depth of this join point in the AST. If it is the root join point returns 0, if it is a child of the root node returns 1, etc.",
          "children": [
            {
              "type": "Integer",
              "name": "depth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves all descendants of the join point",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type, including the node itself",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendantsAndSelf"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endColumn"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endLine"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the file where the code of this node is located, if available",
          "children": [
            {
              "type": "String",
              "name": "filename"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the complete path to the file where the code of this node comes from",
          "children": [
            {
              "type": "String",
              "name": "filepath"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the first child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks in the descendants for the first node of the given type",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstJp"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use 'userField' instead]",
          "children": [
            {
              "type": "Object",
              "name": "getUserField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The value associated with the given property key",
          "children": [
            {
              "type": "Object",
              "name": "getValue"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use hasParent instead]",
          "children": [
            {
              "type": "boolean",
              "name": "hasAstParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the node has children, false otherwise",
          "children": [
            {
              "type": "Boolean",
              "name": "hasChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the given join point or AST node is the same (== test) as the current join point AST node",
          "children": [
            {
              "type": "Boolean",
              "name": "hasNode"
            },
            {
              "type": "Object",
              "name": "nodeOrJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this node has a parent",
          "children": [
            {
              "type": "boolean",
              "name": "hasParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point has a type",
          "children": [
            {
              "type": "Boolean",
              "name": "hasType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns comments that are not explicitly in the AST, but embedded in other nodes",
          "children": [
            {
              "type": "comment[]",
              "name": "inlineComments"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this is a Cilk node (i.e., cilk_spawn, cilk_sync or cilk_for)",
          "children": [
            {
              "type": "Boolean",
              "name": "isCilk"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is part of a system header file",
          "children": [
            {
              "type": "Boolean",
              "name": "isInSystemHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a header (e.g., if condition, for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a loop header (e.g., for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideLoopHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if any descendant or the node itself was defined as a macro",
          "children": [
            {
              "type": "Boolean",
              "name": "isMacro"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the full Java class name of the type of the Java field with the provided name",
          "children": [
            {
              "type": "String",
              "name": "javaFieldType"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'keys' instead, together with 'getValue'] The names of the Java fields of this node. Can be used as key of the attribute 'javaValue'",
          "children": [
            {
              "type": "String[]",
              "name": "javaFields"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'getValue' instead, with the names returned by the attribute 'keys'] Returns the value associated with the provided Java field name",
          "children": [
            {
              "type": "Object",
              "name": "javaValue"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use joinPointType instead (uppercase P)]",
          "children": [
            {
              "type": "String",
              "name": "joinpointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Id that is based on the position of the node in the code, and should remain stable between compilations (warning: only a few nodes - file, function, loop - currently support it)",
          "children": [
            {
              "type": "String",
              "name": "jpId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Java Class instance with the type of the given key",
          "children": [
            {
              "type": "Object",
              "name": "keyType"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A list of the properties currently supported by this node. Can be used as parameter of the attribute 'getValue'",
          "children": [
            {
              "type": "String[]",
              "name": "keys"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[HACK: .descendants(type) does not work in .lara files, after GraalVM update] Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "laraDescendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the last child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "lastChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that came before this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "leftJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "line"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A string with information about the file and code position of this node, if available",
          "children": [
            {
              "type": "String",
              "name": "location"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, ignoring null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "numChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope that is a parent of the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The pragmas associated with this node",
          "children": [
            {
              "type": "pragma[]",
              "name": "pragmas"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that comes after this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "rightJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the 'program' joinpoint",
          "children": [
            {
              "type": "joinpoint",
              "name": "root"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the nodes of the scope of the current join point. If this node has a body (e.g., loop, function) corresponds to the children of the body. Otherwise, returns an empty array",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "scopeNodes"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that came before this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsLeft"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that come after this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsRight"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Converts this join point to a statement, or returns undefined if it was not possible",
          "children": [
            {
              "type": "statement",
              "name": "stmt"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "type",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrives values that have been associated to nodes of the AST with 'setUserField'",
          "children": [
            {
              "type": "Object",
              "name": "userField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a String with the type of the join point",
          "children": [
            {
              "type": "String",
              "name": "joinPointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the current join point is an instance of the given type",
          "children": [
            {
              "type": "Boolean",
              "name": "instanceOf"
            },
            {
              "type": "String",
              "name": "name"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the name of this namedDecl",
          "children": [
            {
              "type": "void",
              "name": "setName"
            },
            {
              "type": "String",
              "name": "name",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the qualified name of this namedDecl (changes both the name and qualified prefix)",
          "children": [
            {
              "type": "void",
              "name": "setQualifiedName"
            },
            {
              "type": "String",
              "name": "name",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the qualified prefix of this namedDecl",
          "children": [
            {
              "type": "void",
              "name": "setQualifiedPrefix"
            },
            {
              "type": "String",
              "name": "qualifiedPrefix",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "insert"
            },
            {
              "type": "[before| after| replace]",
              "name": "position",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "def"
            },
            {
              "type": "String",
              "name": "attribute",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, but not of the nodes in its fields",
          "children": [
            {
              "type": "joinpoint",
              "name": "copy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Copies all enumerable own properties from the source object to the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataAssign"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Clears all properties from the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataClear"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, including the nodes in their fields (only the first level of field nodes, this function is not recursive)",
          "children": [
            {
              "type": "joinpoint",
              "name": "deepCopy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the node associated to this joinpoint from the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "detach"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point after this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point before this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Adds a message that will be printed to the user after weaving finishes. Identical messages are removed",
          "children": [
            {
              "type": "void",
              "name": "messageToUser"
            },
            {
              "type": "String",
              "name": "message",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the children of this node",
          "children": [
            {
              "type": "void",
              "name": "removeChildren"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this node with the given node",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of join points",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of strings",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWithStrings"
            },
            {
              "type": "String[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Setting data directly is not supported, this action just emits a warning and does nothing",
          "children": [
            {
              "type": "void",
              "name": "setData"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the first child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setFirstChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String[]",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the last child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setLastChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the type of a node, if it has a type",
          "children": [
            {
              "type": "void",
              "name": "setType"
            },
            {
              "type": "type",
              "name": "type",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Associates arbitrary values to nodes of the AST",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "String",
              "name": "fieldName",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a map",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "Map",
              "name": "fieldNameAndValue",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the value associated with the given property key",
          "children": [
            {
              "type": "joinpoint",
              "name": "setValue"
            },
            {
              "type": "String",
              "name": "key",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "suffix",
              "defaultValue": ""
            }
          ]
        }
      ]
    },
    {
      "type": "joinpoint",
      "name": "typedefNameDecl",
      "defaultAttr": "name",
      "extends": "namedDecl",
      "tooltip": "Base node for declarations which introduce a typedef-name",
      "children": [
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isPublic"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String",
              "name": "name"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String",
              "name": "qualifiedName"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String",
              "name": "qualifiedPrefix"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The attributes (e.g. Pure, CUDAGlobal) associated to this decl",
          "children": [
            {
              "type": "attribute[]",
              "name": "attrs"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "attributes"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "selects"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "actions"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "ancestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with a dump of the AST representation starting from this node. This representation corresponds to the internal Java representation of the ClavaAst, where the node names correspond to Java classes. To get an equivalent representation with join point names, use the attribute 'dump'",
          "children": [
            {
              "type": "String",
              "name": "ast"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor AST name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "astAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, considering null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "astChild"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, considering null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "astChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String that uniquely identifies this node",
          "children": [
            {
              "type": "String",
              "name": "astId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if this node is a Java instance of the given name, which corresponds to a simple Java class name of an AST node. For an equivalent function for join point names, use 'instanceOf(joinPointName)'",
          "children": [
            {
              "type": "boolean",
              "name": "astIsInstance"
            },
            {
              "type": "String",
              "name": "className"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the Java class of this node, which is similar to the equivalent node in Clang AST",
          "children": [
            {
              "type": "String",
              "name": "astName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, considering null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "astNumChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "astParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The bit width of the type returned by this join point, in relation to the definitions of its Translation Unit, or undefined if there is no type or bitwidth defined, or if the join point is not in a TranslationUnit",
          "children": [
            {
              "type": "Integer",
              "name": "bitWidth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String list of the names of the join points that form a path from the root to this node",
          "children": [
            {
              "type": "String[]",
              "name": "chain"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the joinpoint chain",
          "children": [
            {
              "type": "joinpoint",
              "name": "chainAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "child"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "children"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the code represented by this node",
          "children": [
            {
              "type": "String",
              "name": "code"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "column"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the given node is a descendant of this node",
          "children": [
            {
              "type": "Boolean",
              "name": "contains"
            },
            {
              "type": "joinpoint",
              "name": "jp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "currentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "JS object associated with this node, containing parsed data of #pragma clava data when the node can be a target of pragmas. This is a special object, managed internally, and cannot be reassigned, to change its contents requires using key-value pairs. If the node can be the target of a pragma, the information stored in this object is persisted between rebuilds.",
          "children": [
            {
              "type": "Object",
              "name": "data"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the depth of this join point in the AST. If it is the root join point returns 0, if it is a child of the root node returns 1, etc.",
          "children": [
            {
              "type": "Integer",
              "name": "depth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves all descendants of the join point",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type, including the node itself",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendantsAndSelf"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endColumn"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endLine"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the file where the code of this node is located, if available",
          "children": [
            {
              "type": "String",
              "name": "filename"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the complete path to the file where the code of this node comes from",
          "children": [
            {
              "type": "String",
              "name": "filepath"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the first child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks in the descendants for the first node of the given type",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstJp"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use 'userField' instead]",
          "children": [
            {
              "type": "Object",
              "name": "getUserField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The value associated with the given property key",
          "children": [
            {
              "type": "Object",
              "name": "getValue"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use hasParent instead]",
          "children": [
            {
              "type": "boolean",
              "name": "hasAstParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the node has children, false otherwise",
          "children": [
            {
              "type": "Boolean",
              "name": "hasChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the given join point or AST node is the same (== test) as the current join point AST node",
          "children": [
            {
              "type": "Boolean",
              "name": "hasNode"
            },
            {
              "type": "Object",
              "name": "nodeOrJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this node has a parent",
          "children": [
            {
              "type": "boolean",
              "name": "hasParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point has a type",
          "children": [
            {
              "type": "Boolean",
              "name": "hasType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns comments that are not explicitly in the AST, but embedded in other nodes",
          "children": [
            {
              "type": "comment[]",
              "name": "inlineComments"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this is a Cilk node (i.e., cilk_spawn, cilk_sync or cilk_for)",
          "children": [
            {
              "type": "Boolean",
              "name": "isCilk"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is part of a system header file",
          "children": [
            {
              "type": "Boolean",
              "name": "isInSystemHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a header (e.g., if condition, for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a loop header (e.g., for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideLoopHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if any descendant or the node itself was defined as a macro",
          "children": [
            {
              "type": "Boolean",
              "name": "isMacro"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the full Java class name of the type of the Java field with the provided name",
          "children": [
            {
              "type": "String",
              "name": "javaFieldType"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'keys' instead, together with 'getValue'] The names of the Java fields of this node. Can be used as key of the attribute 'javaValue'",
          "children": [
            {
              "type": "String[]",
              "name": "javaFields"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'getValue' instead, with the names returned by the attribute 'keys'] Returns the value associated with the provided Java field name",
          "children": [
            {
              "type": "Object",
              "name": "javaValue"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use joinPointType instead (uppercase P)]",
          "children": [
            {
              "type": "String",
              "name": "joinpointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Id that is based on the position of the node in the code, and should remain stable between compilations (warning: only a few nodes - file, function, loop - currently support it)",
          "children": [
            {
              "type": "String",
              "name": "jpId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Java Class instance with the type of the given key",
          "children": [
            {
              "type": "Object",
              "name": "keyType"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A list of the properties currently supported by this node. Can be used as parameter of the attribute 'getValue'",
          "children": [
            {
              "type": "String[]",
              "name": "keys"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[HACK: .descendants(type) does not work in .lara files, after GraalVM update] Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "laraDescendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the last child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "lastChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that came before this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "leftJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "line"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A string with information about the file and code position of this node, if available",
          "children": [
            {
              "type": "String",
              "name": "location"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, ignoring null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "numChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope that is a parent of the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The pragmas associated with this node",
          "children": [
            {
              "type": "pragma[]",
              "name": "pragmas"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that comes after this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "rightJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the 'program' joinpoint",
          "children": [
            {
              "type": "joinpoint",
              "name": "root"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the nodes of the scope of the current join point. If this node has a body (e.g., loop, function) corresponds to the children of the body. Otherwise, returns an empty array",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "scopeNodes"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that came before this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsLeft"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that come after this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsRight"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Converts this join point to a statement, or returns undefined if it was not possible",
          "children": [
            {
              "type": "statement",
              "name": "stmt"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "type",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrives values that have been associated to nodes of the AST with 'setUserField'",
          "children": [
            {
              "type": "Object",
              "name": "userField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a String with the type of the join point",
          "children": [
            {
              "type": "String",
              "name": "joinPointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the current join point is an instance of the given type",
          "children": [
            {
              "type": "Boolean",
              "name": "instanceOf"
            },
            {
              "type": "String",
              "name": "name"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the name of this namedDecl",
          "children": [
            {
              "type": "void",
              "name": "setName"
            },
            {
              "type": "String",
              "name": "name",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the qualified name of this namedDecl (changes both the name and qualified prefix)",
          "children": [
            {
              "type": "void",
              "name": "setQualifiedName"
            },
            {
              "type": "String",
              "name": "name",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the qualified prefix of this namedDecl",
          "children": [
            {
              "type": "void",
              "name": "setQualifiedPrefix"
            },
            {
              "type": "String",
              "name": "qualifiedPrefix",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "insert"
            },
            {
              "type": "[before| after| replace]",
              "name": "position",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "def"
            },
            {
              "type": "String",
              "name": "attribute",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, but not of the nodes in its fields",
          "children": [
            {
              "type": "joinpoint",
              "name": "copy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Copies all enumerable own properties from the source object to the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataAssign"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Clears all properties from the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataClear"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, including the nodes in their fields (only the first level of field nodes, this function is not recursive)",
          "children": [
            {
              "type": "joinpoint",
              "name": "deepCopy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the node associated to this joinpoint from the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "detach"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point after this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point before this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Adds a message that will be printed to the user after weaving finishes. Identical messages are removed",
          "children": [
            {
              "type": "void",
              "name": "messageToUser"
            },
            {
              "type": "String",
              "name": "message",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the children of this node",
          "children": [
            {
              "type": "void",
              "name": "removeChildren"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this node with the given node",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of join points",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of strings",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWithStrings"
            },
            {
              "type": "String[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Setting data directly is not supported, this action just emits a warning and does nothing",
          "children": [
            {
              "type": "void",
              "name": "setData"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the first child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setFirstChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String[]",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the last child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setLastChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the type of a node, if it has a type",
          "children": [
            {
              "type": "void",
              "name": "setType"
            },
            {
              "type": "type",
              "name": "type",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Associates arbitrary values to nodes of the AST",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "String",
              "name": "fieldName",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a map",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "Map",
              "name": "fieldNameAndValue",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the value associated with the given property key",
          "children": [
            {
              "type": "joinpoint",
              "name": "setValue"
            },
            {
              "type": "String",
              "name": "key",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "suffix",
              "defaultValue": ""
            }
          ]
        }
      ]
    },
    {
      "type": "joinpoint",
      "name": "typedefType",
      "extends": "type",
      "tooltip": "Represents the type of a typedef.",
      "children": [
        {
          "type": "attribute",
          "tooltip": "the typedef declaration associated with this typedef type",
          "children": [
            {
              "type": "typedefNameDecl",
              "name": "decl"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the type that is being typedef'd",
          "children": [
            {
              "type": "type",
              "name": "underlyingType"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Integer[]",
              "name": "arrayDims"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Integer",
              "name": "arraySize"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The bit width of this type in the Translation Unit of the given join point, or undefined if there is no bitwidth defined",
          "children": [
            {
              "type": "Integer",
              "name": "bitWidth"
            },
            {
              "type": "joinpoint",
              "name": "reference"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "constant"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Single-step desugar. Returns the type itself if it does not have sugar",
          "children": [
            {
              "type": "type",
              "name": "desugar"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Completely desugars the type",
          "children": [
            {
              "type": "type",
              "name": "desugarAll"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A tree representation of the fields of this type",
          "children": [
            {
              "type": "String",
              "name": "fieldTree"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "hasSugar"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "hasTemplateArgs"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isArray"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "True if this is a type declared with the 'auto' keyword",
          "children": [
            {
              "type": "Boolean",
              "name": "isAuto"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isBuiltin"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isPointer"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isTopLevel"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String",
              "name": "kind"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Ignores certain types (e.g., DecayedType)",
          "children": [
            {
              "type": "type",
              "name": "normalize"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "templateArgsStrings"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "type[]",
              "name": "templateArgsTypes"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Maps names of join point fields that represent type join points, to their respective values",
          "children": [
            {
              "type": "Map",
              "name": "typeFields"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "If the type encapsulates another type, returns the encapsulated type",
          "children": [
            {
              "type": "type",
              "name": "unwrap"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "attributes"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "selects"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "actions"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "ancestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with a dump of the AST representation starting from this node. This representation corresponds to the internal Java representation of the ClavaAst, where the node names correspond to Java classes. To get an equivalent representation with join point names, use the attribute 'dump'",
          "children": [
            {
              "type": "String",
              "name": "ast"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor AST name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "astAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, considering null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "astChild"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, considering null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "astChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String that uniquely identifies this node",
          "children": [
            {
              "type": "String",
              "name": "astId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if this node is a Java instance of the given name, which corresponds to a simple Java class name of an AST node. For an equivalent function for join point names, use 'instanceOf(joinPointName)'",
          "children": [
            {
              "type": "boolean",
              "name": "astIsInstance"
            },
            {
              "type": "String",
              "name": "className"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the Java class of this node, which is similar to the equivalent node in Clang AST",
          "children": [
            {
              "type": "String",
              "name": "astName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, considering null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "astNumChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "astParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The bit width of the type returned by this join point, in relation to the definitions of its Translation Unit, or undefined if there is no type or bitwidth defined, or if the join point is not in a TranslationUnit",
          "children": [
            {
              "type": "Integer",
              "name": "bitWidth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String list of the names of the join points that form a path from the root to this node",
          "children": [
            {
              "type": "String[]",
              "name": "chain"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the joinpoint chain",
          "children": [
            {
              "type": "joinpoint",
              "name": "chainAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "child"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "children"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the code represented by this node",
          "children": [
            {
              "type": "String",
              "name": "code"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "column"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the given node is a descendant of this node",
          "children": [
            {
              "type": "Boolean",
              "name": "contains"
            },
            {
              "type": "joinpoint",
              "name": "jp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "currentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "JS object associated with this node, containing parsed data of #pragma clava data when the node can be a target of pragmas. This is a special object, managed internally, and cannot be reassigned, to change its contents requires using key-value pairs. If the node can be the target of a pragma, the information stored in this object is persisted between rebuilds.",
          "children": [
            {
              "type": "Object",
              "name": "data"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the depth of this join point in the AST. If it is the root join point returns 0, if it is a child of the root node returns 1, etc.",
          "children": [
            {
              "type": "Integer",
              "name": "depth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves all descendants of the join point",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type, including the node itself",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendantsAndSelf"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endColumn"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endLine"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the file where the code of this node is located, if available",
          "children": [
            {
              "type": "String",
              "name": "filename"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the complete path to the file where the code of this node comes from",
          "children": [
            {
              "type": "String",
              "name": "filepath"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the first child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks in the descendants for the first node of the given type",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstJp"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use 'userField' instead]",
          "children": [
            {
              "type": "Object",
              "name": "getUserField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The value associated with the given property key",
          "children": [
            {
              "type": "Object",
              "name": "getValue"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use hasParent instead]",
          "children": [
            {
              "type": "boolean",
              "name": "hasAstParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the node has children, false otherwise",
          "children": [
            {
              "type": "Boolean",
              "name": "hasChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the given join point or AST node is the same (== test) as the current join point AST node",
          "children": [
            {
              "type": "Boolean",
              "name": "hasNode"
            },
            {
              "type": "Object",
              "name": "nodeOrJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this node has a parent",
          "children": [
            {
              "type": "boolean",
              "name": "hasParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point has a type",
          "children": [
            {
              "type": "Boolean",
              "name": "hasType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns comments that are not explicitly in the AST, but embedded in other nodes",
          "children": [
            {
              "type": "comment[]",
              "name": "inlineComments"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this is a Cilk node (i.e., cilk_spawn, cilk_sync or cilk_for)",
          "children": [
            {
              "type": "Boolean",
              "name": "isCilk"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is part of a system header file",
          "children": [
            {
              "type": "Boolean",
              "name": "isInSystemHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a header (e.g., if condition, for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a loop header (e.g., for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideLoopHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if any descendant or the node itself was defined as a macro",
          "children": [
            {
              "type": "Boolean",
              "name": "isMacro"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the full Java class name of the type of the Java field with the provided name",
          "children": [
            {
              "type": "String",
              "name": "javaFieldType"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'keys' instead, together with 'getValue'] The names of the Java fields of this node. Can be used as key of the attribute 'javaValue'",
          "children": [
            {
              "type": "String[]",
              "name": "javaFields"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'getValue' instead, with the names returned by the attribute 'keys'] Returns the value associated with the provided Java field name",
          "children": [
            {
              "type": "Object",
              "name": "javaValue"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use joinPointType instead (uppercase P)]",
          "children": [
            {
              "type": "String",
              "name": "joinpointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Id that is based on the position of the node in the code, and should remain stable between compilations (warning: only a few nodes - file, function, loop - currently support it)",
          "children": [
            {
              "type": "String",
              "name": "jpId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Java Class instance with the type of the given key",
          "children": [
            {
              "type": "Object",
              "name": "keyType"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A list of the properties currently supported by this node. Can be used as parameter of the attribute 'getValue'",
          "children": [
            {
              "type": "String[]",
              "name": "keys"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[HACK: .descendants(type) does not work in .lara files, after GraalVM update] Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "laraDescendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the last child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "lastChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that came before this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "leftJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "line"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A string with information about the file and code position of this node, if available",
          "children": [
            {
              "type": "String",
              "name": "location"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, ignoring null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "numChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope that is a parent of the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The pragmas associated with this node",
          "children": [
            {
              "type": "pragma[]",
              "name": "pragmas"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that comes after this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "rightJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the 'program' joinpoint",
          "children": [
            {
              "type": "joinpoint",
              "name": "root"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the nodes of the scope of the current join point. If this node has a body (e.g., loop, function) corresponds to the children of the body. Otherwise, returns an empty array",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "scopeNodes"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that came before this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsLeft"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that come after this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsRight"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Converts this join point to a statement, or returns undefined if it was not possible",
          "children": [
            {
              "type": "statement",
              "name": "stmt"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "type",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrives values that have been associated to nodes of the AST with 'setUserField'",
          "children": [
            {
              "type": "Object",
              "name": "userField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a String with the type of the join point",
          "children": [
            {
              "type": "String",
              "name": "joinPointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the current join point is an instance of the given type",
          "children": [
            {
              "type": "Boolean",
              "name": "instanceOf"
            },
            {
              "type": "String",
              "name": "name"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Returns a copy of this type with the qualifier const",
          "children": [
            {
              "type": "type",
              "name": "asConst"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the desugared type of this type",
          "children": [
            {
              "type": "void",
              "name": "setDesugar"
            },
            {
              "type": "type",
              "name": "desugaredType",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the template argument types of a template type",
          "children": [
            {
              "type": "void",
              "name": "setTemplateArgsTypes"
            },
            {
              "type": "type[]",
              "name": "templateArgTypes",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets a single template argument type of a template type",
          "children": [
            {
              "type": "void",
              "name": "setTemplateArgsTypes"
            },
            {
              "type": "Integer",
              "name": "index",
              "defaultValue": ""
            },
            {
              "type": "type",
              "name": "templateArgType",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Changes a single occurence of a type field that has the current value with new value. Returns true if there was a change",
          "children": [
            {
              "type": "boolean",
              "name": "setTypeFieldByValueRecursive"
            },
            {
              "type": "Object",
              "name": "currentValue",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "newValue",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces an underlying type of this instance with new type, if it matches the old type. Returns true if there were changes",
          "children": [
            {
              "type": "type",
              "name": "setUnderlyingType"
            },
            {
              "type": "type",
              "name": "oldValue",
              "defaultValue": ""
            },
            {
              "type": "type",
              "name": "newValue",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "insert"
            },
            {
              "type": "[before| after| replace]",
              "name": "position",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "def"
            },
            {
              "type": "String",
              "name": "attribute",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, but not of the nodes in its fields",
          "children": [
            {
              "type": "joinpoint",
              "name": "copy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Copies all enumerable own properties from the source object to the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataAssign"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Clears all properties from the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataClear"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, including the nodes in their fields (only the first level of field nodes, this function is not recursive)",
          "children": [
            {
              "type": "joinpoint",
              "name": "deepCopy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the node associated to this joinpoint from the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "detach"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point after this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point before this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Adds a message that will be printed to the user after weaving finishes. Identical messages are removed",
          "children": [
            {
              "type": "void",
              "name": "messageToUser"
            },
            {
              "type": "String",
              "name": "message",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the children of this node",
          "children": [
            {
              "type": "void",
              "name": "removeChildren"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this node with the given node",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of join points",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of strings",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWithStrings"
            },
            {
              "type": "String[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Setting data directly is not supported, this action just emits a warning and does nothing",
          "children": [
            {
              "type": "void",
              "name": "setData"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the first child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setFirstChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String[]",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the last child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setLastChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the type of a node, if it has a type",
          "children": [
            {
              "type": "void",
              "name": "setType"
            },
            {
              "type": "type",
              "name": "type",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Associates arbitrary values to nodes of the AST",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "String",
              "name": "fieldName",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a map",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "Map",
              "name": "fieldNameAndValue",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the value associated with the given property key",
          "children": [
            {
              "type": "joinpoint",
              "name": "setValue"
            },
            {
              "type": "String",
              "name": "key",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "suffix",
              "defaultValue": ""
            }
          ]
        }
      ]
    },
    {
      "type": "joinpoint",
      "name": "unaryExprOrType",
      "extends": "expression",
      "children": [
        {
          "type": "attribute",
          "children": [
            {
              "type": "expression",
              "name": "argExpr"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "type",
              "name": "argType"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "hasArgExpr"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "hasTypeExpr"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String",
              "name": "kind"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a 'decl' join point that represents the declaration associated with this expression, or undefined if there is none",
          "children": [
            {
              "type": "decl",
              "name": "decl"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "returns a cast joinpoint if this expression has an associated implicit cast, undefined otherwise",
          "children": [
            {
              "type": "cast",
              "name": "implicitCast"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the expression is part of an argument of a function call",
          "children": [
            {
              "type": "Boolean",
              "name": "isFunctionArgument"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "[read| write| readwrite]",
              "name": "use"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "vardecl",
              "name": "vardecl"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "attributes"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "selects"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "actions"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "ancestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with a dump of the AST representation starting from this node. This representation corresponds to the internal Java representation of the ClavaAst, where the node names correspond to Java classes. To get an equivalent representation with join point names, use the attribute 'dump'",
          "children": [
            {
              "type": "String",
              "name": "ast"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor AST name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "astAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, considering null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "astChild"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, considering null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "astChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String that uniquely identifies this node",
          "children": [
            {
              "type": "String",
              "name": "astId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if this node is a Java instance of the given name, which corresponds to a simple Java class name of an AST node. For an equivalent function for join point names, use 'instanceOf(joinPointName)'",
          "children": [
            {
              "type": "boolean",
              "name": "astIsInstance"
            },
            {
              "type": "String",
              "name": "className"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the Java class of this node, which is similar to the equivalent node in Clang AST",
          "children": [
            {
              "type": "String",
              "name": "astName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, considering null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "astNumChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "astParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The bit width of the type returned by this join point, in relation to the definitions of its Translation Unit, or undefined if there is no type or bitwidth defined, or if the join point is not in a TranslationUnit",
          "children": [
            {
              "type": "Integer",
              "name": "bitWidth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String list of the names of the join points that form a path from the root to this node",
          "children": [
            {
              "type": "String[]",
              "name": "chain"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the joinpoint chain",
          "children": [
            {
              "type": "joinpoint",
              "name": "chainAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "child"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "children"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the code represented by this node",
          "children": [
            {
              "type": "String",
              "name": "code"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "column"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the given node is a descendant of this node",
          "children": [
            {
              "type": "Boolean",
              "name": "contains"
            },
            {
              "type": "joinpoint",
              "name": "jp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "currentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "JS object associated with this node, containing parsed data of #pragma clava data when the node can be a target of pragmas. This is a special object, managed internally, and cannot be reassigned, to change its contents requires using key-value pairs. If the node can be the target of a pragma, the information stored in this object is persisted between rebuilds.",
          "children": [
            {
              "type": "Object",
              "name": "data"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the depth of this join point in the AST. If it is the root join point returns 0, if it is a child of the root node returns 1, etc.",
          "children": [
            {
              "type": "Integer",
              "name": "depth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves all descendants of the join point",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type, including the node itself",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendantsAndSelf"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endColumn"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endLine"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the file where the code of this node is located, if available",
          "children": [
            {
              "type": "String",
              "name": "filename"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the complete path to the file where the code of this node comes from",
          "children": [
            {
              "type": "String",
              "name": "filepath"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the first child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks in the descendants for the first node of the given type",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstJp"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use 'userField' instead]",
          "children": [
            {
              "type": "Object",
              "name": "getUserField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The value associated with the given property key",
          "children": [
            {
              "type": "Object",
              "name": "getValue"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use hasParent instead]",
          "children": [
            {
              "type": "boolean",
              "name": "hasAstParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the node has children, false otherwise",
          "children": [
            {
              "type": "Boolean",
              "name": "hasChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the given join point or AST node is the same (== test) as the current join point AST node",
          "children": [
            {
              "type": "Boolean",
              "name": "hasNode"
            },
            {
              "type": "Object",
              "name": "nodeOrJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this node has a parent",
          "children": [
            {
              "type": "boolean",
              "name": "hasParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point has a type",
          "children": [
            {
              "type": "Boolean",
              "name": "hasType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns comments that are not explicitly in the AST, but embedded in other nodes",
          "children": [
            {
              "type": "comment[]",
              "name": "inlineComments"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this is a Cilk node (i.e., cilk_spawn, cilk_sync or cilk_for)",
          "children": [
            {
              "type": "Boolean",
              "name": "isCilk"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is part of a system header file",
          "children": [
            {
              "type": "Boolean",
              "name": "isInSystemHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a header (e.g., if condition, for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a loop header (e.g., for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideLoopHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if any descendant or the node itself was defined as a macro",
          "children": [
            {
              "type": "Boolean",
              "name": "isMacro"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the full Java class name of the type of the Java field with the provided name",
          "children": [
            {
              "type": "String",
              "name": "javaFieldType"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'keys' instead, together with 'getValue'] The names of the Java fields of this node. Can be used as key of the attribute 'javaValue'",
          "children": [
            {
              "type": "String[]",
              "name": "javaFields"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'getValue' instead, with the names returned by the attribute 'keys'] Returns the value associated with the provided Java field name",
          "children": [
            {
              "type": "Object",
              "name": "javaValue"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use joinPointType instead (uppercase P)]",
          "children": [
            {
              "type": "String",
              "name": "joinpointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Id that is based on the position of the node in the code, and should remain stable between compilations (warning: only a few nodes - file, function, loop - currently support it)",
          "children": [
            {
              "type": "String",
              "name": "jpId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Java Class instance with the type of the given key",
          "children": [
            {
              "type": "Object",
              "name": "keyType"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A list of the properties currently supported by this node. Can be used as parameter of the attribute 'getValue'",
          "children": [
            {
              "type": "String[]",
              "name": "keys"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[HACK: .descendants(type) does not work in .lara files, after GraalVM update] Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "laraDescendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the last child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "lastChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that came before this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "leftJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "line"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A string with information about the file and code position of this node, if available",
          "children": [
            {
              "type": "String",
              "name": "location"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, ignoring null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "numChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope that is a parent of the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The pragmas associated with this node",
          "children": [
            {
              "type": "pragma[]",
              "name": "pragmas"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that comes after this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "rightJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the 'program' joinpoint",
          "children": [
            {
              "type": "joinpoint",
              "name": "root"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the nodes of the scope of the current join point. If this node has a body (e.g., loop, function) corresponds to the children of the body. Otherwise, returns an empty array",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "scopeNodes"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that came before this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsLeft"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that come after this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsRight"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Converts this join point to a statement, or returns undefined if it was not possible",
          "children": [
            {
              "type": "statement",
              "name": "stmt"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "type",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrives values that have been associated to nodes of the AST with 'setUserField'",
          "children": [
            {
              "type": "Object",
              "name": "userField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a String with the type of the join point",
          "children": [
            {
              "type": "String",
              "name": "joinPointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the current join point is an instance of the given type",
          "children": [
            {
              "type": "Boolean",
              "name": "instanceOf"
            },
            {
              "type": "String",
              "name": "name"
            }
          ]
        },
        {
          "type": "select",
          "clazz": "vardecl",
          "alias": ""
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "setArgType"
            },
            {
              "type": "type",
              "name": "argType",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "insert"
            },
            {
              "type": "[before| after| replace]",
              "name": "position",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "def"
            },
            {
              "type": "String",
              "name": "attribute",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, but not of the nodes in its fields",
          "children": [
            {
              "type": "joinpoint",
              "name": "copy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Copies all enumerable own properties from the source object to the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataAssign"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Clears all properties from the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataClear"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, including the nodes in their fields (only the first level of field nodes, this function is not recursive)",
          "children": [
            {
              "type": "joinpoint",
              "name": "deepCopy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the node associated to this joinpoint from the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "detach"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point after this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point before this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Adds a message that will be printed to the user after weaving finishes. Identical messages are removed",
          "children": [
            {
              "type": "void",
              "name": "messageToUser"
            },
            {
              "type": "String",
              "name": "message",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the children of this node",
          "children": [
            {
              "type": "void",
              "name": "removeChildren"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this node with the given node",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of join points",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of strings",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWithStrings"
            },
            {
              "type": "String[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Setting data directly is not supported, this action just emits a warning and does nothing",
          "children": [
            {
              "type": "void",
              "name": "setData"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the first child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setFirstChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String[]",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the last child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setLastChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the type of a node, if it has a type",
          "children": [
            {
              "type": "void",
              "name": "setType"
            },
            {
              "type": "type",
              "name": "type",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Associates arbitrary values to nodes of the AST",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "String",
              "name": "fieldName",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a map",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "Map",
              "name": "fieldNameAndValue",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the value associated with the given property key",
          "children": [
            {
              "type": "joinpoint",
              "name": "setValue"
            },
            {
              "type": "String",
              "name": "key",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "suffix",
              "defaultValue": ""
            }
          ]
        }
      ]
    },
    {
      "type": "joinpoint",
      "name": "unaryOp",
      "extends": "op",
      "children": [
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isPointerDeref"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "expression",
              "name": "operand"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isBitwise"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The kind of the operator. If it is a binary operator, can be one of: ptr_mem_d, ptr_mem_i, mul, div, rem, add, sub, shl, shr, cmp, lt, gt, le, ge, eq, ne, and, xor, or, l_and, l_or, assign, mul_assign, div_assign, rem_assign, add_assign, sub_assign, shl_assign, shr_assign, and_assign, xor_assign, or_assign, comma. If it is a unary operator, can be one of: post_inc, post_dec, pre_inc, pre_dec, addr_of, deref, plus, minus, not, l_not, real, imag, extension, cowait.",
          "children": [
            {
              "type": "String",
              "name": "kind"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String",
              "name": "operator"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a 'decl' join point that represents the declaration associated with this expression, or undefined if there is none",
          "children": [
            {
              "type": "decl",
              "name": "decl"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "returns a cast joinpoint if this expression has an associated implicit cast, undefined otherwise",
          "children": [
            {
              "type": "cast",
              "name": "implicitCast"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the expression is part of an argument of a function call",
          "children": [
            {
              "type": "Boolean",
              "name": "isFunctionArgument"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "[read| write| readwrite]",
              "name": "use"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "vardecl",
              "name": "vardecl"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "attributes"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "selects"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "actions"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "ancestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with a dump of the AST representation starting from this node. This representation corresponds to the internal Java representation of the ClavaAst, where the node names correspond to Java classes. To get an equivalent representation with join point names, use the attribute 'dump'",
          "children": [
            {
              "type": "String",
              "name": "ast"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor AST name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "astAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, considering null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "astChild"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, considering null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "astChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String that uniquely identifies this node",
          "children": [
            {
              "type": "String",
              "name": "astId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if this node is a Java instance of the given name, which corresponds to a simple Java class name of an AST node. For an equivalent function for join point names, use 'instanceOf(joinPointName)'",
          "children": [
            {
              "type": "boolean",
              "name": "astIsInstance"
            },
            {
              "type": "String",
              "name": "className"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the Java class of this node, which is similar to the equivalent node in Clang AST",
          "children": [
            {
              "type": "String",
              "name": "astName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, considering null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "astNumChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "astParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The bit width of the type returned by this join point, in relation to the definitions of its Translation Unit, or undefined if there is no type or bitwidth defined, or if the join point is not in a TranslationUnit",
          "children": [
            {
              "type": "Integer",
              "name": "bitWidth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String list of the names of the join points that form a path from the root to this node",
          "children": [
            {
              "type": "String[]",
              "name": "chain"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the joinpoint chain",
          "children": [
            {
              "type": "joinpoint",
              "name": "chainAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "child"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "children"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the code represented by this node",
          "children": [
            {
              "type": "String",
              "name": "code"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "column"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the given node is a descendant of this node",
          "children": [
            {
              "type": "Boolean",
              "name": "contains"
            },
            {
              "type": "joinpoint",
              "name": "jp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "currentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "JS object associated with this node, containing parsed data of #pragma clava data when the node can be a target of pragmas. This is a special object, managed internally, and cannot be reassigned, to change its contents requires using key-value pairs. If the node can be the target of a pragma, the information stored in this object is persisted between rebuilds.",
          "children": [
            {
              "type": "Object",
              "name": "data"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the depth of this join point in the AST. If it is the root join point returns 0, if it is a child of the root node returns 1, etc.",
          "children": [
            {
              "type": "Integer",
              "name": "depth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves all descendants of the join point",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type, including the node itself",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendantsAndSelf"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endColumn"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endLine"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the file where the code of this node is located, if available",
          "children": [
            {
              "type": "String",
              "name": "filename"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the complete path to the file where the code of this node comes from",
          "children": [
            {
              "type": "String",
              "name": "filepath"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the first child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks in the descendants for the first node of the given type",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstJp"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use 'userField' instead]",
          "children": [
            {
              "type": "Object",
              "name": "getUserField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The value associated with the given property key",
          "children": [
            {
              "type": "Object",
              "name": "getValue"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use hasParent instead]",
          "children": [
            {
              "type": "boolean",
              "name": "hasAstParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the node has children, false otherwise",
          "children": [
            {
              "type": "Boolean",
              "name": "hasChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the given join point or AST node is the same (== test) as the current join point AST node",
          "children": [
            {
              "type": "Boolean",
              "name": "hasNode"
            },
            {
              "type": "Object",
              "name": "nodeOrJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this node has a parent",
          "children": [
            {
              "type": "boolean",
              "name": "hasParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point has a type",
          "children": [
            {
              "type": "Boolean",
              "name": "hasType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns comments that are not explicitly in the AST, but embedded in other nodes",
          "children": [
            {
              "type": "comment[]",
              "name": "inlineComments"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this is a Cilk node (i.e., cilk_spawn, cilk_sync or cilk_for)",
          "children": [
            {
              "type": "Boolean",
              "name": "isCilk"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is part of a system header file",
          "children": [
            {
              "type": "Boolean",
              "name": "isInSystemHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a header (e.g., if condition, for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a loop header (e.g., for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideLoopHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if any descendant or the node itself was defined as a macro",
          "children": [
            {
              "type": "Boolean",
              "name": "isMacro"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the full Java class name of the type of the Java field with the provided name",
          "children": [
            {
              "type": "String",
              "name": "javaFieldType"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'keys' instead, together with 'getValue'] The names of the Java fields of this node. Can be used as key of the attribute 'javaValue'",
          "children": [
            {
              "type": "String[]",
              "name": "javaFields"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'getValue' instead, with the names returned by the attribute 'keys'] Returns the value associated with the provided Java field name",
          "children": [
            {
              "type": "Object",
              "name": "javaValue"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use joinPointType instead (uppercase P)]",
          "children": [
            {
              "type": "String",
              "name": "joinpointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Id that is based on the position of the node in the code, and should remain stable between compilations (warning: only a few nodes - file, function, loop - currently support it)",
          "children": [
            {
              "type": "String",
              "name": "jpId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Java Class instance with the type of the given key",
          "children": [
            {
              "type": "Object",
              "name": "keyType"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A list of the properties currently supported by this node. Can be used as parameter of the attribute 'getValue'",
          "children": [
            {
              "type": "String[]",
              "name": "keys"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[HACK: .descendants(type) does not work in .lara files, after GraalVM update] Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "laraDescendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the last child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "lastChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that came before this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "leftJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "line"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A string with information about the file and code position of this node, if available",
          "children": [
            {
              "type": "String",
              "name": "location"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, ignoring null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "numChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope that is a parent of the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The pragmas associated with this node",
          "children": [
            {
              "type": "pragma[]",
              "name": "pragmas"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that comes after this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "rightJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the 'program' joinpoint",
          "children": [
            {
              "type": "joinpoint",
              "name": "root"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the nodes of the scope of the current join point. If this node has a body (e.g., loop, function) corresponds to the children of the body. Otherwise, returns an empty array",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "scopeNodes"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that came before this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsLeft"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that come after this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsRight"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Converts this join point to a statement, or returns undefined if it was not possible",
          "children": [
            {
              "type": "statement",
              "name": "stmt"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "type",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrives values that have been associated to nodes of the AST with 'setUserField'",
          "children": [
            {
              "type": "Object",
              "name": "userField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a String with the type of the join point",
          "children": [
            {
              "type": "String",
              "name": "joinPointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the current join point is an instance of the given type",
          "children": [
            {
              "type": "Boolean",
              "name": "instanceOf"
            },
            {
              "type": "String",
              "name": "name"
            }
          ]
        },
        {
          "type": "select",
          "clazz": "expression",
          "alias": "operand"
        },
        {
          "type": "select",
          "clazz": "vardecl",
          "alias": ""
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "insert"
            },
            {
              "type": "[before| after| replace]",
              "name": "position",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "def"
            },
            {
              "type": "String",
              "name": "attribute",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, but not of the nodes in its fields",
          "children": [
            {
              "type": "joinpoint",
              "name": "copy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Copies all enumerable own properties from the source object to the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataAssign"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Clears all properties from the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataClear"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, including the nodes in their fields (only the first level of field nodes, this function is not recursive)",
          "children": [
            {
              "type": "joinpoint",
              "name": "deepCopy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the node associated to this joinpoint from the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "detach"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point after this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point before this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Adds a message that will be printed to the user after weaving finishes. Identical messages are removed",
          "children": [
            {
              "type": "void",
              "name": "messageToUser"
            },
            {
              "type": "String",
              "name": "message",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the children of this node",
          "children": [
            {
              "type": "void",
              "name": "removeChildren"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this node with the given node",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of join points",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of strings",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWithStrings"
            },
            {
              "type": "String[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Setting data directly is not supported, this action just emits a warning and does nothing",
          "children": [
            {
              "type": "void",
              "name": "setData"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the first child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setFirstChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String[]",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the last child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setLastChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the type of a node, if it has a type",
          "children": [
            {
              "type": "void",
              "name": "setType"
            },
            {
              "type": "type",
              "name": "type",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Associates arbitrary values to nodes of the AST",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "String",
              "name": "fieldName",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a map",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "Map",
              "name": "fieldNameAndValue",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the value associated with the given property key",
          "children": [
            {
              "type": "joinpoint",
              "name": "setValue"
            },
            {
              "type": "String",
              "name": "key",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "suffix",
              "defaultValue": ""
            }
          ]
        }
      ]
    },
    {
      "type": "joinpoint",
      "name": "undefinedType",
      "extends": "type",
      "children": [
        {
          "type": "attribute",
          "children": [
            {
              "type": "Integer[]",
              "name": "arrayDims"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Integer",
              "name": "arraySize"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The bit width of this type in the Translation Unit of the given join point, or undefined if there is no bitwidth defined",
          "children": [
            {
              "type": "Integer",
              "name": "bitWidth"
            },
            {
              "type": "joinpoint",
              "name": "reference"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "constant"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Single-step desugar. Returns the type itself if it does not have sugar",
          "children": [
            {
              "type": "type",
              "name": "desugar"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Completely desugars the type",
          "children": [
            {
              "type": "type",
              "name": "desugarAll"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A tree representation of the fields of this type",
          "children": [
            {
              "type": "String",
              "name": "fieldTree"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "hasSugar"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "hasTemplateArgs"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isArray"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "True if this is a type declared with the 'auto' keyword",
          "children": [
            {
              "type": "Boolean",
              "name": "isAuto"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isBuiltin"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isPointer"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isTopLevel"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String",
              "name": "kind"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Ignores certain types (e.g., DecayedType)",
          "children": [
            {
              "type": "type",
              "name": "normalize"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "templateArgsStrings"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "type[]",
              "name": "templateArgsTypes"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Maps names of join point fields that represent type join points, to their respective values",
          "children": [
            {
              "type": "Map",
              "name": "typeFields"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "If the type encapsulates another type, returns the encapsulated type",
          "children": [
            {
              "type": "type",
              "name": "unwrap"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "attributes"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "selects"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "actions"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "ancestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with a dump of the AST representation starting from this node. This representation corresponds to the internal Java representation of the ClavaAst, where the node names correspond to Java classes. To get an equivalent representation with join point names, use the attribute 'dump'",
          "children": [
            {
              "type": "String",
              "name": "ast"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor AST name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "astAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, considering null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "astChild"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, considering null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "astChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String that uniquely identifies this node",
          "children": [
            {
              "type": "String",
              "name": "astId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if this node is a Java instance of the given name, which corresponds to a simple Java class name of an AST node. For an equivalent function for join point names, use 'instanceOf(joinPointName)'",
          "children": [
            {
              "type": "boolean",
              "name": "astIsInstance"
            },
            {
              "type": "String",
              "name": "className"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the Java class of this node, which is similar to the equivalent node in Clang AST",
          "children": [
            {
              "type": "String",
              "name": "astName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, considering null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "astNumChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "astParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The bit width of the type returned by this join point, in relation to the definitions of its Translation Unit, or undefined if there is no type or bitwidth defined, or if the join point is not in a TranslationUnit",
          "children": [
            {
              "type": "Integer",
              "name": "bitWidth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String list of the names of the join points that form a path from the root to this node",
          "children": [
            {
              "type": "String[]",
              "name": "chain"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the joinpoint chain",
          "children": [
            {
              "type": "joinpoint",
              "name": "chainAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "child"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "children"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the code represented by this node",
          "children": [
            {
              "type": "String",
              "name": "code"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "column"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the given node is a descendant of this node",
          "children": [
            {
              "type": "Boolean",
              "name": "contains"
            },
            {
              "type": "joinpoint",
              "name": "jp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "currentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "JS object associated with this node, containing parsed data of #pragma clava data when the node can be a target of pragmas. This is a special object, managed internally, and cannot be reassigned, to change its contents requires using key-value pairs. If the node can be the target of a pragma, the information stored in this object is persisted between rebuilds.",
          "children": [
            {
              "type": "Object",
              "name": "data"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the depth of this join point in the AST. If it is the root join point returns 0, if it is a child of the root node returns 1, etc.",
          "children": [
            {
              "type": "Integer",
              "name": "depth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves all descendants of the join point",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type, including the node itself",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendantsAndSelf"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endColumn"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endLine"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the file where the code of this node is located, if available",
          "children": [
            {
              "type": "String",
              "name": "filename"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the complete path to the file where the code of this node comes from",
          "children": [
            {
              "type": "String",
              "name": "filepath"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the first child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks in the descendants for the first node of the given type",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstJp"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use 'userField' instead]",
          "children": [
            {
              "type": "Object",
              "name": "getUserField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The value associated with the given property key",
          "children": [
            {
              "type": "Object",
              "name": "getValue"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use hasParent instead]",
          "children": [
            {
              "type": "boolean",
              "name": "hasAstParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the node has children, false otherwise",
          "children": [
            {
              "type": "Boolean",
              "name": "hasChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the given join point or AST node is the same (== test) as the current join point AST node",
          "children": [
            {
              "type": "Boolean",
              "name": "hasNode"
            },
            {
              "type": "Object",
              "name": "nodeOrJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this node has a parent",
          "children": [
            {
              "type": "boolean",
              "name": "hasParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point has a type",
          "children": [
            {
              "type": "Boolean",
              "name": "hasType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns comments that are not explicitly in the AST, but embedded in other nodes",
          "children": [
            {
              "type": "comment[]",
              "name": "inlineComments"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this is a Cilk node (i.e., cilk_spawn, cilk_sync or cilk_for)",
          "children": [
            {
              "type": "Boolean",
              "name": "isCilk"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is part of a system header file",
          "children": [
            {
              "type": "Boolean",
              "name": "isInSystemHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a header (e.g., if condition, for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a loop header (e.g., for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideLoopHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if any descendant or the node itself was defined as a macro",
          "children": [
            {
              "type": "Boolean",
              "name": "isMacro"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the full Java class name of the type of the Java field with the provided name",
          "children": [
            {
              "type": "String",
              "name": "javaFieldType"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'keys' instead, together with 'getValue'] The names of the Java fields of this node. Can be used as key of the attribute 'javaValue'",
          "children": [
            {
              "type": "String[]",
              "name": "javaFields"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'getValue' instead, with the names returned by the attribute 'keys'] Returns the value associated with the provided Java field name",
          "children": [
            {
              "type": "Object",
              "name": "javaValue"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use joinPointType instead (uppercase P)]",
          "children": [
            {
              "type": "String",
              "name": "joinpointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Id that is based on the position of the node in the code, and should remain stable between compilations (warning: only a few nodes - file, function, loop - currently support it)",
          "children": [
            {
              "type": "String",
              "name": "jpId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Java Class instance with the type of the given key",
          "children": [
            {
              "type": "Object",
              "name": "keyType"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A list of the properties currently supported by this node. Can be used as parameter of the attribute 'getValue'",
          "children": [
            {
              "type": "String[]",
              "name": "keys"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[HACK: .descendants(type) does not work in .lara files, after GraalVM update] Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "laraDescendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the last child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "lastChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that came before this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "leftJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "line"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A string with information about the file and code position of this node, if available",
          "children": [
            {
              "type": "String",
              "name": "location"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, ignoring null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "numChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope that is a parent of the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The pragmas associated with this node",
          "children": [
            {
              "type": "pragma[]",
              "name": "pragmas"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that comes after this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "rightJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the 'program' joinpoint",
          "children": [
            {
              "type": "joinpoint",
              "name": "root"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the nodes of the scope of the current join point. If this node has a body (e.g., loop, function) corresponds to the children of the body. Otherwise, returns an empty array",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "scopeNodes"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that came before this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsLeft"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that come after this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsRight"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Converts this join point to a statement, or returns undefined if it was not possible",
          "children": [
            {
              "type": "statement",
              "name": "stmt"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "type",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrives values that have been associated to nodes of the AST with 'setUserField'",
          "children": [
            {
              "type": "Object",
              "name": "userField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a String with the type of the join point",
          "children": [
            {
              "type": "String",
              "name": "joinPointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the current join point is an instance of the given type",
          "children": [
            {
              "type": "Boolean",
              "name": "instanceOf"
            },
            {
              "type": "String",
              "name": "name"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Returns a copy of this type with the qualifier const",
          "children": [
            {
              "type": "type",
              "name": "asConst"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the desugared type of this type",
          "children": [
            {
              "type": "void",
              "name": "setDesugar"
            },
            {
              "type": "type",
              "name": "desugaredType",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the template argument types of a template type",
          "children": [
            {
              "type": "void",
              "name": "setTemplateArgsTypes"
            },
            {
              "type": "type[]",
              "name": "templateArgTypes",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets a single template argument type of a template type",
          "children": [
            {
              "type": "void",
              "name": "setTemplateArgsTypes"
            },
            {
              "type": "Integer",
              "name": "index",
              "defaultValue": ""
            },
            {
              "type": "type",
              "name": "templateArgType",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Changes a single occurence of a type field that has the current value with new value. Returns true if there was a change",
          "children": [
            {
              "type": "boolean",
              "name": "setTypeFieldByValueRecursive"
            },
            {
              "type": "Object",
              "name": "currentValue",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "newValue",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces an underlying type of this instance with new type, if it matches the old type. Returns true if there were changes",
          "children": [
            {
              "type": "type",
              "name": "setUnderlyingType"
            },
            {
              "type": "type",
              "name": "oldValue",
              "defaultValue": ""
            },
            {
              "type": "type",
              "name": "newValue",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "insert"
            },
            {
              "type": "[before| after| replace]",
              "name": "position",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "def"
            },
            {
              "type": "String",
              "name": "attribute",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, but not of the nodes in its fields",
          "children": [
            {
              "type": "joinpoint",
              "name": "copy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Copies all enumerable own properties from the source object to the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataAssign"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Clears all properties from the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataClear"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, including the nodes in their fields (only the first level of field nodes, this function is not recursive)",
          "children": [
            {
              "type": "joinpoint",
              "name": "deepCopy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the node associated to this joinpoint from the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "detach"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point after this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point before this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Adds a message that will be printed to the user after weaving finishes. Identical messages are removed",
          "children": [
            {
              "type": "void",
              "name": "messageToUser"
            },
            {
              "type": "String",
              "name": "message",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the children of this node",
          "children": [
            {
              "type": "void",
              "name": "removeChildren"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this node with the given node",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of join points",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of strings",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWithStrings"
            },
            {
              "type": "String[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Setting data directly is not supported, this action just emits a warning and does nothing",
          "children": [
            {
              "type": "void",
              "name": "setData"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the first child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setFirstChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String[]",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the last child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setLastChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the type of a node, if it has a type",
          "children": [
            {
              "type": "void",
              "name": "setType"
            },
            {
              "type": "type",
              "name": "type",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Associates arbitrary values to nodes of the AST",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "String",
              "name": "fieldName",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a map",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "Map",
              "name": "fieldNameAndValue",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the value associated with the given property key",
          "children": [
            {
              "type": "joinpoint",
              "name": "setValue"
            },
            {
              "type": "String",
              "name": "key",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "suffix",
              "defaultValue": ""
            }
          ]
        }
      ]
    },
    {
      "type": "joinpoint",
      "name": "vardecl",
      "defaultAttr": "name",
      "extends": "declarator",
      "tooltip": "Represents a variable declaration or definition",
      "children": [
        {
          "type": "attribute",
          "tooltip": "The vardecl corresponding to the actual definition. For global variables, returns the vardecl of the file where it is actually defined (instead of the vardecl that defines an external link to the variable)",
          "children": [
            {
              "type": "vardecl",
              "name": "definition"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if vardecl has an initialization value",
          "children": [
            {
              "type": "Boolean",
              "name": "hasInit"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "If vardecl has an initialization value, returns an expression with that value",
          "children": [
            {
              "type": "expression",
              "name": "init"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The initialization style of this vardecl, which can be no_init, cinit, callinit, listinit",
          "children": [
            {
              "type": "String",
              "name": "initStyle"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if this variable does not have local storage. This includes all global variables as well as static variables declared within a function.",
          "children": [
            {
              "type": "Boolean",
              "name": "isGlobal"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if vardecl is a function parameter",
          "children": [
            {
              "type": "Boolean",
              "name": "isParam"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Storage class specifier, which can be none, extern, static, __private_extern__, auto, register",
          "children": [
            {
              "type": "String",
              "name": "storageClass"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isPublic"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String",
              "name": "name"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String",
              "name": "qualifiedName"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String",
              "name": "qualifiedPrefix"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The attributes (e.g. Pure, CUDAGlobal) associated to this decl",
          "children": [
            {
              "type": "attribute[]",
              "name": "attrs"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "attributes"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "selects"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "actions"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "ancestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with a dump of the AST representation starting from this node. This representation corresponds to the internal Java representation of the ClavaAst, where the node names correspond to Java classes. To get an equivalent representation with join point names, use the attribute 'dump'",
          "children": [
            {
              "type": "String",
              "name": "ast"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor AST name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "astAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, considering null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "astChild"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, considering null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "astChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String that uniquely identifies this node",
          "children": [
            {
              "type": "String",
              "name": "astId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if this node is a Java instance of the given name, which corresponds to a simple Java class name of an AST node. For an equivalent function for join point names, use 'instanceOf(joinPointName)'",
          "children": [
            {
              "type": "boolean",
              "name": "astIsInstance"
            },
            {
              "type": "String",
              "name": "className"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the Java class of this node, which is similar to the equivalent node in Clang AST",
          "children": [
            {
              "type": "String",
              "name": "astName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, considering null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "astNumChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "astParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The bit width of the type returned by this join point, in relation to the definitions of its Translation Unit, or undefined if there is no type or bitwidth defined, or if the join point is not in a TranslationUnit",
          "children": [
            {
              "type": "Integer",
              "name": "bitWidth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String list of the names of the join points that form a path from the root to this node",
          "children": [
            {
              "type": "String[]",
              "name": "chain"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the joinpoint chain",
          "children": [
            {
              "type": "joinpoint",
              "name": "chainAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "child"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "children"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the code represented by this node",
          "children": [
            {
              "type": "String",
              "name": "code"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "column"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the given node is a descendant of this node",
          "children": [
            {
              "type": "Boolean",
              "name": "contains"
            },
            {
              "type": "joinpoint",
              "name": "jp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "currentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "JS object associated with this node, containing parsed data of #pragma clava data when the node can be a target of pragmas. This is a special object, managed internally, and cannot be reassigned, to change its contents requires using key-value pairs. If the node can be the target of a pragma, the information stored in this object is persisted between rebuilds.",
          "children": [
            {
              "type": "Object",
              "name": "data"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the depth of this join point in the AST. If it is the root join point returns 0, if it is a child of the root node returns 1, etc.",
          "children": [
            {
              "type": "Integer",
              "name": "depth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves all descendants of the join point",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type, including the node itself",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendantsAndSelf"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endColumn"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endLine"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the file where the code of this node is located, if available",
          "children": [
            {
              "type": "String",
              "name": "filename"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the complete path to the file where the code of this node comes from",
          "children": [
            {
              "type": "String",
              "name": "filepath"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the first child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks in the descendants for the first node of the given type",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstJp"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use 'userField' instead]",
          "children": [
            {
              "type": "Object",
              "name": "getUserField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The value associated with the given property key",
          "children": [
            {
              "type": "Object",
              "name": "getValue"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use hasParent instead]",
          "children": [
            {
              "type": "boolean",
              "name": "hasAstParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the node has children, false otherwise",
          "children": [
            {
              "type": "Boolean",
              "name": "hasChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the given join point or AST node is the same (== test) as the current join point AST node",
          "children": [
            {
              "type": "Boolean",
              "name": "hasNode"
            },
            {
              "type": "Object",
              "name": "nodeOrJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this node has a parent",
          "children": [
            {
              "type": "boolean",
              "name": "hasParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point has a type",
          "children": [
            {
              "type": "Boolean",
              "name": "hasType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns comments that are not explicitly in the AST, but embedded in other nodes",
          "children": [
            {
              "type": "comment[]",
              "name": "inlineComments"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this is a Cilk node (i.e., cilk_spawn, cilk_sync or cilk_for)",
          "children": [
            {
              "type": "Boolean",
              "name": "isCilk"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is part of a system header file",
          "children": [
            {
              "type": "Boolean",
              "name": "isInSystemHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a header (e.g., if condition, for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a loop header (e.g., for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideLoopHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if any descendant or the node itself was defined as a macro",
          "children": [
            {
              "type": "Boolean",
              "name": "isMacro"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the full Java class name of the type of the Java field with the provided name",
          "children": [
            {
              "type": "String",
              "name": "javaFieldType"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'keys' instead, together with 'getValue'] The names of the Java fields of this node. Can be used as key of the attribute 'javaValue'",
          "children": [
            {
              "type": "String[]",
              "name": "javaFields"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'getValue' instead, with the names returned by the attribute 'keys'] Returns the value associated with the provided Java field name",
          "children": [
            {
              "type": "Object",
              "name": "javaValue"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use joinPointType instead (uppercase P)]",
          "children": [
            {
              "type": "String",
              "name": "joinpointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Id that is based on the position of the node in the code, and should remain stable between compilations (warning: only a few nodes - file, function, loop - currently support it)",
          "children": [
            {
              "type": "String",
              "name": "jpId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Java Class instance with the type of the given key",
          "children": [
            {
              "type": "Object",
              "name": "keyType"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A list of the properties currently supported by this node. Can be used as parameter of the attribute 'getValue'",
          "children": [
            {
              "type": "String[]",
              "name": "keys"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[HACK: .descendants(type) does not work in .lara files, after GraalVM update] Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "laraDescendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the last child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "lastChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that came before this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "leftJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "line"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A string with information about the file and code position of this node, if available",
          "children": [
            {
              "type": "String",
              "name": "location"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, ignoring null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "numChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope that is a parent of the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The pragmas associated with this node",
          "children": [
            {
              "type": "pragma[]",
              "name": "pragmas"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that comes after this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "rightJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the 'program' joinpoint",
          "children": [
            {
              "type": "joinpoint",
              "name": "root"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the nodes of the scope of the current join point. If this node has a body (e.g., loop, function) corresponds to the children of the body. Otherwise, returns an empty array",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "scopeNodes"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that came before this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsLeft"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that come after this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsRight"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Converts this join point to a statement, or returns undefined if it was not possible",
          "children": [
            {
              "type": "statement",
              "name": "stmt"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "type",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrives values that have been associated to nodes of the AST with 'setUserField'",
          "children": [
            {
              "type": "Object",
              "name": "userField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a String with the type of the join point",
          "children": [
            {
              "type": "String",
              "name": "joinPointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the current join point is an instance of the given type",
          "children": [
            {
              "type": "Boolean",
              "name": "instanceOf"
            },
            {
              "type": "String",
              "name": "name"
            }
          ]
        },
        {
          "type": "select",
          "clazz": "expression",
          "alias": "init"
        },
        {
          "type": "action",
          "tooltip": "If vardecl already has an initialization, removes it (also removes const if present). Otherwise does nothing",
          "children": [
            {
              "type": "void",
              "name": "removeInit"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "If vardecl already has an initialization, removes it. Otherwise does nothing",
          "children": [
            {
              "type": "void",
              "name": "removeInit"
            },
            {
              "type": "boolean",
              "name": "removeConst",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the given expression as the initialization of this vardecl. If undefined is passed and vardecl already has an initialization, removes that initialization",
          "children": [
            {
              "type": "void",
              "name": "setInit"
            },
            {
              "type": "expression",
              "name": "init",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Converts the given string to a literal expression and sets it as the initialization of this vardecl. If undefined is passed and vardecl already has an initialization, removes that initialization",
          "children": [
            {
              "type": "void",
              "name": "setInit"
            },
            {
              "type": "String",
              "name": "init",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the storage class specifier, which can be none, extern, static, __private_extern__, autovardecl",
          "children": [
            {
              "type": "void",
              "name": "setStorageClass"
            },
            {
              "type": "String",
              "name": "storageClass",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Creates a new varref based on this vardecl",
          "children": [
            {
              "type": "varref",
              "name": "varref"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the name of this namedDecl",
          "children": [
            {
              "type": "void",
              "name": "setName"
            },
            {
              "type": "String",
              "name": "name",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the qualified name of this namedDecl (changes both the name and qualified prefix)",
          "children": [
            {
              "type": "void",
              "name": "setQualifiedName"
            },
            {
              "type": "String",
              "name": "name",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the qualified prefix of this namedDecl",
          "children": [
            {
              "type": "void",
              "name": "setQualifiedPrefix"
            },
            {
              "type": "String",
              "name": "qualifiedPrefix",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "insert"
            },
            {
              "type": "[before| after| replace]",
              "name": "position",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "def"
            },
            {
              "type": "String",
              "name": "attribute",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, but not of the nodes in its fields",
          "children": [
            {
              "type": "joinpoint",
              "name": "copy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Copies all enumerable own properties from the source object to the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataAssign"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Clears all properties from the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataClear"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, including the nodes in their fields (only the first level of field nodes, this function is not recursive)",
          "children": [
            {
              "type": "joinpoint",
              "name": "deepCopy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the node associated to this joinpoint from the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "detach"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point after this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point before this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Adds a message that will be printed to the user after weaving finishes. Identical messages are removed",
          "children": [
            {
              "type": "void",
              "name": "messageToUser"
            },
            {
              "type": "String",
              "name": "message",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the children of this node",
          "children": [
            {
              "type": "void",
              "name": "removeChildren"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this node with the given node",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of join points",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of strings",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWithStrings"
            },
            {
              "type": "String[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Setting data directly is not supported, this action just emits a warning and does nothing",
          "children": [
            {
              "type": "void",
              "name": "setData"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the first child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setFirstChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String[]",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the last child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setLastChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the type of a node, if it has a type",
          "children": [
            {
              "type": "void",
              "name": "setType"
            },
            {
              "type": "type",
              "name": "type",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Associates arbitrary values to nodes of the AST",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "String",
              "name": "fieldName",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a map",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "Map",
              "name": "fieldNameAndValue",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the value associated with the given property key",
          "children": [
            {
              "type": "joinpoint",
              "name": "setValue"
            },
            {
              "type": "String",
              "name": "key",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "suffix",
              "defaultValue": ""
            }
          ]
        }
      ]
    },
    {
      "type": "joinpoint",
      "name": "variableArrayType",
      "extends": "arrayType",
      "children": [
        {
          "type": "attribute",
          "children": [
            {
              "type": "expression",
              "name": "sizeExpr"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "type",
              "name": "elementType"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Integer[]",
              "name": "arrayDims"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Integer",
              "name": "arraySize"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The bit width of this type in the Translation Unit of the given join point, or undefined if there is no bitwidth defined",
          "children": [
            {
              "type": "Integer",
              "name": "bitWidth"
            },
            {
              "type": "joinpoint",
              "name": "reference"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "constant"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Single-step desugar. Returns the type itself if it does not have sugar",
          "children": [
            {
              "type": "type",
              "name": "desugar"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Completely desugars the type",
          "children": [
            {
              "type": "type",
              "name": "desugarAll"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A tree representation of the fields of this type",
          "children": [
            {
              "type": "String",
              "name": "fieldTree"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "hasSugar"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "hasTemplateArgs"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isArray"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "True if this is a type declared with the 'auto' keyword",
          "children": [
            {
              "type": "Boolean",
              "name": "isAuto"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isBuiltin"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isPointer"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isTopLevel"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String",
              "name": "kind"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Ignores certain types (e.g., DecayedType)",
          "children": [
            {
              "type": "type",
              "name": "normalize"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "templateArgsStrings"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "type[]",
              "name": "templateArgsTypes"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Maps names of join point fields that represent type join points, to their respective values",
          "children": [
            {
              "type": "Map",
              "name": "typeFields"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "If the type encapsulates another type, returns the encapsulated type",
          "children": [
            {
              "type": "type",
              "name": "unwrap"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "attributes"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "selects"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "actions"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "ancestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with a dump of the AST representation starting from this node. This representation corresponds to the internal Java representation of the ClavaAst, where the node names correspond to Java classes. To get an equivalent representation with join point names, use the attribute 'dump'",
          "children": [
            {
              "type": "String",
              "name": "ast"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor AST name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "astAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, considering null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "astChild"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, considering null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "astChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String that uniquely identifies this node",
          "children": [
            {
              "type": "String",
              "name": "astId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if this node is a Java instance of the given name, which corresponds to a simple Java class name of an AST node. For an equivalent function for join point names, use 'instanceOf(joinPointName)'",
          "children": [
            {
              "type": "boolean",
              "name": "astIsInstance"
            },
            {
              "type": "String",
              "name": "className"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the Java class of this node, which is similar to the equivalent node in Clang AST",
          "children": [
            {
              "type": "String",
              "name": "astName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, considering null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "astNumChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "astParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The bit width of the type returned by this join point, in relation to the definitions of its Translation Unit, or undefined if there is no type or bitwidth defined, or if the join point is not in a TranslationUnit",
          "children": [
            {
              "type": "Integer",
              "name": "bitWidth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String list of the names of the join points that form a path from the root to this node",
          "children": [
            {
              "type": "String[]",
              "name": "chain"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the joinpoint chain",
          "children": [
            {
              "type": "joinpoint",
              "name": "chainAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "child"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "children"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the code represented by this node",
          "children": [
            {
              "type": "String",
              "name": "code"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "column"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the given node is a descendant of this node",
          "children": [
            {
              "type": "Boolean",
              "name": "contains"
            },
            {
              "type": "joinpoint",
              "name": "jp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "currentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "JS object associated with this node, containing parsed data of #pragma clava data when the node can be a target of pragmas. This is a special object, managed internally, and cannot be reassigned, to change its contents requires using key-value pairs. If the node can be the target of a pragma, the information stored in this object is persisted between rebuilds.",
          "children": [
            {
              "type": "Object",
              "name": "data"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the depth of this join point in the AST. If it is the root join point returns 0, if it is a child of the root node returns 1, etc.",
          "children": [
            {
              "type": "Integer",
              "name": "depth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves all descendants of the join point",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type, including the node itself",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendantsAndSelf"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endColumn"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endLine"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the file where the code of this node is located, if available",
          "children": [
            {
              "type": "String",
              "name": "filename"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the complete path to the file where the code of this node comes from",
          "children": [
            {
              "type": "String",
              "name": "filepath"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the first child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks in the descendants for the first node of the given type",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstJp"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use 'userField' instead]",
          "children": [
            {
              "type": "Object",
              "name": "getUserField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The value associated with the given property key",
          "children": [
            {
              "type": "Object",
              "name": "getValue"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use hasParent instead]",
          "children": [
            {
              "type": "boolean",
              "name": "hasAstParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the node has children, false otherwise",
          "children": [
            {
              "type": "Boolean",
              "name": "hasChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the given join point or AST node is the same (== test) as the current join point AST node",
          "children": [
            {
              "type": "Boolean",
              "name": "hasNode"
            },
            {
              "type": "Object",
              "name": "nodeOrJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this node has a parent",
          "children": [
            {
              "type": "boolean",
              "name": "hasParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point has a type",
          "children": [
            {
              "type": "Boolean",
              "name": "hasType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns comments that are not explicitly in the AST, but embedded in other nodes",
          "children": [
            {
              "type": "comment[]",
              "name": "inlineComments"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this is a Cilk node (i.e., cilk_spawn, cilk_sync or cilk_for)",
          "children": [
            {
              "type": "Boolean",
              "name": "isCilk"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is part of a system header file",
          "children": [
            {
              "type": "Boolean",
              "name": "isInSystemHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a header (e.g., if condition, for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a loop header (e.g., for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideLoopHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if any descendant or the node itself was defined as a macro",
          "children": [
            {
              "type": "Boolean",
              "name": "isMacro"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the full Java class name of the type of the Java field with the provided name",
          "children": [
            {
              "type": "String",
              "name": "javaFieldType"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'keys' instead, together with 'getValue'] The names of the Java fields of this node. Can be used as key of the attribute 'javaValue'",
          "children": [
            {
              "type": "String[]",
              "name": "javaFields"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'getValue' instead, with the names returned by the attribute 'keys'] Returns the value associated with the provided Java field name",
          "children": [
            {
              "type": "Object",
              "name": "javaValue"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use joinPointType instead (uppercase P)]",
          "children": [
            {
              "type": "String",
              "name": "joinpointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Id that is based on the position of the node in the code, and should remain stable between compilations (warning: only a few nodes - file, function, loop - currently support it)",
          "children": [
            {
              "type": "String",
              "name": "jpId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Java Class instance with the type of the given key",
          "children": [
            {
              "type": "Object",
              "name": "keyType"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A list of the properties currently supported by this node. Can be used as parameter of the attribute 'getValue'",
          "children": [
            {
              "type": "String[]",
              "name": "keys"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[HACK: .descendants(type) does not work in .lara files, after GraalVM update] Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "laraDescendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the last child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "lastChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that came before this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "leftJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "line"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A string with information about the file and code position of this node, if available",
          "children": [
            {
              "type": "String",
              "name": "location"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, ignoring null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "numChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope that is a parent of the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The pragmas associated with this node",
          "children": [
            {
              "type": "pragma[]",
              "name": "pragmas"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that comes after this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "rightJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the 'program' joinpoint",
          "children": [
            {
              "type": "joinpoint",
              "name": "root"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the nodes of the scope of the current join point. If this node has a body (e.g., loop, function) corresponds to the children of the body. Otherwise, returns an empty array",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "scopeNodes"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that came before this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsLeft"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that come after this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsRight"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Converts this join point to a statement, or returns undefined if it was not possible",
          "children": [
            {
              "type": "statement",
              "name": "stmt"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "type",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrives values that have been associated to nodes of the AST with 'setUserField'",
          "children": [
            {
              "type": "Object",
              "name": "userField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a String with the type of the join point",
          "children": [
            {
              "type": "String",
              "name": "joinPointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the current join point is an instance of the given type",
          "children": [
            {
              "type": "Boolean",
              "name": "instanceOf"
            },
            {
              "type": "String",
              "name": "name"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the size expression of this variable array type",
          "children": [
            {
              "type": "void",
              "name": "setSizeExpr"
            },
            {
              "type": "expression",
              "name": "sizeExpr",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the element type of the array",
          "children": [
            {
              "type": "void",
              "name": "setElementType"
            },
            {
              "type": "type",
              "name": "arrayElementType",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Returns a copy of this type with the qualifier const",
          "children": [
            {
              "type": "type",
              "name": "asConst"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the desugared type of this type",
          "children": [
            {
              "type": "void",
              "name": "setDesugar"
            },
            {
              "type": "type",
              "name": "desugaredType",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the template argument types of a template type",
          "children": [
            {
              "type": "void",
              "name": "setTemplateArgsTypes"
            },
            {
              "type": "type[]",
              "name": "templateArgTypes",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets a single template argument type of a template type",
          "children": [
            {
              "type": "void",
              "name": "setTemplateArgsTypes"
            },
            {
              "type": "Integer",
              "name": "index",
              "defaultValue": ""
            },
            {
              "type": "type",
              "name": "templateArgType",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Changes a single occurence of a type field that has the current value with new value. Returns true if there was a change",
          "children": [
            {
              "type": "boolean",
              "name": "setTypeFieldByValueRecursive"
            },
            {
              "type": "Object",
              "name": "currentValue",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "newValue",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces an underlying type of this instance with new type, if it matches the old type. Returns true if there were changes",
          "children": [
            {
              "type": "type",
              "name": "setUnderlyingType"
            },
            {
              "type": "type",
              "name": "oldValue",
              "defaultValue": ""
            },
            {
              "type": "type",
              "name": "newValue",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "insert"
            },
            {
              "type": "[before| after| replace]",
              "name": "position",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "def"
            },
            {
              "type": "String",
              "name": "attribute",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, but not of the nodes in its fields",
          "children": [
            {
              "type": "joinpoint",
              "name": "copy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Copies all enumerable own properties from the source object to the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataAssign"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Clears all properties from the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataClear"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, including the nodes in their fields (only the first level of field nodes, this function is not recursive)",
          "children": [
            {
              "type": "joinpoint",
              "name": "deepCopy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the node associated to this joinpoint from the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "detach"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point after this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point before this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Adds a message that will be printed to the user after weaving finishes. Identical messages are removed",
          "children": [
            {
              "type": "void",
              "name": "messageToUser"
            },
            {
              "type": "String",
              "name": "message",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the children of this node",
          "children": [
            {
              "type": "void",
              "name": "removeChildren"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this node with the given node",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of join points",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of strings",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWithStrings"
            },
            {
              "type": "String[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Setting data directly is not supported, this action just emits a warning and does nothing",
          "children": [
            {
              "type": "void",
              "name": "setData"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the first child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setFirstChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String[]",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the last child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setLastChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the type of a node, if it has a type",
          "children": [
            {
              "type": "void",
              "name": "setType"
            },
            {
              "type": "type",
              "name": "type",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Associates arbitrary values to nodes of the AST",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "String",
              "name": "fieldName",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a map",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "Map",
              "name": "fieldNameAndValue",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the value associated with the given property key",
          "children": [
            {
              "type": "joinpoint",
              "name": "setValue"
            },
            {
              "type": "String",
              "name": "key",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "suffix",
              "defaultValue": ""
            }
          ]
        }
      ]
    },
    {
      "type": "joinpoint",
      "name": "varref",
      "defaultAttr": "name",
      "extends": "expression",
      "tooltip": "A reference to a variable",
      "children": [
        {
          "type": "attribute",
          "children": [
            {
              "type": "declarator",
              "name": "declaration"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this variable reference has a MS-style property, false otherwise",
          "children": [
            {
              "type": "Boolean",
              "name": "hasProperty"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this varref represents a function call",
          "children": [
            {
              "type": "Boolean",
              "name": "isFunctionCall"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String",
              "name": "kind"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String",
              "name": "name"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "if this variable reference has a MS-style property, returns the property name. Returns undefined otherwise",
          "children": [
            {
              "type": "String",
              "name": "property"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "expression from where the attribute 'use' is calculated. In certain cases (e.g., array access, pointer dereference) the 'use' attribute is not calculated on the node itself, but on an ancestor of the node. This attribute returns that node",
          "children": [
            {
              "type": "expression",
              "name": "useExpr"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a 'decl' join point that represents the declaration associated with this expression, or undefined if there is none",
          "children": [
            {
              "type": "decl",
              "name": "decl"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "returns a cast joinpoint if this expression has an associated implicit cast, undefined otherwise",
          "children": [
            {
              "type": "cast",
              "name": "implicitCast"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the expression is part of an argument of a function call",
          "children": [
            {
              "type": "Boolean",
              "name": "isFunctionArgument"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "[read| write| readwrite]",
              "name": "use"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "vardecl",
              "name": "vardecl"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "attributes"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "selects"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "actions"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "ancestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with a dump of the AST representation starting from this node. This representation corresponds to the internal Java representation of the ClavaAst, where the node names correspond to Java classes. To get an equivalent representation with join point names, use the attribute 'dump'",
          "children": [
            {
              "type": "String",
              "name": "ast"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor AST name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "astAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, considering null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "astChild"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, considering null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "astChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String that uniquely identifies this node",
          "children": [
            {
              "type": "String",
              "name": "astId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if this node is a Java instance of the given name, which corresponds to a simple Java class name of an AST node. For an equivalent function for join point names, use 'instanceOf(joinPointName)'",
          "children": [
            {
              "type": "boolean",
              "name": "astIsInstance"
            },
            {
              "type": "String",
              "name": "className"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the Java class of this node, which is similar to the equivalent node in Clang AST",
          "children": [
            {
              "type": "String",
              "name": "astName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, considering null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "astNumChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "astParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The bit width of the type returned by this join point, in relation to the definitions of its Translation Unit, or undefined if there is no type or bitwidth defined, or if the join point is not in a TranslationUnit",
          "children": [
            {
              "type": "Integer",
              "name": "bitWidth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String list of the names of the join points that form a path from the root to this node",
          "children": [
            {
              "type": "String[]",
              "name": "chain"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the joinpoint chain",
          "children": [
            {
              "type": "joinpoint",
              "name": "chainAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "child"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "children"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the code represented by this node",
          "children": [
            {
              "type": "String",
              "name": "code"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "column"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the given node is a descendant of this node",
          "children": [
            {
              "type": "Boolean",
              "name": "contains"
            },
            {
              "type": "joinpoint",
              "name": "jp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "currentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "JS object associated with this node, containing parsed data of #pragma clava data when the node can be a target of pragmas. This is a special object, managed internally, and cannot be reassigned, to change its contents requires using key-value pairs. If the node can be the target of a pragma, the information stored in this object is persisted between rebuilds.",
          "children": [
            {
              "type": "Object",
              "name": "data"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the depth of this join point in the AST. If it is the root join point returns 0, if it is a child of the root node returns 1, etc.",
          "children": [
            {
              "type": "Integer",
              "name": "depth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves all descendants of the join point",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type, including the node itself",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendantsAndSelf"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endColumn"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endLine"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the file where the code of this node is located, if available",
          "children": [
            {
              "type": "String",
              "name": "filename"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the complete path to the file where the code of this node comes from",
          "children": [
            {
              "type": "String",
              "name": "filepath"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the first child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks in the descendants for the first node of the given type",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstJp"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use 'userField' instead]",
          "children": [
            {
              "type": "Object",
              "name": "getUserField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The value associated with the given property key",
          "children": [
            {
              "type": "Object",
              "name": "getValue"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use hasParent instead]",
          "children": [
            {
              "type": "boolean",
              "name": "hasAstParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the node has children, false otherwise",
          "children": [
            {
              "type": "Boolean",
              "name": "hasChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the given join point or AST node is the same (== test) as the current join point AST node",
          "children": [
            {
              "type": "Boolean",
              "name": "hasNode"
            },
            {
              "type": "Object",
              "name": "nodeOrJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this node has a parent",
          "children": [
            {
              "type": "boolean",
              "name": "hasParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point has a type",
          "children": [
            {
              "type": "Boolean",
              "name": "hasType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns comments that are not explicitly in the AST, but embedded in other nodes",
          "children": [
            {
              "type": "comment[]",
              "name": "inlineComments"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this is a Cilk node (i.e., cilk_spawn, cilk_sync or cilk_for)",
          "children": [
            {
              "type": "Boolean",
              "name": "isCilk"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is part of a system header file",
          "children": [
            {
              "type": "Boolean",
              "name": "isInSystemHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a header (e.g., if condition, for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a loop header (e.g., for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideLoopHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if any descendant or the node itself was defined as a macro",
          "children": [
            {
              "type": "Boolean",
              "name": "isMacro"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the full Java class name of the type of the Java field with the provided name",
          "children": [
            {
              "type": "String",
              "name": "javaFieldType"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'keys' instead, together with 'getValue'] The names of the Java fields of this node. Can be used as key of the attribute 'javaValue'",
          "children": [
            {
              "type": "String[]",
              "name": "javaFields"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'getValue' instead, with the names returned by the attribute 'keys'] Returns the value associated with the provided Java field name",
          "children": [
            {
              "type": "Object",
              "name": "javaValue"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use joinPointType instead (uppercase P)]",
          "children": [
            {
              "type": "String",
              "name": "joinpointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Id that is based on the position of the node in the code, and should remain stable between compilations (warning: only a few nodes - file, function, loop - currently support it)",
          "children": [
            {
              "type": "String",
              "name": "jpId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Java Class instance with the type of the given key",
          "children": [
            {
              "type": "Object",
              "name": "keyType"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A list of the properties currently supported by this node. Can be used as parameter of the attribute 'getValue'",
          "children": [
            {
              "type": "String[]",
              "name": "keys"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[HACK: .descendants(type) does not work in .lara files, after GraalVM update] Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "laraDescendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the last child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "lastChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that came before this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "leftJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "line"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A string with information about the file and code position of this node, if available",
          "children": [
            {
              "type": "String",
              "name": "location"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, ignoring null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "numChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope that is a parent of the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The pragmas associated with this node",
          "children": [
            {
              "type": "pragma[]",
              "name": "pragmas"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that comes after this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "rightJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the 'program' joinpoint",
          "children": [
            {
              "type": "joinpoint",
              "name": "root"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the nodes of the scope of the current join point. If this node has a body (e.g., loop, function) corresponds to the children of the body. Otherwise, returns an empty array",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "scopeNodes"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that came before this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsLeft"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that come after this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsRight"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Converts this join point to a statement, or returns undefined if it was not possible",
          "children": [
            {
              "type": "statement",
              "name": "stmt"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "type",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrives values that have been associated to nodes of the AST with 'setUserField'",
          "children": [
            {
              "type": "Object",
              "name": "userField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a String with the type of the join point",
          "children": [
            {
              "type": "String",
              "name": "joinPointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the current join point is an instance of the given type",
          "children": [
            {
              "type": "Boolean",
              "name": "instanceOf"
            },
            {
              "type": "String",
              "name": "name"
            }
          ]
        },
        {
          "type": "select",
          "clazz": "vardecl",
          "alias": ""
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "setName"
            },
            {
              "type": "String",
              "name": "name",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "insert"
            },
            {
              "type": "[before| after| replace]",
              "name": "position",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "def"
            },
            {
              "type": "String",
              "name": "attribute",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, but not of the nodes in its fields",
          "children": [
            {
              "type": "joinpoint",
              "name": "copy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Copies all enumerable own properties from the source object to the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataAssign"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Clears all properties from the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataClear"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, including the nodes in their fields (only the first level of field nodes, this function is not recursive)",
          "children": [
            {
              "type": "joinpoint",
              "name": "deepCopy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the node associated to this joinpoint from the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "detach"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point after this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point before this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Adds a message that will be printed to the user after weaving finishes. Identical messages are removed",
          "children": [
            {
              "type": "void",
              "name": "messageToUser"
            },
            {
              "type": "String",
              "name": "message",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the children of this node",
          "children": [
            {
              "type": "void",
              "name": "removeChildren"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this node with the given node",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of join points",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of strings",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWithStrings"
            },
            {
              "type": "String[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Setting data directly is not supported, this action just emits a warning and does nothing",
          "children": [
            {
              "type": "void",
              "name": "setData"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the first child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setFirstChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String[]",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the last child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setLastChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the type of a node, if it has a type",
          "children": [
            {
              "type": "void",
              "name": "setType"
            },
            {
              "type": "type",
              "name": "type",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Associates arbitrary values to nodes of the AST",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "String",
              "name": "fieldName",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a map",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "Map",
              "name": "fieldNameAndValue",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the value associated with the given property key",
          "children": [
            {
              "type": "joinpoint",
              "name": "setValue"
            },
            {
              "type": "String",
              "name": "key",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "suffix",
              "defaultValue": ""
            }
          ]
        }
      ]
    },
    {
      "type": "joinpoint",
      "name": "wrapperStmt",
      "extends": "statement",
      "children": [
        {
          "type": "attribute",
          "children": [
            {
              "type": "joinpoint",
              "name": "content"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "[comment| pragma]",
              "name": "kind"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isFirst"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "Boolean",
              "name": "isLast"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "attributes"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "selects"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "String[]",
              "name": "actions"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "ancestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with a dump of the AST representation starting from this node. This representation corresponds to the internal Java representation of the ClavaAst, where the node names correspond to Java classes. To get an equivalent representation with join point names, use the attribute 'dump'",
          "children": [
            {
              "type": "String",
              "name": "ast"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor AST name, walking back on the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "astAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, considering null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "astChild"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, considering null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "astChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String that uniquely identifies this node",
          "children": [
            {
              "type": "String",
              "name": "astId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if this node is a Java instance of the given name, which corresponds to a simple Java class name of an AST node. For an equivalent function for join point names, use 'instanceOf(joinPointName)'",
          "children": [
            {
              "type": "boolean",
              "name": "astIsInstance"
            },
            {
              "type": "String",
              "name": "className"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the Java class of this node, which is similar to the equivalent node in Clang AST",
          "children": [
            {
              "type": "String",
              "name": "astName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, considering null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "astNumChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "astParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The bit width of the type returned by this join point, in relation to the definitions of its Translation Unit, or undefined if there is no type or bitwidth defined, or if the join point is not in a TranslationUnit",
          "children": [
            {
              "type": "Integer",
              "name": "bitWidth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String list of the names of the join points that form a path from the root to this node",
          "children": [
            {
              "type": "String[]",
              "name": "chain"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks for an ancestor joinpoint name, walking back on the joinpoint chain",
          "children": [
            {
              "type": "joinpoint",
              "name": "chainAncestor"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the child of the node at the given index, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint",
              "name": "child"
            },
            {
              "type": "Integer",
              "name": "index"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the children of the node, ignoring null nodes",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "children"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the code represented by this node",
          "children": [
            {
              "type": "String",
              "name": "code"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "column"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the given node is a descendant of this node",
          "children": [
            {
              "type": "Boolean",
              "name": "contains"
            },
            {
              "type": "joinpoint",
              "name": "jp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "currentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "JS object associated with this node, containing parsed data of #pragma clava data when the node can be a target of pragmas. This is a special object, managed internally, and cannot be reassigned, to change its contents requires using key-value pairs. If the node can be the target of a pragma, the information stored in this object is persisted between rebuilds.",
          "children": [
            {
              "type": "Object",
              "name": "data"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the depth of this join point in the AST. If it is the root join point returns 0, if it is a child of the root node returns 1, etc.",
          "children": [
            {
              "type": "Integer",
              "name": "depth"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves all descendants of the join point",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrieves the descendants of the given type, including the node itself",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "descendantsAndSelf"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending column of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endColumn"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The ending line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "endLine"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The name of the file where the code of this node is located, if available",
          "children": [
            {
              "type": "String",
              "name": "filename"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the complete path to the file where the code of this node comes from",
          "children": [
            {
              "type": "String",
              "name": "filepath"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the first child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Looks in the descendants for the first node of the given type",
          "children": [
            {
              "type": "joinpoint",
              "name": "firstJp"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use 'userField' instead]",
          "children": [
            {
              "type": "Object",
              "name": "getUserField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The value associated with the given property key",
          "children": [
            {
              "type": "Object",
              "name": "getValue"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use hasParent instead]",
          "children": [
            {
              "type": "boolean",
              "name": "hasAstParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the node has children, false otherwise",
          "children": [
            {
              "type": "Boolean",
              "name": "hasChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the given join point or AST node is the same (== test) as the current join point AST node",
          "children": [
            {
              "type": "Boolean",
              "name": "hasNode"
            },
            {
              "type": "Object",
              "name": "nodeOrJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this node has a parent",
          "children": [
            {
              "type": "boolean",
              "name": "hasParent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point has a type",
          "children": [
            {
              "type": "Boolean",
              "name": "hasType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns comments that are not explicitly in the AST, but embedded in other nodes",
          "children": [
            {
              "type": "comment[]",
              "name": "inlineComments"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if this is a Cilk node (i.e., cilk_spawn, cilk_sync or cilk_for)",
          "children": [
            {
              "type": "Boolean",
              "name": "isCilk"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is part of a system header file",
          "children": [
            {
              "type": "Boolean",
              "name": "isInSystemHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a header (e.g., if condition, for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true, if the join point is inside a loop header (e.g., for, while)",
          "children": [
            {
              "type": "Boolean",
              "name": "isInsideLoopHeader"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if any descendant or the node itself was defined as a macro",
          "children": [
            {
              "type": "Boolean",
              "name": "isMacro"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "String with the full Java class name of the type of the Java field with the provided name",
          "children": [
            {
              "type": "String",
              "name": "javaFieldType"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'keys' instead, together with 'getValue'] The names of the Java fields of this node. Can be used as key of the attribute 'javaValue'",
          "children": [
            {
              "type": "String[]",
              "name": "javaFields"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: used attribute 'getValue' instead, with the names returned by the attribute 'keys'] Returns the value associated with the provided Java field name",
          "children": [
            {
              "type": "Object",
              "name": "javaValue"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[DEPRECATED: use joinPointType instead (uppercase P)]",
          "children": [
            {
              "type": "String",
              "name": "joinpointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Id that is based on the position of the node in the code, and should remain stable between compilations (warning: only a few nodes - file, function, loop - currently support it)",
          "children": [
            {
              "type": "String",
              "name": "jpId"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Java Class instance with the type of the given key",
          "children": [
            {
              "type": "Object",
              "name": "keyType"
            },
            {
              "type": "String",
              "name": "key"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A list of the properties currently supported by this node. Can be used as parameter of the attribute 'getValue'",
          "children": [
            {
              "type": "String[]",
              "name": "keys"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "[HACK: .descendants(type) does not work in .lara files, after GraalVM update] Retrieves the descendants of the given type",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "laraDescendants"
            },
            {
              "type": "String",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the last child of this node, or undefined if it has no child",
          "children": [
            {
              "type": "joinpoint",
              "name": "lastChild"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that came before this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "leftJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The starting line of the current node in the original code",
          "children": [
            {
              "type": "Integer",
              "name": "line"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "A string with information about the file and code position of this node, if available",
          "children": [
            {
              "type": "String",
              "name": "location"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the number of children of the node, ignoring null nodes",
          "children": [
            {
              "type": "Integer",
              "name": "numChildren"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the parent node in the AST, or undefined if it is the root node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parent"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that declares the scope that is a parent of the scope of this node",
          "children": [
            {
              "type": "joinpoint",
              "name": "parentRegion"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "The pragmas associated with this node",
          "children": [
            {
              "type": "pragma[]",
              "name": "pragmas"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the node that comes after this node, or undefined if there is none",
          "children": [
            {
              "type": "joinpoint",
              "name": "rightJp"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns the 'program' joinpoint",
          "children": [
            {
              "type": "joinpoint",
              "name": "root"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "the nodes of the scope of the current join point. If this node has a body (e.g., loop, function) corresponds to the children of the body. Otherwise, returns an empty array",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "scopeNodes"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that came before this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsLeft"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Returns an array with the siblings that come after this node",
          "children": [
            {
              "type": "joinpoint[]",
              "name": "siblingsRight"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Converts this join point to a statement, or returns undefined if it was not possible",
          "children": [
            {
              "type": "statement",
              "name": "stmt"
            }
          ]
        },
        {
          "type": "attribute",
          "children": [
            {
              "type": "type",
              "name": "type"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "Retrives values that have been associated to nodes of the AST with 'setUserField'",
          "children": [
            {
              "type": "Object",
              "name": "userField"
            },
            {
              "type": "String",
              "name": "fieldName"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "a String with the type of the join point",
          "children": [
            {
              "type": "String",
              "name": "joinPointType"
            }
          ]
        },
        {
          "type": "attribute",
          "tooltip": "true if the current join point is an instance of the given type",
          "children": [
            {
              "type": "Boolean",
              "name": "instanceOf"
            },
            {
              "type": "String",
              "name": "name"
            }
          ]
        },
        {
          "type": "select",
          "clazz": "expression",
          "alias": "expr"
        },
        {
          "type": "select",
          "clazz": "expression",
          "alias": "childExpr"
        },
        {
          "type": "select",
          "clazz": "call",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "call",
          "alias": "stmtCall"
        },
        {
          "type": "select",
          "clazz": "memberCall",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "memberAccess",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "arrayAccess",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "vardecl",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "varref",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "op",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "binaryOp",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "unaryOp",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "newExpr",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "deleteExpr",
          "alias": ""
        },
        {
          "type": "select",
          "clazz": "cilkSpawn",
          "alias": ""
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "insert"
            },
            {
              "type": "[before| after| replace]",
              "name": "position",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "children": [
            {
              "type": "void",
              "name": "def"
            },
            {
              "type": "String",
              "name": "attribute",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, but not of the nodes in its fields",
          "children": [
            {
              "type": "joinpoint",
              "name": "copy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Copies all enumerable own properties from the source object to the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataAssign"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Clears all properties from the .data object",
          "children": [
            {
              "type": "void",
              "name": "dataClear"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Performs a copy of the node and its children, including the nodes in their fields (only the first level of field nodes, this function is not recursive)",
          "children": [
            {
              "type": "joinpoint",
              "name": "deepCopy"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the node associated to this joinpoint from the AST",
          "children": [
            {
              "type": "joinpoint",
              "name": "detach"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point after this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertAfter"
            },
            {
              "type": "String",
              "name": "code",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Inserts the given join point before this join point",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "insertBefore"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Adds a message that will be printed to the user after weaving finishes. Identical messages are removed",
          "children": [
            {
              "type": "void",
              "name": "messageToUser"
            },
            {
              "type": "String",
              "name": "message",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Removes the children of this node",
          "children": [
            {
              "type": "void",
              "name": "removeChildren"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this node with the given node",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a string",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "String",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of join points",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWith"
            },
            {
              "type": "joinpoint[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a list of strings",
          "children": [
            {
              "type": "joinpoint",
              "name": "replaceWithStrings"
            },
            {
              "type": "String[]",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Setting data directly is not supported, this action just emits a warning and does nothing",
          "children": [
            {
              "type": "void",
              "name": "setData"
            },
            {
              "type": "Object",
              "name": "source",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the first child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setFirstChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String[]",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the commented that are embedded in a node",
          "children": [
            {
              "type": "void",
              "name": "setInlineComments"
            },
            {
              "type": "String",
              "name": "comments",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces the last child, or inserts the join point if no child is present",
          "children": [
            {
              "type": "void",
              "name": "setLastChild"
            },
            {
              "type": "joinpoint",
              "name": "node",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the type of a node, if it has a type",
          "children": [
            {
              "type": "void",
              "name": "setType"
            },
            {
              "type": "type",
              "name": "type",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Associates arbitrary values to nodes of the AST",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "String",
              "name": "fieldName",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Overload which accepts a map",
          "children": [
            {
              "type": "Object",
              "name": "setUserField"
            },
            {
              "type": "Map",
              "name": "fieldNameAndValue",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Sets the value associated with the given property key",
          "children": [
            {
              "type": "joinpoint",
              "name": "setValue"
            },
            {
              "type": "String",
              "name": "key",
              "defaultValue": ""
            },
            {
              "type": "Object",
              "name": "value",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            }
          ]
        },
        {
          "type": "action",
          "tooltip": "Replaces this join point with a comment with the same contents as .code",
          "children": [
            {
              "type": "joinpoint",
              "name": "toComment"
            },
            {
              "type": "String",
              "name": "prefix",
              "defaultValue": ""
            },
            {
              "type": "String",
              "name": "suffix",
              "defaultValue": ""
            }
          ]
        }
      ]
    },
    {
      "type": "enum",
      "name": "StorageClass",
      "children": [
        {
          "string": "null",
          "value": "AUTO"
        },
        {
          "string": "null",
          "value": "EXTERN"
        },
        {
          "string": "null",
          "value": "NONE"
        },
        {
          "string": "null",
          "value": "PRIVATE_EXTERN"
        },
        {
          "string": "null",
          "value": "REGISTER"
        },
        {
          "string": "null",
          "value": "STATIC"
        }
      ]
    },
    {
      "type": "enum",
      "name": "Relation",
      "children": [
        {
          "string": "null",
          "value": "EQ"
        },
        {
          "string": "null",
          "value": "GE"
        },
        {
          "string": "null",
          "value": "GT"
        },
        {
          "string": "null",
          "value": "LE"
        },
        {
          "string": "null",
          "value": "LT"
        },
        {
          "string": "null",
          "value": "NE"
        }
      ]
    }
  ]
}
