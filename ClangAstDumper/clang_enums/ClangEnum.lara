import weaver.Query;

/**
 * @class
 */
var ClangEnum = function(name, cppVarName, mapper, excludeArray, className) {
	this.name = name;
	this.cppVarName = cppVarName;

	if(mapper === undefined) {
		mapper = element => element;
	}
	this.mapper = mapper;


	if(excludeArray === undefined) {
		excludeArray = []; 
	}
	this.excludeSet = new StringSet(excludeArray);
	//console.log("Exclude set: " + this.excludeSet.values());
	
	this.className = className;
	
	this.enumValues = undefined;
};

ClangEnum.prototype.getEnumName = function() {
	return this.name;
}

ClangEnum.prototype.getCompleteEnumName = function() {
	if(this.className === undefined) {
		return this.name;
	}
	
	return this.className + "_" + this.name;
}

ClangEnum.prototype.getClassName = function() {
	return this.className;
}

/*
ClangEnum.prototype.getStartingNode = function() {
	if(this.className === undefined) {
		return Query.root();
	}
	
	var startingClass = Query.search("class", this.className).first();
	
	if(startingClass === undefined) {
		throw new Error("Clang enum specifies class '"+this.className+"', but it could not be found");
	}
	
	return startingClass;
}
*/

ClangEnum.prototype.setEnumValues = function(enumValues) {
	if(this.enumValues !== undefined) {
		console.log("Setting enum values again for enum " + this.name);
	}
	
	this.enumValues = enumValues;
}


ClangEnum.prototype.getCode = function() {
	if(this.enumValues === undefined) {
		console.log("No enum values set for enum '"+this.name+"'");
		return undefined;
	}


	var code = "";

	code += "extern const std::string clava::"+this.cppVarName+"[] = {\n";

	for(var enumValue of this.enumValues) {
		//console.log("Enum: " + enumValue);
		if(this.excludeSet.has(enumValue.toString())) {
			console.log("Excluded enum '"+enumValue+"'");
			continue;
		}

		// Map enum value
		enumValue = this.mapper(enumValue);
	
		code += '        "' + enumValue + '",\n';
	}

	code += "};\n";

	return code;
}