import lara.Io;
import lara.Check;
import lara.JavaInterop;
import clava.ClavaAspects;
import clava.util.ClavaDataStore;
import weaver.WeaverOptions;
import weaver.Weaver;

/**
 * @class
 */
var Clava = {};

/**
 * Enables/disables library SpecsLogger for printing.
 * <p>
 * By default, is disabled.
 */
Clava.useSpecsLogger = false;

/**
 * Returns the standard being used for compilation.
 */
Clava.getStandard = function() {
	call standardResult:ClavaStandard();

	return standardResult.standard;
}

Clava.isCxx = function() {	
	call standardResult:ClavaIsCxx();

	return standardResult.isCxx;
}

Clava.rebuild = function() {
	call Rebuild();
}; 

Clava.rebuildFuzzy = function() {
	call RebuildFuzzy();
}; 

/**
 * @return {J#java.io.File} The folder of the first input source element, either itself, if a folder, or the parent folder, if it is a file. 
 */
Clava.getBaseFolder = function() {
	call baseFolderResult:ClavaBaseFolder();
	
	return baseFolderResult.baseFolder;
}; 

/**
 * @return {J#java.io.File} The folder where the code represented by the AST will be written at the end of execution.
 */
Clava.getWeavingFolder = function() {
	call weavingFolderResult:ClavaWeavingFolder();
	
	return weavingFolderResult.weavingFolder;
}; 

/**
 * @param {$file} $file The file to add to the AST.
 */
Clava.addFile = function($file) {

	if(!$file.instanceOf('file')) {
		println("Clava.addFile: Input must be a 'file' join point, it is a '" + $file.joinPointType + "'");
		return;
	}
	call ClavaAddFile($file);
}; 


/**
 * @param {J#java.io.File|string} path Path to an existing source file that will be added to the AST. If the file does not exists, throws an exception.
 */
Clava.addExistingFile = function(path) {

	var file = Io.getPath(path);
	
	if(!file.isFile()) {
		throw new Error('Clava.addExistingFile(): path ' + path + ' does not represent an existing file');
	}

	var $file = AstFactory.file(file.getAbsolutePath(), '');
	Clava.addFile($file);
}; 


Clava.cLinkageBegin = %{
#ifdef __cplusplus
extern "C" {
#endif
}%;

Clava.cLinkageEnd = %{
#ifdef __cplusplus
}
#endif
}%;

/**
 * Launches a Clava weaving session.
 * @param {(string|Array)} args - The arguments to pass to the weaver, as if it was launched from the command-line
 * @return {Boolean} true if the weaver execution without problems, false otherwise
 */
Clava.runClava = function(args) {

	// If string, separate arguments
	if(typeof args  === "string") {
		args = ArgumentsParser.newCommandLine().parse(args);
	}

	return ClavaWeaverLauncher.execute(args);
}

/**
 * Launches several Clava weaving sessions in parallel.
 *
 * @param {string[][]} argsLists - An array where each element is an array with the arguments to pass to the weaver, as if it was launched from the command-line
 * @param {int} [threads = -1] -  Number of threads to use
 * @param {string[]|string} [clavaCommand = []] -  The command we should use to call Clava (e.g., /usr/local/bin/clava)
 *
 * @return {Boolean} true if none of the weaver executions had problems, false otherwise
 */
Clava.runClavaParallel = function(argsLists, threads, clavaCommand) {

	if(threads === undefined) {
		threads = -1;
	}
	
	if(clavaCommand === undefined) {
		clavaCommand = ["clava"];
	}	
	
	if(!isArray(clavaCommand)) {
		clavaCommand = [clavaCommand.toString()];
	}
	
	
	// Assures all elements in the argsLists are String
	var safeArgsLists = [];
	for(var argsList of argsLists) {
		safeArgsLists.push(argsList.map(value => value.toString()));
	}

/*
	// If string, separate arguments
	if(typeof args  === "string") {
		args = ArgumentsParser.newCommandLine().parse(args);
	}
*/

	//return ClavaWeaverLauncher.executeParallel(argsLists, threads, JavaInterop.arrayToList(clavaCommand));
	var jsonStrings = ClavaWeaverLauncher.executeParallel(safeArgsLists, threads, JavaInterop.arrayToStringList(clavaCommand), Clava.getData().getContextFolder().getAbsolutePath());	

	// Read each json file into its own object
	var results = [];
	
	for(var jsonString of jsonStrings) {
		results.push(JSON.parse(jsonString));
	}
	
	return results;
}

/**
 * Creates a clone of the current AST and pushes the clone to the top of the current AST stack. If a $program join point is passed, that join point is added to the top of the stack instead.
 * 
 * @param {$program} [$program = undefined] program to push to the AST.
 */
Clava.pushAst = function($program) {
	if($program === undefined) {
		call PushAst();
		return;
	}

	Check.isJoinPoint($program, "program");
	Weaver.getWeaverEngine().pushAst($program.node);
}

/**
 * Discards the AST at the top of the current AST stack.
 */
Clava.popAst = function() {
	call PopAst();
}

/**
 * The current number of elements in the AST stack.
 */
Clava.getStackSize = function() {
	return Weaver.getWeaverEngine().getStackSize();
}

/**
 * Looks for a join point in the current AST.
 *
 * @param $jp a join point from any AST
 * @return the equivalent join point from the AST at the top of the current AST stack
 */
Clava.findJp = function($jp) {
	// Get file
	$file = $jp.ancestor("file");
	if($file === undefined) {
		info("Could not find a file for '" + $jp + "'", "Clava.findJp");
		return undefined;
	}
	
	var $newJp = CxxWeaverApi.findJp($file.filepath, $jp.astId);
	if($newJp === null) {
		info("Could not find the given '" + $jp + "' in the current AST. Please verify if a rebuild was done", "Clava.findJp");
		return undefined;
	}
	
	return $newJp;
}


/**
 * Writes the code of the current AST to the given folder.
 */
Clava.writeCode = function(outputFoldername) {
	var outputFolder = Io.mkdir(outputFoldername);
	
	CxxWeaverApi.writeCode(outputFolder);
	
	return outputFolder;
}

/**
 * @return DataStore with the data of the current weaver
 */
Clava.getData = function() {
	return new ClavaDataStore(WeaverOptions.getData());
}

/**
 * @return the join point $program.
 */
Clava.getProgram = function() {
	call results : GetProgram();
	return results.programJp;
}

/**
 *
 * @return {J#List<include>} a list of join points representing available user includes
 */
Clava.getAvailableIncludes = function() {	
	return CxxWeaverApi.getAvailableUserIncludes();
}

/**
 *
 * @return {J#Set<String>} a set with paths to the include folders of the current configuration.
 */
Clava.getIncludeFolders = function() {	
	return CxxWeaverApi.getIncludeFolders();
}



/*
 *
 */
 /*
Clava.getContext = function() {	
	return Clava.getProgram().getContext();
}
*/
/*
Clava.getFactory = function() {
	return new AstFactory(Clava.getContext());
}
*/

/**** PRIVATE ****/


