import lara.analysis.Checker;
import lara.analysis.CheckResult;
import lara.analysis.Fix;

/*Check for the presence of strcat functions*/

var StrcatChecker = function() {
    // Parent constructor
    Checker.call(this, "strcat");
    this.advice = " Unsafe function strcat() can be replaced by safer strncat()(Possible Fix). Be careful though because strncat() doesn't null-terminate. strcat() doesn\'t check the length of the buffer: risk of buffer overflow (CWE-120).\n\n";
};

StrcatChecker.prototype = Object.create(Checker.prototype);

StrcatChecker.fixAction = function($node) {
	var newFunction = "strncat(" + $node.args[0].code + ", " + $node.args[1].code
	     		+ ", sizeof(" + $node.args[0].code + "))";
	$node.replaceWith(newFunction);
}

StrcatChecker.prototype.check = function($node) {
    if ((!$node.getInstanceOf("call")) || ($node.name !== 'strcat')) {
        return;
    }
    return new CheckResult(this.name, $node, this.advice, new Fix($node, StrcatChecker.fixAction));
}
