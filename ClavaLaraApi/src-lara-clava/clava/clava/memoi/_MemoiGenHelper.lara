import lara.Io;
import lara.Strings;
import clava.ClavaJoinPoints;


/**
 * 		Generates the table and supporting code for this report.
 * 		
 * 		Inserts elements in the table based on the predicate insertPred.
 * */
function _generate(insertPred, countComparator, report, isMemoiDebug, isMemoiOnline, isMemoiEmpty, isMemoiUpdateAlways, memoiApproxBits, tableSize, signature, callSite) {
	
	var wt;
	
	if(callSite === 'global') {
		wt = call _Memoi_WrapGlobalTarget(signature);
	} else {
		wt = call _Memoi_WrapSingleTarget(signature, callSite);
	}
	call _Memoi_InsertTableCode(insertPred, countComparator, report, wt.wrapperName, isMemoiDebug, isMemoiOnline, isMemoiEmpty, isMemoiUpdateAlways, memoiApproxBits, tableSize);
}

aspectdef _Memoi_WrapGlobalTarget
	input signature end
	output wrapperName end
	
	select stmt.call end
	apply

		var sig = $call.signature;
		sig = Strings.replacer(sig, / /g, '');
		if(sig != signature) {
			continue;
		}

		var normalizedSig = _normalizeSig(signature);
		
		wrapperName = "mw_" + normalizedSig;
		$stmt.exec wrap(wrapperName);
		
		debug('wrapped');
	end
end

aspectdef _Memoi_WrapSingleTarget
	input signature, location end
	output wrapperName end
	
	select stmt.call end
	apply

		var sig = $call.signature;
		sig = Strings.replacer(sig, / /g, '');
		if(sig != signature) {
			continue;
		}

		var normalizedSig = _normalizeSig(signature);
		
		wrapperName = IdGenerator.next("mw_" + normalizedSig);
		$stmt.exec wrap(wrapperName);
		
		debug('wrapped');
		return;
	end
	condition
		$call.location === location
	end
	
	throw "Did not find call to " + signature + " at " + location;
end

aspectdef _Memoi_InsertTableCode
	input insertPred, countComparator, report, wrapperName, isMemoiDebug, isMemoiOnline, isMemoiEmpty, isMemoiUpdateAlways, memoiApproxBits, tableSize end
	
	select file.function{wrapperName}.call end
	apply
		if(isMemoiDebug) {
			var totalName = wrapperName + '_total_calls';
			var missesName = wrapperName + '_total_misses';
			$file.exec addGlobal(totalName, ClavaJoinPoints.builtinType("int"), '0');
			$file.exec addGlobal(missesName, ClavaJoinPoints.builtinType("int"), '0');
			insert before '[[totalName]]++;';
			insert after '[[missesName]]++;';
			
			call _Memoi_AddMainDebug(totalName, missesName, wrapperName);
		}
		
		var tableCode = _makeTableCode(insertPred, countComparator, report, $function, tableSize, isMemoiEmpty, isMemoiOnline, memoiApproxBits);	
		insert before tableCode;
		
		if(isMemoiOnline) {
			
			var updateCode = _makeUpdateCode(report, $function, tableSize, isMemoiUpdateAlways);
			insert after updateCode;
		}
		
		$file.exec addInclude('stdint.h', true);
	end
end

aspectdef _Memoi_AddMainDebug
	input totalName, missesName, wrapperName end
	
	select file.function{'main'} end
	apply
		$file.exec addGlobal(totalName, ClavaJoinPoints.builtinType("int"), '0');
		$file.exec addGlobal(missesName, ClavaJoinPoints.builtinType("int"), '0');
		$file.addInclude('stdio.h', true);
		
			$function.exec insertReturn(%{
				printf("[[wrapperName]]\t%d / %d (%.2f%%)\n",
					[[totalName]] - [[missesName]],
					[[totalName]],
					([[totalName]] - [[missesName]]) * 100.0 / [[totalName]]);
			}%);
	end
end

function _baseLog(num, base) {
	
	return Math.log(num) / Math.log(base);
}

function _makeTableCode(insertPred, countComparator, report, $function, tableSize, isMemoiEmpty, isMemoiOnline, memoiApproxBits) {
	
	var indexBits = _baseLog(tableSize, 2);

	debug('table size: ' + tableSize);
	debug('index bits: ' + indexBits);

	var paramNames = [];
	for(var $param of $function.params) {
		paramNames.push($param.name);
	}
	
	var code = MemoiCodeGen.generateDmtCode(report, tableSize, paramNames, isMemoiEmpty, isMemoiOnline, memoiApproxBits);

	return code;
}

function _makeUpdateCode(report, $function, tableSize, isMemoiUpdateAlways) {
	
	var indexBits = _baseLog(tableSize, 2);

	var paramNames = [];
	for(var $param of $function.params) {
		paramNames.push($param.name);
	}
	
	var code = MemoiCodeGen.generateUpdateCode(report, tableSize, paramNames, isMemoiUpdateAlways);

	return code;
}

var sizeMap = {
	'float': 32,
	'int': 32,
	'double': 64
};

function _printTable(table, tableSize) {
	
	for(var i = 0; i < tableSize; i++) {

		if(table[i] !== undefined) {

			var code = "";

			var fullKey = table[i].fullKey;
			var keys = fullKey.split('#');
			for(var k = 0; k < keys.length; k++) {
				code += '0x' + keys[k] + ', ';
			}
			code += '0x' + table[i].output;
		
			println(code);	
		}
	}
}

function _printTableReport(collisions, totalElements, maxCollision, report, tableSize, table) {

	var tableCalls = 0;
	var tableElements = 0;
	for(var i = 0; i < tableSize; i++) {

		if(table[i] != undefined) {

			tableCalls += mean(table[i].counter, report.reportCount);
			tableElements++;
		}
	}
	var totalCalls = mean(report.calls, report.reportCount);
	var collisionPercentage = collisions / totalElements * 100;
	var elementsCoverage = tableElements / totalElements * 100;
	var callCoverage = tableCalls / totalCalls * 100;
	
	println('collisions: ' + collisions + ' (' + (collisionPercentage.toFixed(2)) + '%)');
	println('largest collision: ' + maxCollision);
	println('element coverage: ' + tableElements + '/' + totalElements + ' (' + (elementsCoverage.toFixed(2)) + ')%');
	println('call coverage: ' + tableCalls + '/' + totalCalls + ' (' + (callCoverage.toFixed(2)) + ')%');
}

function _hashFunctionHalf(bits64){
	
	var len = bits64.length;
	var hashString = '';
	
	for(var i = 0; i < len / 2; i++) {

		var number = parseInt(bits64.charAt(i), 16) ^ parseInt(bits64.charAt(i+len/2), 16);
		hashString +=  number.toString(16);
	}

	return hashString;
}

function _hashFunctionOld(bits64, indexBits) {
	
	switch(indexBits) {

		case 8:
			var bits32 = _hashFunctionHalf(bits64);
			var bits16 = _hashFunctionHalf(bits32);
			var bits8 = _hashFunctionHalf(bits16);
			return parseInt(bits8, 16);
		case 16:
			var bits32 = _hashFunctionHalf(bits64);
			var bits16 = _hashFunctionHalf(bits32);
			return parseInt(bits16, 16);
		default:
			return bits64;
			break;				
	}
}

function _hashFunction(bits64, indexBits) {
	
	var varBits = 64;
	var lastPower = varBits;
	var iters = _baseLog(varBits / indexBits, 2);
	var intIters = parseInt(iters, 10);
	
	var hash = bits64;
	for(var i = 0; i < intIters; i++) {
		hash = _hashFunctionHalf(hash);
		lastPower = lastPower / 2;
	}
	
	// if not integer, we need to mask bits at the end
	if(iters !== intIters) {
		
		// mask starts with 16 bits
		var mask = parseInt('0xffff', 16);
		var shift = 16 - indexBits;
		mask = mask >> (shift);
				
		hash = parseInt(hash, 16);
		
		hash = hash & mask;
		return hash;
	}
	
	hash = parseInt(hash, 16);
	return hash;
}

/**
 * 		Converts counts from a map to an array.
 * */
function _convertCounts(newReport) {

	var a = [];

	for(var countP in newReport.counts) {

		var count = newReport.counts[countP];
		a.push(count);
	}
	
	
	newReport.counts = a;
}

// function
function totalTopN(report, n, reportCount) {

	var result = 0;

	var averageCounts = [];
	
	for(var count of report.counts) {
		averageCounts.push(mean(count.counter, reportCount));
	}

	sortDescending(averageCounts);

	for(var i = 0; i < Math.min(n, averageCounts.length); i++){

		result += averageCounts[i];
	}

	return result;
}

// function
function elementsForRatio(report, total, ratio, reportCount) {

	var sum = 0;
	
	var averageCounts = [];
	
	for(var count of report.counts) {
		averageCounts.push(mean(count.counter, reportCount));
	}

	sortDescending(averageCounts);
	
	for(var elements = 0; elements < averageCounts.length; elements++){

		sum += averageCounts[elements];
		if(sum / total > ratio) {
			return elements + 1;
		}
	}

	return report.elements; // ?
}

// function
function getQuartVal(counts, idx) {
	
	var floor = Math.floor(idx);
	
	if(idx == floor) {
		var val = (counts[idx] + counts[idx-1]) / 2;
	} else {
		var val = counts[floor];
	}
	
	return val;
}

// function
function bwp(report, reportCount) {
	
	var s = {};
	
	var averageCounts = [];
	
	for(var count of report.counts) {
		averageCounts.push(mean(count.counter, reportCount));
	}

	sortDescending(averageCounts);
	
	var length = averageCounts.length;
	
	s.min = averageCounts[length-1];
	s.q1 = getQuartVal(averageCounts, 1/4 * length); 
	s.q2 = getQuartVal(averageCounts, 2/4 * length); 
	s.q3 = getQuartVal(averageCounts, 3/4 * length); 
	s.max = averageCounts[0];
	s.iqr = s.q3 - s.q1;
	
	return s;
}

// function
function printBwp(report, reportCount) {
	
	var b = bwp(report, reportCount);
	var s = '{ ';
	
	s += b.min += ', ';
	s += b.q1 += ', ';
	s += b.q2 += ', ';
	s += b.q3 += ', ';
	s += b.max;
				
	s += ' } iqr: ' + b.iqr;
	
	println(s);
}

function mean(values, count) {
	
	var sum = 0;
	
	for(var value of values) {
		
		sum += value;
	}
	
	if(count === undefined) {
		return sum / values.length;
	} else {
		return sum / count;
	}
}

function sortDescending(array) {

	return array.sort(function(a, b){

		if(a < b)
			return 1;
		else if(a > b)
			return -1;
		else
			return 0;
	});
}

function sortAscending(array) {

	return sortDescending(array).reverse();
}

