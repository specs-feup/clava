import clava.ClavaJoinPoints;


/**
 * Utility methods related to the HDF5 library.
 *
 * @class
 */
var Hdf5 = {};

Hdf5._HDF5Types = {};
Hdf5._HDF5Types["char"] = "C_S1";
Hdf5._HDF5Types["signed char"] = "NATIVE_SCHAR";
Hdf5._HDF5Types["unsigned char"] = "NATIVE_UCHAR";
Hdf5._HDF5Types["short"] = "NATIVE_SHORT";
Hdf5._HDF5Types["unsigned short"] = "NATIVE_USHORT";
Hdf5._HDF5Types["int"] = "NATIVE_INT";
Hdf5._HDF5Types["unsigned int"] = "NATIVE_UINT";
Hdf5._HDF5Types["long"] = "NATIVE_LONG";
Hdf5._HDF5Types["unsigned long"] = "NATIVE_ULONG";
Hdf5._HDF5Types["long long"] = "NATIVE_LLONG";
Hdf5._HDF5Types["unsigned long long"] = "NATIVE_ULLONG";
Hdf5._HDF5Types["float"] = "NATIVE_FLOAT";
Hdf5._HDF5Types["double"] = "NATIVE_DOUBLE";
Hdf5._HDF5Types["long double"] = "NATIVE_LDOUBLE";

//Hdf5._HDF5Types["bool"] = "H5T_NATIVE_HBOOL";
//Hdf5._HDF5Types["_Bool"] = "H5T_NATIVE_HBOOL";

Hdf5._HDF5Types["int8_t"] = "NATIVE_INT8";
Hdf5._HDF5Types["uint8_t"] = "NATIVE_UINT8";
Hdf5._HDF5Types["int16_t"] = "NATIVE_INT16";
Hdf5._HDF5Types["uint16_t"] = "NATIVE_UINT16";
Hdf5._HDF5Types["int32_t"] = "NATIVE_INT32";
Hdf5._HDF5Types["uin32_t"] = "NATIVE_UINT32";
Hdf5._HDF5Types["int64_t"] = "NATIVE_INT64";
Hdf5._HDF5Types["uint64_t"] = "NATIVE_UINT64";

/**
 * @return a String with the HDF5 code that represents the given type.
 */
Hdf5.convert = function($type) {

		//println("ORIGINAL TYPE:"+$type.ast);

		// Desugar type
		$type = $type.desugarAll;
		
		
		// Special case: char[size]
		if($type.isArray) {
			var $elementType = $type.elementType;
			
			if($elementType.code === 'char') {
				var arraySize = $type.arraySize;
				return 'H5::StrType(H5::PredType::C_S1, ' + arraySize + ')';
			}

			println(" -> Warning! HDF5 type not defined for C/C++ arrays of type: " + $elementType);
			return undefined;
		}
	
		// Special case: enum
		if($type.kind === "EnumType") {
			return Hdf5.convert($type.integerType);
			//$type = $type.integerType.desugar;
		}
	
		// Special case: unique_ptr
		if($type.kind === "TemplateSpecializationType" && $type.templateName === "unique_ptr") {
			// Generate code for the parameter
			return Hdf5.convert($type.firstArgType);
		}
		
		// Special case: vector
		if($type.kind === "TemplateSpecializationType" && $type.templateName === "vector") {
			// Convert template type
			var templateType = '&' + Hdf5.convert($type.firstArgType);
			return 'H5::VarLenType('+templateType+')';
		}
	
		var cType = $type.code;
		var HDF5Type  = Hdf5._HDF5Types[cType];

		if(HDF5Type === undefined) {
						println("TYPE NAME -> "+$type.kind);
						println("TYPE -> "+$type.ast);
			println(" -> Warning! HDF5 type not defined for C/C++ type: " + cType);
			return undefined;
		}

		// Common HDF5Type
		return 'H5::PredType::' + HDF5Type;
}


/**
 * @param $records an array of $record join points which will be used to generate a library with HDF5 conversors for those records.
 * @return an array with $file join points, representing the files of the newly created library.
 */
Hdf5.toLibrary = function($records) {
/*
aspectdef Hdf5Types
	input 
		//srcFolder,
		//namespace
		$records
	end
*/	
	var namespace = "hdf5type";

	// Folder for the generated files
	var filepath = "generated-hdf5";
	
	// Create files for generated code
	var $compTypeC = ClavaJoinPoints.file("CompType.cpp", filepath);
	var $compTypeH = ClavaJoinPoints.file("CompType.h", filepath);

	// Add files to the program
	/*
	select program end
	apply
		$program.exec addFile($compTypeC);
		$program.exec addFile($compTypeH);
	end
	*/

	var hDeclarationsCode = "";

	// Add include for CompTypes
	$compTypeC.exec addInclude("CompType.h", false);
	$compTypeC.exec addInclude("H5CompType.h", true);

	
	// For each record, create code
	//var recordCounter = 0;
	//select file.record{kind === "class", kind === "struct"} end
	//apply
	
	for(var $record of $records) {
		var $file = $record.getAncestor("file");
		
		//recordCounter++;
		var className = $record.name + "Type";
		var typeName = "itype";
		
		/* Generate code for .h file */

		// Create declaration
		hDeclarationsCode += Hdf5_HDeclaration($file.name, className);
		
		/* Generate code for .cpp file */
	
		// Add include to the file where record is
		$compTypeC.exec addIncludeJp($record);

		// Create code for translating C/C++ type to HDF5 type
		
		//call result : RecordToHdf5($record, typeName);
		var recordCode = Hdf5.convertRecord($record, typeName);
		//var cxxFunction = Hdf5_CImplementation(namespace, className, Format.addPrefix(result.code, "    "));
		var cxxFunction = Hdf5_CImplementation(namespace, className, Format.addPrefix(recordCode, "    "));

		$compTypeC.exec insertAfter(ClavaJoinPoints.declLiteral(cxxFunction));
	}
	//end
	
	/* Generate code for .h file */
	
	// Add include to HDF5 CPP library
	$compTypeH.exec addInclude("H5Cpp.h", true);

	// Create header code inside the target namespace
 	hDeclarationsCode = '\nnamespace '+namespace +' {\n\n' + Format.addPrefix(hDeclarationsCode, "    ") + "\n}\n";

	// Insert code inside header file
 	$compTypeH.exec insertAfter(ClavaJoinPoints.declLiteral(hDeclarationsCode));
	
	// Write files
	//$compTypeC.write(".");
	//$compTypeH.write(".");
	
	// Create return array
	var $files = [$compTypeH, $compTypeC];
	
	return $files;
//end
}

codedef Hdf5_HDeclaration(filename, className) %{
//  [[filename]]
class [[className]] {
	public:
	static H5::CompType GetCompType();
};

}% end


codedef Hdf5_CImplementation(namespace, className, body) %{
H5::CompType [[namespace]]::[[className]]::GetCompType() {
[[body]]

    return itype;
}

}% end

/**
 * @return String representing the HDF5 conversion code for the given record
 */
Hdf5.convertRecord = function($record, typeName) {
//aspectdef RecordToHdf5
//	input $record, typeName end
//	output code end

	//var recordName = $record.type.code;
	//var recordName = $record.getGetValue("qualifiedName");
	var recordName = $record.qualifiedName;
	code = "H5::CompType "+ typeName +"(sizeof("+recordName+"));\n";

//	select $record.field end
//	apply
	for(var $field of $record.fields) {
		if($field.type.constant) continue; // Ignore constant fields
		if(!$field.isPublic) continue; // Ignore private fields
	
		fieldName = $field.name;
		var HDF5Type = Hdf5.convert($field.type);
		if(HDF5Type === undefined) continue; // Warning message omitted for the example
		var params = %{"[[fieldName]]",offsetof([[recordName]], [[fieldName]]), [[HDF5Type]]}%;
		code += %{[[typeName]].insertMember([[params]]);}% + "\n";
	}
	//end
	
	return code;
}
//end