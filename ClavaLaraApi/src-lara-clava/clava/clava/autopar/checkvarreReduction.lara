/**************************************************************
* 
*                       checkvarreReduction
* 
**************************************************************/

aspectdef checkvarreReduction
	input $ForStmt end
	output Reduction end
	this.Reduction = [];
	// type 1 : x++, ++x, x--, --x
	// type 2 : x binaryOp= expr , binaryOp={+, *, -, &, ^ ,|}
	// type 3 : x = x binaryOp expr,		binaryOp={+, *, -, &, ^ ,|, &&, ||}
	//			x = expr binaryOp x (except for subtraction)
	// x is not referenced in exp
	// expr has scalar type (no array, objects etc)



	var loopindex = GetLoopIndex($ForStmt);
	var candidateVarlist = SearchStruct(LoopOmpAttributes[loopindex].varAccess, {varTypeAccess : 'varref', use : 'RW', isInsideLoopHeader : false , usedInClause : false});

	var exprlines = [];

	for(var i = 0; i < candidateVarlist.length; i++)
		if (
				(candidateVarlist[i].varUsage.length == 1) // for type 1 (or type 2,3)
				||
				(candidateVarlist[i].varUsage.length == 2 && candidateVarlist[i].varUsage[0].line == candidateVarlist[i].varUsage[1].line) // for type 2,3 , at same line
			)
		{
			exprlines.push(candidateVarlist[i].varUsage[0].line);
		}
		else
		{
			candidateVarlist.splice(i, 1); // remove from candidates
			i--;
		}

	select $ForStmt.body.expr end
	apply
		if ( exprlines.indexOf($expr.line) !== -1 )
		{
			var candidateVar = null;
			for(var i = 0; i < candidateVarlist.length; i++)
				if (candidateVarlist[i].varUsage[0].line === $expr.line)
				{
					candidateVar = candidateVarlist[i];
					break;
				}

			call o: retReductionOpVar($expr, candidateVar);
			this.Reduction = this.Reduction.concat(o.Reduction);
			exprlines.splice(exprlines.indexOf($expr.line), 1);
		}

	end


end


/**************************************************************
*
*                       retReductionOpVar
*
**************************************************************/
aspectdef retReductionOpVar
	input $expr, candidateVar end
	output Reduction end
	
	this.Reduction = [];

	var exprvarrefset = orderedVarrefs3($expr);	
	var candidateVarOp = [];
	var otherVarUsednumber = 0; // number of other varref in expr
	for(var j = 0; j < exprvarrefset.length; j++)
	{
		if (exprvarrefset[j].name === candidateVar.name)
		{
			if (typeof(exprvarrefset[j].ancestor('expression')) !== 'undefined' && exprvarrefset[j].ancestor('expression').astName === 'ParenExpr')
			{
				candidateVarOp = [];
				break; // candidateVar should not be in any ParenExpr
			}

			var op = null;
			if (typeof(exprvarrefset[j].ancestor('unaryOp')) !== 'undefined')
				op = exprvarrefset[j].ancestor('unaryOp').kind;
			else if (typeof(exprvarrefset[j].ancestor('binaryOp')) !== 'undefined')
				op = exprvarrefset[j].ancestor('binaryOp').kind +
					(( exprvarrefset[j].ancestor('binaryOp').kind !== 'assign' && exprvarrefset[j].ancestor('binaryOp').isAssignment === true) ? '' :'');
			if (op === 'sub' &&
				typeof(exprvarrefset[j].ancestor('binaryOp').right.vardecl) !== 'undefined' &&
				exprvarrefset[j].ancestor('binaryOp').right.vardecl.name === candidateVar.name
				)
			{
				candidateVarOp = [];
				break; // x = expr - x  not acceptable
			}

			candidateVarOp.push(op);
		}
		else
		{
			otherVarUsednumber++;
		}
	}


	var op = null;
	if (candidateVarOp.length == 1)
	{
		op = candidateVarOp[0];
	}
	else if(candidateVarOp.length == 2 &&
			candidateVarOp[1] == 'assign' &&
			(
				['add_assign', 'sub_assign', 'mul_assign','and_assign', 'or_assign' , 'xor_assign'].indexOf(candidateVarOp[0]) !== -1 ||
				['add', 'mul', 'sub', 'and', 'or', 'l_and' , 'l_or'].indexOf(candidateVarOp[0]) !== -1
			)
		)
	{
		op = candidateVarOp[0];
	}
	else
	{
		return;
	}


	var findOpflag = true;
	if ( ['pre_dec', 'post_dec', 'sub', 'sub_assign'].indexOf(op) !== -1 )
		this.Reduction.push('reduction(- : ' + candidateVar.name + ')');
	else if ( ['pre_inc', 'post_inc', 'add', 'add_assign'].indexOf(op) !== -1 )
		this.Reduction.push('reduction(+ : ' + candidateVar.name + ')');
	else if ( ['mul' , 'mul_assign'].indexOf(op) !== -1 )
		this.Reduction.push('reduction(* : ' + candidateVar.name + ')');
	else if ( ['and' , 'and_assign'].indexOf(op) !== -1 )
		this.Reduction.push('reduction(& : ' + candidateVar.name + ')');
	else if ( ['xor' , 'xor_assign'].indexOf(op) !== -1 )
		this.Reduction.push('reduction(^ : ' + candidateVar.name + ')');
	else if ( ['or' , 'or_assign'].indexOf(op) !== -1 )
		this.Reduction.push('reduction(| : ' + candidateVar.name + ')');
	else if ( ['l_and'].indexOf(op) !== -1 )
		this.Reduction.push('reduction(&& : ' + candidateVar.name + ')');
	else if ( ['l_or'].indexOf(op) !== -1 )
		this.Reduction.push('reduction(|| : ' + candidateVar.name + ')');
	else
		findOpflag = false;

	if (findOpflag === true)
		candidateVar.usedInClause = true;

end
