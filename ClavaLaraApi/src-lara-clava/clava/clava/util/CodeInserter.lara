import clava.Clava;

import lara.util.LineInserter;
import lara.Io;

/**
 * Writes the original code of the application, with the possibility of inserting new lines of code.
 *
 * @class
 */
var CodeInserter = function() {
	// Maps $file AST ids to an object that maps line numbers to strings to insert.
	this._linesToInserts = {};
};


CodeInserter.prototype.add = function($file, line, content) {
	var astId = $file.astId;
	var fileLines = this._getFileLines(astId);
	this._addContent(fileLines, line, content);
}

/**
 * Writes the code of the current tree, plus the lines to insert, to the given folder.
 */
CodeInserter.prototype.write = function(outputFolder) {

	var lineInserter = new LineInserter;

	// Write each file, inserting lines if needed
	for(var $file of Clava.getProgram().descendants('file')) {
		if(!Io.isFile($file.filepath)) {
			println("CodeInserter.write: skipping file, could not find path '"+$file.filepath+"'");
			continue;
		}
		
		// Original code
		var fileCode = Io.readFile($file.filepath);

		// Intrument code, if needed
		var fileLines = this._linesToInserts[$file.astId];
		if(fileLines !== undefined) {
			fileCode = lineInserter.add(fileCode, fileLines);
		}
		
		// Get path for writing file
		var outputFilepath = $file.destinationFilepath(outputFolder);

		// Write file
		Io.writeFile(outputFilepath, fileCode);	
	}
}
	
/*** PRIVATE FUNCTIONS ***/	
	
CodeInserter.prototype._getFileLines = function(astId) {
	var fileLines = this._linesToInserts[astId];

	if(fileLines === undefined) {
		fileLines = {};
		this._linesToInserts[astId] = fileLines;
	}
	
	return fileLines;
}

CodeInserter.prototype._addContent = function(fileLines, line, content) {
	var lineStrings = fileLines[line];
	if(lineStrings === undefined) {
		lineStrings = [];
		fileLines[line] = lineStrings;
	}
	
	lineStrings.push(content);
}
