import clava.Clava;
import clava.ClavaType;
import weaver.JoinPoints;
import lara.Check;
import clava._ClavaJavaTypes;


/**
 * Utility methods related with the creation of new join points.
 *
 * @class
 */
var ClavaJoinPoints = {};

/**
 * @param {J#ClavaNode} node - A node of the AST.
 * @deprecated use JoinPoints.getInstance().toJoinPoint(node)
 */
ClavaJoinPoints.create = function(node) {
	JoinPoints.getInstance().toJoinPoint(node);
	// Check instance
	//checkTrue(Java.type("pt.up.fe.specs.clava.ClavaNode").class.isInstance(node), "ClavaJoinPoints.create::node: Expected input to be a ClavaNode");
	//return Java.type("pt.up.fe.specs.clava.weaver.CxxJoinpoints").create(node);
}

/**
 * @return true, if the two join points are equal, in the sense that the underlying AST nodes are also equal, according to their .equals() method (might return true for different AST nodes).
 */
ClavaJoinPoints.equals = function(jp1, jp2) {
	return jp1.equals(jp2);
}

ClavaJoinPoints.builtinType = function(code) {
	//return Clava.getFactory().builtinType(code);
	return AstFactory.builtinType(code);
}

ClavaJoinPoints.pointerFromBuiltin = function(code) {
	Check.isString(code);	
	return AstFactory.pointerTypeFromBuiltin(code);
}

ClavaJoinPoints.pointer = function($type) {
	Check.isJoinPoint($type, 'type');
	return AstFactory.pointerType($type);
}

/**
 * Builds an array type of constant dimensions.
 * 
 * type - Mandatory. Represents the inner type of the array. Can be either a string or a Type join point. A string will be converted to a literal type.
 * dims - Mandatory. Represents the dimensions of the array. Can be either a JavaScript array or variadic integers which are converted to a JavaScript array.
 **/
ClavaJoinPoints.constArrayType = function(type, dims) {
	
	checkDefined(type, 'type', 'ClavaJoinPoints.constArrayType');
	checkDefined(dims, 'dims', 'ClavaJoinPoints.constArrayType');
	
	if(!Array.isArray(dims)) {
		dims = arrayFromArgs(arguments, 1);
	}
	
	var typeofType = typeof type;
	
	if(typeofType === "string") {
		
		return AstFactory.constArrayType(type, Clava.getStandard(), dims);
	} else if(Java.type("pt.up.fe.specs.clava.weaver.joinpoints.types.CxxType").class.isInstance(type)) {
		
		return AstFactory.constArrayType(type.getNode(), Clava.getStandard(), dims);
	} else {
		
		throw 'ClavaJoinPoints.constArrayType: illegal argument "type", needs to be either a string or a type join point';
	}
}

ClavaJoinPoints.variableArrayType = function($type, $sizeExpr) {
	checkDefined($type, '$type', 'ClavaJoinPoints.variableArrayType');
	checkDefined($sizeExpr, '$sizeExpr', 'ClavaJoinPoints.variableArrayType');
	
	
	return AstFactory.variableArrayType($type, $sizeExpr);
}


ClavaJoinPoints.exprLiteral = function(code, type) {
	var typeofType = typeof type;

	if(type === undefined) {
		return AstFactory.exprLiteral(code);
	}
	
	if(typeofType === "string") {
		type = ClavaJoinPoints.builtinType(type);
	}
	

	
	return AstFactory.exprLiteral(code, type);

}; 

/**
 * @param {string} varName
 * @param {joinpoint} init
 * */
ClavaJoinPoints.varDecl = function(varName, init) {
	return AstFactory.varDecl(varName, init);
}

/**
 * @param {string} varName
 * @param {Type} type
 * */
ClavaJoinPoints.varDeclNoInit = function(varName, type) {
	return AstFactory.varDeclNoInit(varName, type);
}

/**
 * Creates a new literal join point 'type'.
 *
 * @param {string} typeString The literal code of the type
 */
ClavaJoinPoints.typeLiteral = function(typeString) {
	return AstFactory.typeLiteral(typeString);
}

/**
 * Creates a new join point 'file'.
 *
 * @param {string|J#java.io.File} filename - Name of the source file. If filename represents a path to an already existing file, literally adds the contents of the file to the join point.
 * @param {string} [path=""] The path of the new file, relative to the output folder. Absolute paths are not allowed. This path will be required when including the file (e.g., #include "<path>/<filename>")
 */
ClavaJoinPoints.file = function(filename, path) {

	if(path === undefined) {
		path = '';
	}
	
	return AstFactory.file(filename, path);
}

/**
 * @param {String} filename - Name of the source file.
 * @param {String} source - The contents of the source file.
 * @param {String} [path=""] - The path of the new file, relative to the output folder. Absolute paths are not allowed. This path will be required when including the file (e.g., #include "<path>/<filename>")
 */
ClavaJoinPoints.fileWithSource = function(filename, source, path) {
	Check.isDefined(filename);
	Check.isDefined(source);

	filename = filename.toString();
	source = source.toString();
	path = path !== undefined ? path.toString() : '';
	
	return AstFactory.file(filename, source, path);
}

/**
 * Creates a new literal join point 'stmt'.
 *
 * @param {string} stmtString The literal code of the statement.
 */
ClavaJoinPoints.stmtLiteral = function(stmtString) {
	return AstFactory.stmtLiteral(stmtString);
}

/**
 * Creates a new join point 'call'. 
 *
 * @param {$function} $function - The function for which the call will refer to.
 * @param {...$expression} arguments - The arguments of the function.
 */
ClavaJoinPoints.call = function($function) {
	var callArgs = arrayFromArgs(arguments, 1);
	return AstFactory.callFromFunction($function, callArgs);
	//return AstFactory.stmtLiteral($function, callArgs);
}

/**
 * Creates a new join point 'call'. 
 *
 * @param {string} functionName - The name of the function to call.
 * @param {$type} $returnType - The return type of the function.
 * @param {...$expression} arguments - The arguments of the function.
 */
ClavaJoinPoints.callFromName = function(functionName, $returnType) {
	var callArgs = arrayFromArgs(arguments, 2);
	return AstFactory.call(functionName, $returnType, callArgs);
}


/**
 * Creates a new join point 'switch'
 *
 * @param {$function} $function - The literal code of the statement.
 * @param {...$expression} cases - An even number of expression join points, each pair representing the case value and expression, respectively.
 */
ClavaJoinPoints.switchStmt = function($conditionExpr) {
	var cases = arrayFromArgs(arguments, 1);
	return AstFactory.switchStmt($conditionExpr, cases);
}


ClavaJoinPoints.omp = function(directiveName) {
	return AstFactory.omp(directiveName);
}

ClavaJoinPoints.scope = function($stmts) {
	if($stmts === undefined) {
		return AstFactory.scope();
	}
	
	return AstFactory.scope($stmts);
}

/**
 * @param {String} declName - The name of the varref.
 * @param {$type} $type - The type of the varref.
 */
ClavaJoinPoints.varRef = function(declName, $type) {
	Check.isString(declName);
	Check.isJoinPoint($type);
	
	return AstFactory.varref(declName, $type);
}

ClavaJoinPoints.varRefFromDecl = function($namedDecl) {
	Check.isJoinPoint($namedDecl);
	
	return AstFactory.varref($namedDecl);
}

/**
 * @param {[$expr]} $expr - An expression to return.
 */
ClavaJoinPoints.returnStmt = function($expr) {
	
	if($expr === undefined) {
		return AstFactory.returnStmt();
	}
	
	return AstFactory.returnStmt($expr);
}

/**
 * Creates a new join point 'functionType'. 
 *
 * @param {$type} $returnType - The return type of the function type.
 * @param {...$type} argTypes - The types of the arguments of the function type.
 */
ClavaJoinPoints.functionType = function($returnType) {
	var argTypes = arrayFromArgs(arguments, 1);
	return AstFactory.functionType($function, argTypes);
}

/**
 * Creates a new join point 'function'. 
 *
 * @param {String} functionName - The name of the function.
 * @param {$functionType} $functionType - The type of the function.
 */
ClavaJoinPoints.functionDeclFromType = function(functionName, $functionType) {
	Check.isString(functionName);	
	Check.isJoinPoint($functionType);
	
	return AstFactory.functionDeclFromType(functionName, $functionType);
}


/**
 * Creates a new join point 'function'. 
 *
 * @param {String} functionName - The name of the function.
 * @param {...$Decl} params - The parameters of the function.
 */
ClavaJoinPoints.functionDecl = function(functionName, $returnType) {
	Check.isString(functionName);	
	var $parmVarDecls = arrayFromArgs(arguments, 2);
	
	return AstFactory.functionDecl(functionName, $returnType, $parmVarDecls);
}


ClavaJoinPoints.assign = function($leftHand, $rightHand) {
	Check.isJoinPoint($leftHand, 'expression');
	Check.isJoinPoint($rightHand, 'expression');
	
	return AstFactory.assignment($leftHand, $rightHand);
}

/**
 * Creates a new join point 'if'. 
 *
 * @param {String|$expr} $condition - The condition of the if statement. If a string, it is converted to a literal expression.
 * @param {$statement} [$then=undefined] - The body of the if
 * @param {$statement} [$else=undefined] - The body of the else
 * 
 */
ClavaJoinPoints.ifStmt = function($condition, $then, $else) {
	$condition = ClavaType.asExpression($condition);

	var $then = ClavaType.asScope($then);
	var $else = ClavaType.asScope($else);
	//Check.isJoinPoint($then, 'statement', true);
	//Check.isJoinPoint($else, 'statement', true);
	
	
	return AstFactory.ifStmt($condition, $then, $else);
}

/**
 * Creates a new join point 'binaryOp'. 
 *
 * @param {String} op - The binary operator kind.
 * @param {String|$expr} $left - The left hand of the binary operator. If a string, it is converted to a literal expression.
 * @param {String|$expr} $right - The right hand of the binary operator. If a string, it is converted to a literal expression.
 * @param {String|$expr} $type - The return type of the operator. If a string, it is converted to a literal type. If undefined, uses int type.
 */
ClavaJoinPoints.binaryOp = function(op, $left, $right, $type) {
	$left = ClavaType.asExpression($left);
	$right = ClavaType.asExpression($right);
	$type = ClavaType.asType($type);
	
	return AstFactory.binaryOp(op, $left, $right, $type);
}

/**
 * Creates a new join point 'unaryOp'. 
 *
 * @param {String} op - The unary operator kind.
 * @param {String|$expr} $expr - The sub-expression of the unary operator. If a string, it is converted to a literal expression.
 * @param {String|$expr} [$type] - The return type of the operator. If a string, it is converted to a literal type. If undefined, tries to infer the correct type based on the type of the $expr (inference might not be implemented for all operators).
 */
ClavaJoinPoints.unaryOp = function(op, $expr, $type) {
	$expr = ClavaType.asExpression($expr);
	$type = $type !== undefined ? ClavaType.asType($type) : $type;
	
	return AstFactory.unaryOp(op, $expr, $type);
}

/**
 * Creates a new join point 'expr' representing a parenthesis expression. 
 *
 * @param {String|$expr} $expr - The expression inside the parenthesis. If a string, it is converted to a literal expression.
 */
ClavaJoinPoints.parenthesis = function($expr) {
	$expr = ClavaType.asExpression($expr);
	return AstFactory.parenthesis($expr);
}

/**
 * @param {String|number} doubleLiteral - The number that will be a double literal.
 */
ClavaJoinPoints.doubleLiteral = function(doubleLiteral) {
	return AstFactory.doubleLiteral(doubleLiteral);
}

/**
 * @param {String|number} integerLiteral - The number that will be a integer literal.
 */
ClavaJoinPoints.integerLiteral = function(integerLiteral) {
	return AstFactory.integerLiteral(integerLiteral);
}

/**
 * @param {$typedefDecl} $typedefDecl - A typedef declaration.
 */
ClavaJoinPoints.typedefType = function($typedefDecl) {
	Check.isJoinPoint($typedefDecl, 'typedefDecl');
	
	return AstFactory.typedefType($typedefDecl);
}


/**
 * @param {$type} $underlyingType - The underlying type of the typedef.
 * @param {String} identifier - The name of the typedef. 
 */
ClavaJoinPoints.typedefDecl = function($underlyingType, identifier) {
	Check.isJoinPoint($underlyingType);
	Check.isString(identifier);
	
	return AstFactory.typedefDecl($underlyingType, identifier);
}

/**
 * @param {struct} $struct - a struct for the type
 * @return {elaboratedType} - an elaborated type for the given struct.
 */
ClavaJoinPoints.structType = function($struct) {
	Check.isJoinPoint($struct, "struct");
	
	return AstFactory.structType($struct);
}

/**
 * Represents an explicit C-style cast (e.g., (double) a).
 *
 * @param {type} $type
 * @param {expr} $expr 
 *
 * @return {cast}
 */
ClavaJoinPoints.cStyleCast = function($type, $expr) {
	Check.isJoinPoint($type, "type");
	Check.isJoinPoint($expr, "expression");	
	
	return AstFactory.cStyleCast($type, $expr);
}

/**
 * Creates an empty class with the given name and fields.
 *
 * @param {String} className
 * @param {...$field} [fields = []] 
 *
 * @return {class}
 */
ClavaJoinPoints.classDecl = function(className) {
	Check.isString(className);
	
	var fields = arrayFromArgs(arguments, 1);
	for(var $field of fields) {
		Check.isJoinPoint($field, "field");	
	}
	
	
	return AstFactory.classDecl(className, fields);
}

/**
 * Creates a field for a class.
 *
 * @param {String} fieldName
 * @param {$type} fieldType 
 *
 * @return {$field}
 */
ClavaJoinPoints.field = function(fieldName, $fieldType) {
	Check.isString(fieldName);
	Check.isJoinPoint($fieldType, 'type');
	
	return AstFactory.field(fieldName, $fieldType);
}

/**
 * Creates an access specifier (e.g., public:), for classes.
 *
 * @param {String} accessSpecifier one of public, protected, private or none.
 */
ClavaJoinPoints.accessSpecifier = function(accessSpecifier) {
	Check.isString(accessSpecifier);
	
	return AstFactory.accessSpecifier(accessSpecifier);
}



/**
 * Creates a new join point 'if'. 
 *
 * @param {String|$statement} [$init=undefined] - The initialization of the for statement. If a string, it is converted to a literal expression.
 * @param {String|$statement} [$condition=undefined] - The condition of the for statement. If a string, it is converted to a literal expression.
 * @param {String|$statement} [$inc=undefined] - The increment of the for statement. If a string, it is converted to a literal expression.
 * @param {String|$statement} [$body=undefined] - The body of the for statement.
 * 
 */
ClavaJoinPoints.forStmt = function($init, $condition, $inc, $body) {
	$init = ClavaType.asStatement($init, true);
	$condition = ClavaType.asStatement($condition, true);
	$inc = ClavaType.asStatement($inc, true);
	$body = ClavaType.asStatement($body, true);
		
	return AstFactory.forStmt($init, $condition, $inc, $body);
}


/**
 * @param {string} name
 * @param {$type} $type
 * */
ClavaJoinPoints.param = function(name, $type) {
	return AstFactory.param(name, $type);
}


/**
 * Tries to convert the given source into a join point, or throws an exception if it is not possible.
 *
 * If source is a string:
 *  - If it can be converted to a builtinType, returns a builtinType;
 *  - Otherwise, returns a typeLiteral;
 *
 * If source is a join point:
 *  - If is a $type, returns itself;
 *  - If the property .type is not undefined, returns .type;
 *  - Otherwise, throws an exception;
 *
 * @param {string|$jp} source
 * @return {$type} 
 */
ClavaJoinPoints.type = function(source) {
	if(isString(source)) {
		// Check if BuiltinType
		if(_ClavaJavaTypes.getBuiltinKind().isBuiltinKind(source)) {
			return ClavaJoinPoints.builtinType(source);
		}
		
		return ClavaJoinPoints.typeLiteral(source);
	}
	
	if(isJoinPoint(source)) {
		if(source.instanceOf("type")) {
			return source;
		}
		
		if(source.type !== undefined) {
			return source.type;
		}
		
		throw new Error('ClavaJoinPoints.type: source is join point but is not a type, nor has a .type property: ' + source); 		
	}
	
	throw new Error('ClavaJoinPoints.type: source must be a string or a join point: ' + source); 
}