import weaver.jp.ClassJp;
import weaver.Weaver;

// Override ClassJp constructor
var oldClassJp = ClassJp.prototype;
var oldClass_JP_TYPES = ClassJp._JP_TYPES;

ClassJp = function(astNode, getDefinition) {
	// By default, it gets the definition
	getDefinition = typeof getDefinition !== 'undefined' ? getDefinition : true;
	
	//println("getDefinition:" + astNode.getDefinition().isPresent() && getDefinition);
	// check for definition
	//this.originalAstNode = astNode;
	//if(astNode.getDefinition().isPresent() && getDefinition)
	//	astNode = astNode.getDefinition().get();
		
	// Parent constructor
    ClassTypeJp.call(this,astNode,getDefinition);
}

ClassJp.prototype = oldClassJp;
ClassJp._JP_TYPES = oldClass_JP_TYPES;



_lara_dummy_ = Object.defineProperty(ClassJp.prototype, 'id', {
	get: function () { 
		return this._qualifiedName; 
	}
});

_lara_dummy_ = Object.defineProperty(ClassJp.prototype, '_qualifiedName', {
	get: function () { 
		return this.astNode.getFullyQualifiedName(); 
	}
});

_lara_dummy_ = Object.defineProperty(ClassJp.prototype, 'name', {
	get: function () { 
		return Weaver.AST_METHODS.toJavaJoinPoint(this.astNode).name; 
	}
});

_lara_dummy_ = Object.defineProperty(ClassJp.prototype, 'superClasses', {
	get: function () {
		return CommonJoinPoints.toJoinPoints(Weaver.toJs(this.astNode.getBases())).filter($jp=>$jp.instanceOf("class")); 
	}
});

_lara_dummy_ = Object.defineProperty(ClassJp.prototype, 'allSuperClasses', {
	get: function () {
		var allSuperClasses = [];

		for(superClass of this.superClasses){
			allSuperClasses.push(superClass);
			allSuperClasses = allSuperClasses.concat(superClass.allSuperClasses);
		}
			 
		return allSuperClasses;
	}
});

_lara_dummy_ = Object.defineProperty(ClassJp.prototype, '_allMethods', {
	get: function () {
		var methods = Weaver.toJs(this.astNode.getMethods());
		methods = methods.map(method=> method.getDefinition().isPresent()?method.getDefinition().get():method);
		return CommonJoinPoints.toJoinPoints(Weaver.toJs(methods));
	}
});

_lara_dummy_ = Object.defineProperty(ClassJp.prototype, 'allMethods', {
	get: function () {		
		//return this._allMethods.filter(method => method.hasBody);
		return this._allMethods;
	}
});

_lara_dummy_ = Object.defineProperty(ClassJp.prototype, 'methods', {
	get: function () { 	
		return this.allMethods.filter(method => method.joinPointType === "method");
	}
});

_lara_dummy_ = Object.defineProperty(ClassJp.prototype, 'constructors', {
	get: function () { 	
		return this.allMethods.filter(method => method.joinPointType === "constructor");
	}
});

_lara_dummy_ = Object.defineProperty(ClassJp.prototype, 'fields', {
	get: function () {
		return CommonJoinPoints.toJoinPoints(Weaver.toJs(this.astNode.getFields())); 
	}
});

_lara_dummy_ = Object.defineProperty(ClassJp.prototype, '_kind', {
	get: function () { 	
		return "class";
	}
});

_lara_dummy_ = Object.defineProperty(ClassJp.prototype, 'isCustom', {
	get: function () {	
		return this.ancestor("file") != null;
	
	}
});

_lara_dummy_ = Object.defineProperty(ClassJp.prototype, 'isAbstract', {
	get: function () {	
	    return Weaver.AST_METHODS.toJavaJoinPoint(this.astNode).getIsAbstract();
	}
});

_lara_dummy_ = Object.defineProperty(ClassJp.prototype, 'children', {
	get: function () {
		return new ClassJp(this.astNode,false)._children;
	}
});

_lara_dummy_ = Object.defineProperty(ClassJp.prototype, 'members', {
	get: function () {
		return  this.fields.concat(this.allMethods);
	}
});




_lara_dummy_ = Object.defineProperty(ClassJp.prototype, 'listOfAllMethods', {
	get: function () {
		
		var allMethods = this.methods;

		for ($interface of this.allInterfaces) {
			allMethods = allMethods.concat($interface.methods);
		}

		for ($superClass of this.allSuperClasses) {
			allMethods = allMethods.concat($superClass.methods);
		}
		
		return allMethods;
	}
});

_lara_dummy_ = Object.defineProperty(ClassJp.prototype, 'interfaces', {
	get: function () { 
		return CommonJoinPoints.toJoinPoints(Weaver.toJs(this.astNode.getBases())).filter($jp=>$jp.instanceOf("interface"));
	 }
});

_lara_dummy_ = Object.defineProperty(ClassJp.prototype, 'allInterfaces', {
	get: function () {
		
		var allInterfaces = [];

		for (superInterface of this.interfaces) {
			allInterfaces.push(superInterface);
			allInterfaces = allInterfaces.concat(superInterface.allInterfaces);
		}

		for ($superClass of this.allSuperClasses) {
			allInterfaces = allInterfaces.concat($superClass.interfaces);
		}
		
		return allInterfaces;
	}
});

