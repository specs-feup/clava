// Enable Clava version of common join points
import weaver.jp.ClavaJoinPoint;
import weaver.jp.ClavaClassJp;
import weaver.jp.ClavaClassTypeJp;
import weaver.jp.ClavaInterfaceJp;
import weaver.jp.ClavaDeclJp;
import weaver.jp.ClavaMethodJp;
import weaver.jp.ClavaFunctionJp;
import weaver.jp.ClavaCallJp;
import weaver.jp.ClavaMemberCallJp;
import weaver.jp.ClavaFieldJp;
import weaver.jp.ClavaFieldRefJp;
import weaver.jp.ClavaTypeJp;
import weaver.jp.ClavaVarDeclJp;
import weaver.jp.ClavaVarRefJp;
import weaver.jp.ClavaParamJp;
import weaver.jp.ClavaConstructorJp;
import weaver.jp.ClavaConstructorCallJp;
import weaver.jp.ClavaLoopJp;
import weaver.jp.ClavaIfJp;
import weaver.jp.ClavaBinaryJp;
import weaver.jp.ClavaFileJp;
import weaver.jp.ClavaElseJp;

// Patches weaver.JoinPoint and other classes
import weaver.jp.JoinPointsCommonPath;

import weaver.Selector;

///

Selector.prototype._addJps = function($newJps, $jps, jpFilter, $jpChain, name) {
		
	for(var $jp of $jps) {
		var $filteredJp = jpFilter.filter([$jp]);
		
		if($filteredJp.length === 0) {
			continue;
		}
		
		if($jp.instanceOf("function")){
		
			if(!this._isFunctionValid($jp)) {
				continue;
			}     
		
		}
		
		if($jp.instanceOf("classType")){
		
			if(!this._isClassValid($jp)) {
				continue;
			}   
		
		}
		
        
		if($filteredJp.length > 1) {
			throw "Selector._addJps: Expected $filteredJp to have length 1, has " + $filteredJp.length;
		}

		// Copy chain
		var $updatedChain = Selector._copyChain($jpChain);
		
		// Update join point
		$updatedChain[name] = $jp;
		
		// Add jp with unique id
		var id = name + "_" + $updatedChain[Selector._COUNTER].add(name);		
		$updatedChain[id] = $jp;
		
		$newJps.push($updatedChain);
	}

}

Selector.prototype._isFunctionValid = function($function) {
		    var decl = $function.astNode;
			
			// If definition, is always valid
			if(decl.isDefinition()) {
				return true;
			}
			
			// It is a declaration, only valid if there is no definition 
			// AND if it is the first declaration as returned by .getDefinition()
			if(decl.getDefinition().isEmpty() && decl.getDeclaration().get().equals(decl)) {
				return true;
			}
			
			// In any other case, ignore the node
			return false;
}

Selector.prototype._isClassValid = function($class) {
		    var decl = $class.astNode;
			
			// If definition, is always valid
			if(decl.isCompleteDefinition()) {
				return true;
			}
			
			// It is a declaration, only valid if there is no definition 
			// AND if it is the first declaration as returned by .getDefinition()
			if(decl.getDefinition().isEmpty() && decl.getDeclaration().get().equals(decl)) {
				return true;
			}
			
			// In any other case, ignore the node
			return false;
}