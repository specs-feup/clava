import weaver.jp.FunctionJp;
import weaver.Weaver;


// Override FunctionJp constructor
var oldFunctionJp = FunctionJp.prototype;
var oldFunction_JP_TYPES = FunctionJp._JP_TYPES;

FunctionJp = function(astNode, getDefinition) {
	// By default, it gets the definition
	getDefinition = typeof getDefinition !== 'undefined' ? getDefinition : true;
	
	// check for definition
	// Update: No longer required, filtering is done at Selector._addJps
	// If both a prototype and a definition are present, only the definition arrives here;
	// If a prototype arrives here, it is because there is no definition
	this.originalAstNode = astNode;
	//if(astNode.getDefinition().isPresent() && getDefinition) {
	//	astNode = astNode.getDefinition().get();
	//}
		
	// Parent constructor
    DeclJp.call(this,astNode);
}

FunctionJp.prototype = oldFunctionJp;
FunctionJp._JP_TYPES = oldFunction_JP_TYPES;

_lara_dummy_ = Object.defineProperty(FunctionJp.prototype, 'id', {
	get: function () { 
		return this.signature; 
	}
});

_lara_dummy_ = Object.defineProperty(FunctionJp.prototype, 'name', {
	get: function () {  
		return Weaver.AST_METHODS.toJavaJoinPoint(this.astNode).name; 
	}
});

_lara_dummy_ = Object.defineProperty(FunctionJp.prototype, 'signature', {
	get: function () {  
		return Weaver.AST_METHODS.toJavaJoinPoint(this.astNode).signature; 
	}
});

_lara_dummy_ = Object.defineProperty(FunctionJp.prototype, 'returnType', {
	get: function () {  	
		return CommonJoinPoints.toJoinPoint(this.astNode.getReturnType()); 
	}
});

_lara_dummy_ = Object.defineProperty(FunctionJp.prototype, 'stmts', {
	get: function () {
		var functionBody = this.astNode.getBody();
		if(!functionBody.isPresent())
			return [];
			
		var functionStmts = functionBody.get().getStatements();
		return CommonJoinPoints.toJoinPoints(Weaver.toJs(functionStmts)); 
	}
});

_lara_dummy_ = Object.defineProperty(FunctionJp.prototype, 'hasBody', {
	get: function () {  	
		return this.originalAstNode.getBody().isPresent(); 
	}
});

_lara_dummy_ = Object.defineProperty(FunctionJp.prototype, 'children', {
	get: function () {
		return new FunctionJp(this.originalAstNode,false)._children;
	}
});


_lara_dummy_ = Object.defineProperty(MethodJp.prototype, 'isCustom', {
	get: function () {
		//return true;
		//return this.class.isCustom && this.hasBody;		 
		return this.class.isCustom;
	}
});
