import weaver.jp.TypeJp;
import weaver.Weaver;


_lara_dummy_ = Object.defineProperty(TypeJp.prototype, 'kind', {
	get: function () { 
		return Weaver.AST_METHODS.toJavaJoinPoint(this.astNode).kind;  
	}
});

_lara_dummy_ = Object.defineProperty(TypeJp.prototype, 'isArray', {
	get: function () { 
		return Weaver.AST_METHODS.toJavaJoinPoint(this.astNode).isArray;  
	}
});

_lara_dummy_ = Object.defineProperty(TypeJp.prototype, 'isPointer', {
	get: function () { 
		return Weaver.AST_METHODS.toJavaJoinPoint(this.astNode).isPointer;  
	}
});

_lara_dummy_ = Object.defineProperty(TypeJp.prototype, 'isPrimitive', {
	get: function () { 
		return Weaver.AST_METHODS.toJavaJoinPoint(this.astNode).isBuiltin;  
	}
});

_lara_dummy_ = Object.defineProperty(TypeJp.prototype, 'isClass', {
	get: function () {
		if(this.kind !== 'RecordType')
			return false;
		return this.astNode.getTagKind().toString()==="CLASS";
	}
});


_lara_dummy_ = Object.defineProperty(TypeJp.prototype, 'isInterface', {
	get: function () { throw '.isInterface not implemented in clava';
		return this.astNode.isInterface(); 
	}
});

_lara_dummy_ = Object.defineProperty(TypeJp.prototype, 'isClassType', {
	get: function () {
		return this.isInterface || this.isClass; 
	}
});

_lara_dummy_ = Object.defineProperty(TypeJp.prototype, 'classType', {
	get: function () {
		if (!this.isClassType) return null;
		return CommonJoinPoints.toJoinPoint(this.astNode.getTypeDeclaration());
	}
});

_lara_dummy_ = Object.defineProperty(TypeJp.prototype, '_hasSugar', {
	get: function () {
		return this.astNode.hasSugar();
	}
});

_lara_dummy_ = Object.defineProperty(TypeJp.prototype, '_desugar', {
	get: function () {
		return CommonJoinPoints.toJoinPoint(this.astNode.desugar());
	}
});

_lara_dummy_ = Object.defineProperty(TypeJp.prototype, '_unwrap', {
	get: function () {
		return CommonJoinPoints.toJoinPoint(this.astNode.getElementType());
	}
});

_lara_dummy_ = Object.defineProperty(TypeJp.prototype, '_desugarAll', {
	get: function () {
		return CommonJoinPoints.toJoinPoint(this.astNode.desugarAll());
	}
});

_lara_dummy_ = Object.defineProperty(TypeJp.prototype, 'decl', {
	get: function () {
		return CommonJoinPoints.toJoinPoint(this.astNode.getDecl());
	}
});

_lara_dummy_ = Object.defineProperty(TypeJp.prototype, '_hasTemplateArgs', {
	get: function () {
		return this.astNode.hasTemplateArgs();
	}
});

_lara_dummy_ = Object.defineProperty(TypeJp.prototype, '_templateArgsTypes', {
	get: function () {
		return CommonJoinPoints.toJoinPoints(Weaver.toJs(this.astNode.getTemplateArgumentTypes()));
	}
});

_lara_dummy_ = Object.defineProperty(TypeJp.prototype, '_typeDescendants', {
	get: function () {
		return CommonJoinPoints.toJoinPoints(Weaver.toJs(this.astNode.getTypeDescendants()));
	}
});

_lara_dummy_ = Object.defineProperty(TypeJp.prototype, '_typeDescendantsAndSelf', {
	get: function () {
		return [this].concat(this._typeDescendants);
	}
});

// TODO: It currently returns duplicates
_lara_dummy_ = Object.defineProperty(TypeJp.prototype, 'usedTypes', {
	get: function () {
		var usedTypes = [];
		
		for(type of this._typeDescendantsAndSelf){
			usedTypes.push(type);
			
			if(type._hasTemplateArgs)
				for(templateType of type._templateArgsTypes)
					usedTypes = usedTypes.concat(templateType.usedTypes);
			
		}
		
		return usedTypes;
	
	}
});

