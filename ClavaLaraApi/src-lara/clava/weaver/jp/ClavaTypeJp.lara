import weaver.jp.TypeJp;
import weaver.Weaver;


_lara_dummy_ = Object.defineProperty(TypeJp.prototype, 'kind', {
	get: function () { 
		return Weaver.AST_METHODS.toJavaJoinPoint(this.astNode).kind;  
	}
});

_lara_dummy_ = Object.defineProperty(TypeJp.prototype, 'isArray', {
	get: function () { 
		return Weaver.AST_METHODS.toJavaJoinPoint(this.astNode).isArray;  
	}
});

_lara_dummy_ = Object.defineProperty(TypeJp.prototype, 'isPointer', {
	get: function () { 
		return Weaver.AST_METHODS.toJavaJoinPoint(this.astNode).isPointer;  
	}
});

_lara_dummy_ = Object.defineProperty(TypeJp.prototype, 'isPrimitive', {
	get: function () { 
		return Weaver.AST_METHODS.toJavaJoinPoint(this.astNode).isBuiltin;  
	}
});

_lara_dummy_ = Object.defineProperty(TypeJp.prototype, 'isClass', {
	get: function () {
		// if(this.kind !== 'RecordType') return false;
		// return this.astNode.getTagKind().toString()==="CLASS";
		
		var classType = this.classType;
		return this.classType.instanceOf("class");
	}
});


_lara_dummy_ = Object.defineProperty(TypeJp.prototype, 'isInterface', {
	get: function () {
		var classType = this.classType;
		return classType.instanceOf("interface"); 
	}
});

_lara_dummy_ = Object.defineProperty(TypeJp.prototype, 'isClassType', {
	get: function () {
		var classType = this.classType;
		return classType.instanceOf("interface") || classType.instanceOf("class"); 
	}
});

_lara_dummy_ = Object.defineProperty(TypeJp.prototype, 'classType', {
	get: function () {
		
		var name = this.astNode.getCode().replace(" &", "").trim();
		var subtype = getRecordType(this);
		return subtype;
	}
});

function getRecordType(type) {
	if (type == null) return null;
	if (type == undefined) return null;

	if (type.kind === 'RecordType') return CommonJoinPoints.toJoinPoint(type.astNode.getDecl());
	
	var childType = null;
	
	if (type.kind === 'PointerType') {
		childType = type.astNode.getPointeeType();
	}
	if (type.kind === 'LValueReferenceType' || this.kind === 'RValueReferenceType') {
		childType = type.astNode.getReferencee();
	}
	if (type.kind === 'QualType') {
		childType = type.astNode.getUnqualifiedType();
	}
	if (type.kind === 'ElaboratedType') {
		childType = type.astNode.getNamedType();
	}
	if (type.kind === 'ReferenceType') {
		childType = type.astNode.getReferencee();
	}
	
	if (childType == null || childType == undefined) return null;
	
	return getRecordType(CommonJoinPoints.toJoinPoint(childType));
}
/*
public static Type getSingleElement(Type type) {
        if (type instanceof DecayedType) {
            return ((DecayedType) type).getOriginalType();
        }

        if (type instanceof AdjustedType) {
            return ((AdjustedType) type).getAdjustedType();
        }

        if (type instanceof PointerType) {
            return ((PointerType) type).getPointeeType();
        }

        if (type instanceof ArrayType) {
            return ((ArrayType) type).getElementType();
        }

        if (type instanceof QualType) {
            return ((QualType) type).getUnqualifiedType();
        }

        if (type instanceof TypedefType) {
            return ((TypedefType) type).getTypeClass();
        }

        return null;
    }
*/

_lara_dummy_ = Object.defineProperty(TypeJp.prototype, '_hasSugar', {
	get: function () {
		return this.astNode.hasSugar();
	}
});

_lara_dummy_ = Object.defineProperty(TypeJp.prototype, '_desugar', {
	get: function () {
		return CommonJoinPoints.toJoinPoint(this.astNode.desugar());
	}
});

_lara_dummy_ = Object.defineProperty(TypeJp.prototype, '_unwrap', {
	get: function () {
		return CommonJoinPoints.toJoinPoint(this.astNode.getElementType());
	}
});

_lara_dummy_ = Object.defineProperty(TypeJp.prototype, '_desugarAll', {
	get: function () {
		return CommonJoinPoints.toJoinPoint(this.astNode.desugarAll());
	}
});

_lara_dummy_ = Object.defineProperty(TypeJp.prototype, 'decl', {
	get: function () {
		return CommonJoinPoints.toJoinPoint(this.astNode.getDecl());
	}
});

_lara_dummy_ = Object.defineProperty(TypeJp.prototype, '_hasTemplateArgs', {
	get: function () {
		return this.astNode.hasTemplateArgs();
	}
});

_lara_dummy_ = Object.defineProperty(TypeJp.prototype, '_templateArgsTypes', {
	get: function () {
		return CommonJoinPoints.toJoinPoints(Weaver.toJs(this.astNode.getTemplateArgumentTypes()));
	}
});

_lara_dummy_ = Object.defineProperty(TypeJp.prototype, '_typeDescendants', {
	get: function () {
		return CommonJoinPoints.toJoinPoints(Weaver.toJs(this.astNode.getTypeDescendants()));
	}
});

_lara_dummy_ = Object.defineProperty(TypeJp.prototype, '_typeDescendantsAndSelf', {
	get: function () {
		return [this].concat(this._typeDescendants);
	}
});

// TODO: It currently returns duplicates
_lara_dummy_ = Object.defineProperty(TypeJp.prototype, 'usedTypes', {
	get: function () {
		var usedTypes = [];
		
		for(type of this._typeDescendantsAndSelf){
			usedTypes.push(type);
			
			if(type._hasTemplateArgs)
				for(templateType of type._templateArgsTypes)
					usedTypes = usedTypes.concat(templateType.usedTypes);
			
		}
		
		return usedTypes;
	
	}
});

