import weaver.jp.TypeJp;
import weaver.Weaver;


_lara_dummy_ = Object.defineProperty(TypeJp.prototype, 'kind', {
	get: function () { 
		return Weaver.AST_METHODS.toJavaJoinPoint(this.astNode).kind;  
	}
});

_lara_dummy_ = Object.defineProperty(TypeJp.prototype, 'isArray', {
	get: function () { 
		return Weaver.AST_METHODS.toJavaJoinPoint(this.astNode).isArray;  
	}
});

_lara_dummy_ = Object.defineProperty(TypeJp.prototype, 'isPointer', {
	get: function () { 
		return Weaver.AST_METHODS.toJavaJoinPoint(this.astNode).isPointer;  
	}
});

_lara_dummy_ = Object.defineProperty(TypeJp.prototype, 'isPrimitive', {
	get: function () { 
		return Weaver.AST_METHODS.toJavaJoinPoint(this.astNode).isBuiltin;  
	}
});

_lara_dummy_ = Object.defineProperty(TypeJp.prototype, 'isClass', {
	get: function () {
		// if(this.kind !== 'RecordType') return false;
		// return this.astNode.getTagKind().toString()==="CLASS";
		
		var classType = this.classType;
		return this.classType.instanceOf("class");
	}
});


_lara_dummy_ = Object.defineProperty(TypeJp.prototype, 'isInterface', {
	get: function () {
		var classType = this.classType;
		return classType.instanceOf("interface"); 
	}
});

_lara_dummy_ = Object.defineProperty(TypeJp.prototype, 'isClassType', {
	get: function () {
		var classType = this.classType;
		return classType.instanceOf("interface") || classType.instanceOf("class"); 
	}
});

_lara_dummy_ = Object.defineProperty(TypeJp.prototype, 'classType', {
	get: function () {
		
		var name = this.astNode.getCode().replace(" &", "").trim();
		var subtype = null;
		
		
		if (this.kind === 'PointerType') {
			subtype = this.astNode.getPointeeType();
			// println(" :" + subtype);
		}
		if (this.kind === 'LValueReferenceType' || this.kind === 'RValueReferenceType') {
			subtype = this.astNode.getReferencee();
			// println(" :" + subtype);
		}
		if (false && type.kind === 'QualType') {
			// subtype = this.astNode.getUnqualifiedType();
			// println(" :" + subtype);
			// println(" :" + subtype.getNamedType());
			// println(" :" + subtype.getNamedType().decl);
		}
		if (this.kind === 'ElaboratedType') {

		}
		
		// println(" - " + name + " : " + this.kind + " -- " + subtype);
		
		if (subtype == undefined) return null;
		
		var subtypeJp = CommonJoinPoints.toJoinPoint(subtype);
		
		if (subtypeJp.kind !== 'RecordType') return null;
		
		// println(CommonJoinPoints.toJoinPoint(subtype.getDecl()));
		return CommonJoinPoints.toJoinPoint(subtype.getDecl());
	}
});

_lara_dummy_ = Object.defineProperty(TypeJp.prototype, '_hasSugar', {
	get: function () {
		return this.astNode.hasSugar();
	}
});

_lara_dummy_ = Object.defineProperty(TypeJp.prototype, '_desugar', {
	get: function () {
		return CommonJoinPoints.toJoinPoint(this.astNode.desugar());
	}
});

_lara_dummy_ = Object.defineProperty(TypeJp.prototype, '_unwrap', {
	get: function () {
		return CommonJoinPoints.toJoinPoint(this.astNode.getElementType());
	}
});

_lara_dummy_ = Object.defineProperty(TypeJp.prototype, '_desugarAll', {
	get: function () {
		return CommonJoinPoints.toJoinPoint(this.astNode.desugarAll());
	}
});

_lara_dummy_ = Object.defineProperty(TypeJp.prototype, 'decl', {
	get: function () {
		return CommonJoinPoints.toJoinPoint(this.astNode.getDecl());
	}
});

_lara_dummy_ = Object.defineProperty(TypeJp.prototype, '_hasTemplateArgs', {
	get: function () {
		return this.astNode.hasTemplateArgs();
	}
});

_lara_dummy_ = Object.defineProperty(TypeJp.prototype, '_templateArgsTypes', {
	get: function () {
		return CommonJoinPoints.toJoinPoints(Weaver.toJs(this.astNode.getTemplateArgumentTypes()));
	}
});

_lara_dummy_ = Object.defineProperty(TypeJp.prototype, '_typeDescendants', {
	get: function () {
		return CommonJoinPoints.toJoinPoints(Weaver.toJs(this.astNode.getTypeDescendants()));
	}
});

_lara_dummy_ = Object.defineProperty(TypeJp.prototype, '_typeDescendantsAndSelf', {
	get: function () {
		return [this].concat(this._typeDescendants);
	}
});

// TODO: It currently returns duplicates
_lara_dummy_ = Object.defineProperty(TypeJp.prototype, 'usedTypes', {
	get: function () {
		var usedTypes = [];
		
		for(type of this._typeDescendantsAndSelf){
			usedTypes.push(type);
			
			if(type._hasTemplateArgs)
				for(templateType of type._templateArgsTypes)
					usedTypes = usedTypes.concat(templateType.usedTypes);
			
		}
		
		return usedTypes;
	
	}
});

