import clava.Clava;

import lara.Compilation;
import lara.code.EnergyBase;
import lara.code.Logger;
import lara.util.IdGenerator;
import lara.util.PrintOnce;

/**
 * Current SpecsRapl library measures uJ.
 */
Energy.prototype.getPrintUnit = function() {
    return "uJ";
}

Energy.prototype.measure = function($start, prefix, $end){
	//Check for valid joinpoints and additional conditions

	if(!this._measureValidate($start, $end, 'function')){
		return;
	}

	
	$end = $end === undefined ? $start : $end;

	// Message about dependency
	PrintOnce.message("Woven code has dependency to project SpecsRapl, which can be found at https://github.com/specs-feup/specs-c-libs");

	// Adds SpecsRapl include
	Compilation.addExtraIncludeFromGit("https://github.com/specs-feup/specs-c-libs.git", "SpecsRapl/include/");
	//Clava.getProgram().addExtraIncludeFromGit("https://github.com/specs-feup/specs-c-libs.git", "SpecsRapl/include/");
	
	// Adds SpecsRapl source
	Compilation.addExtraSourceFromGit("https://github.com/specs-feup/specs-c-libs.git", "SpecsRapl/src/");
	//Clava.getProgram().addExtraSourceFromGit("https://github.com/specs-feup/specs-c-libs.git", "SpecsRapl/src/");
	
	Compilation.addExtraLib('-pthread');
	
	var logger = new Logger(false, this.filename);

	// Build prefix
	if(prefix === undefined) {
		prefix = "";
	}

	
	// Add include
	$file = $start.getAncestor("file");
	if($file == undefined) {
		println("Could not find the corresponding file of the given joinpoint: " + $jp);
		return;
	}
	$file.addInclude("rapl.h", false);
	var energyVar = IdGenerator.next("clava_energy_output_");
	var energyVarStart = energyVar + "_start";
	var energyVarEnd = energyVar + "_end";


	var codeBefore = _energy_rapl_measure(energyVarStart);
	var codeAfter = _energy_rapl_measure(energyVarEnd);
	$start.insert("before", codeBefore);
	
	logger.append(prefix).appendLongLong(energyVarEnd + " - " + energyVarStart);
	if (this.printUnit) {
        logger.append(this.getPrintUnit());
    }
	logger.ln();
	logger.log($end);
	$end.insert("after",codeAfter);

}


codedef _energy_rapl_measure(energyVar)%{
long long [[energyVar]] = rapl_energy();
}%end
