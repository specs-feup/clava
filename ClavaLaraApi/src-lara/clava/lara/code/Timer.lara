import lara.code.TimerBase;
import lara.code.Logger;

import lara.util.IdGenerator;
import lara.Platforms;
import lara.util.TimeUnits;

import clava.ClavaJoinPoints;

import lara.util.StringSet;

Timer.prototype.addedDefines = new StringSet();

/**
 * Times the code of a given section.
 * 
 * @param $start [Mandatory] Starting point of the time measure
 * @param prefix Message that will appear before the time measure. If undefined, empty string will be used.
 * @param $end Ending point of the time measure. If undefined, measure is done around starting point.
 */
Timer.prototype.time = function($start, prefix, $end) {

    if (!this._timeValidate($start, $end, 'function')) {
        return;
    }

    var $file = $start.getAncestor('file');

    if($file === undefined) {
		println("Could not find the corresponding file of the given joinpoint: " + $jp);
		return;
	}else if ($file.isCxx) {
        return this._time_cpp($start, prefix, $end);
    } else {
        return this._time_c($start, prefix, $end);
    }

    //return this;
    //PrintOnce.message("Timer.time: not implemented yet for C");
}


Timer.prototype._time_cpp = function($start, prefix, $end) {
    if (this.timeUnits.unit == TimerUnit.DAYS){
        throw "Timer Exception: Timer metrics not implemented for DAYS in C++";
    }
    var logger = new Logger(false, this.filename);

    // Build prefix
    if (prefix === undefined) {
        prefix = "";
    }

    if ($end === undefined) {
        $end = $start;
    }

    $file = $start.getAncestor("file");


    // Add include
    $file.addInclude("chrono", true);


    var startVar = IdGenerator.next("clava_timing_start_");
    var endVar = IdGenerator.next("clava_timing_end_");

    var codeTic = _timer_cpp_now(startVar);
    var codeToc = _timer_cpp_now(endVar);

    var cppUnit = this.timeUnits.getCppTimeUnit();

    // Create literal node with calculation of time interval
    $timingResult = ClavaJoinPoints.exprLiteral(_timer_cpp_calc_interval(startVar, endVar, cppUnit));

    // Declare variable for time interval, which uses calculation as initialization
    var timeIntervalVar = IdGenerator.next("clava_timing_duration_");
    $timingResultDecl = ClavaJoinPoints.varDecl(timeIntervalVar, $timingResult);

    // Build message
    logger.append(prefix).appendDouble(timeIntervalVar);
    if (this.printUnit) {
        logger.append(this.timeUnits.getUnitsString());
    }
    logger.ln();

	
	// Check if $start is a scope
	if($start.getInstanceOf("scope")) {
		// Insert code
		$start.insertBegin(codeTic);
	} else {
		// Insert code
		$start.insertBefore(codeTic);
	}
	
	var afterJp = undefined;
	
	// Check if $end is a scope
	if($end.getInstanceOf("scope")) {
		// 'insertEnd' insertions must be done in sequential order		
		$end.insertEnd(codeToc);
		afterJp = $end.insertEnd($timingResultDecl);
	} else {
		// 'insertAfter' insertions must be done in reverse order		
		afterJp = $end.insertAfter($timingResultDecl);
		$end.insertAfter(codeToc);
	}
	/*
	// If $start/$end parent do not have a statement ancestor, use insertBegin/End instead
	if($start.getAncestor("statement") === undefined || $end.getAncestor("statement") === undefined) {

		// Insert code
		$start.insertBegin(codeTic);

		// 'end' insertions must be done in sequential order		
		$end.insertEnd(codeToc);
		$end.insertEnd($timingResultDecl);


	} else {
		// Insert code
		$start.insertBefore(codeTic);

		// 'after' insertions must be done in reverse order		
		$end.insertAfter($timingResultDecl);
		$end.insertAfter(codeToc);
	}
	*/



    // Log time information
	if(this.print) {
		logger.log($timingResultDecl);
		afterJp = logger.getAfterJp();
	}
	
	this._setAfterJp(afterJp);
	
	return timeIntervalVar;
}

Timer.prototype._time_c = function($start, prefix, $end) {

    var logger = new Logger(false, this.filename);

    // Build prefix
    if (prefix === undefined) {
        prefix = "";
    }

    if ($end === undefined) {
        $end = $start;
    }

    $file = $start.getAncestor("file");

    
    var codeBefore, codeAfter, timeIntervalVar;

    // Declare variable for time interval, which uses calculation as initialization
    var timeIntervalVar = IdGenerator.next("clava_timing_duration_");
    var $timingResultDecl;

    if (Platforms.isWindows()) { //use QueryPerformanceCounter
        // Add includes
        $file.addInclude("time.h", true);
        $file.addInclude("windows.h", true);

        // get variable names
        var startVar = IdGenerator.next("clava_timing_start_");
        var endVar = IdGenerator.next("clava_timing_end_");
        var frequencyVar = IdGenerator.next("clava_timing_frequency_");

        codeBefore = _timer_c_windows_declare_vars_now(startVar, endVar, frequencyVar);
        codeAfter = _timer_c_windows_get_final_time(endVar);

        // Create literal node with calculation of time interval
        $timingResult = ClavaJoinPoints.exprLiteral(_timer_c_windows_calc_interval(startVar, endVar, frequencyVar, this.timeUnits.getMagnitudeFactorFromSeconds()), ClavaJoinPoints.builtinType("double"));

        $timingResultDecl = ClavaJoinPoints.varDecl(timeIntervalVar, $timingResult);

    } else if (Platforms.isLinux()) {
        // Add includes
        $file.exec addInclude("time.h", true);
		
		// If C99 or C11 standard, needs define at the beginning of the file
		// https://stackoverflow.com/questions/42597685/storage-size-of-timespec-isnt-known
		var needsDefine = Clava.getStandard() === "c99" || Clava.getStandard() === "c11";
		if(needsDefine && !this.addedDefines.has($file.location)) {
			$file.exec insertBegin("#define _POSIX_C_SOURCE 199309L");
			this.addedDefines.add($file.location);
		}		
	

        // get variable names
        var startVar = IdGenerator.next("clava_timing_start_");
        var endVar = IdGenerator.next("clava_timing_end_");

        codeBefore = _timer_c_linux_declare_vars_now(startVar, endVar);
        codeAfter = _timer_c_linux_get_final_time(endVar);

        // Create literal node with calculation of time interval
        $timingResult = ClavaJoinPoints.exprLiteral(_timer_c_linux_calc_interval(startVar, endVar, this.timeUnits.getMagnitudeFactorFromSeconds()), ClavaJoinPoints.builtinType("double"));

        $timingResultDecl = ClavaJoinPoints.varDecl(timeIntervalVar, $timingResult);
    }else{
        throw "Timer Exception: Platform not supported (Windows and Linux only)";
    }

    // Build message
    logger.append(prefix).appendDouble(timeIntervalVar);
    if (this.printUnit) {
        logger.append(this.timeUnits.getUnitsString());
    }
    logger.ln();

	// Check if $start is a scope
	if($start.getInstanceOf("scope")) {
		// Insert code
		$start.insertBegin(codeBefore);
	} else {
		// Insert code
		$start.insertBefore(codeBefore);
	}
	
	
	var afterJp = undefined;
	
	// Check if $end is a scope
	if($end.getInstanceOf("scope")) {
		// 'insertEnd' insertions must be done in sequential order		
		$end.insertEnd(codeAfter);
		afterJp = $end.insertEnd($timingResultDecl);
	} else {
		// 'insertAfter' insertions must be done in reverse order		
		afterJp = $end.insertAfter($timingResultDecl);
		$end.insertAfter(codeAfter);
	}
/*	
	// If $start/$end parent do not have a statement ancestor, use insertBegin/End instead
	if($start.getAncestor("statement") === undefined || $end.getAncestor("statement") === undefined) {

		// Insert code
		$start.insertBegin(codeBefore);

		// 'end' insertions must be done in sequential order		
		$end.insertEnd(codeAfter);
		$end.insertEnd($timingResultDecl);
		
	} else {
	    // Insert code
		$start.insertBefore(codeBefore);

		// 'after' insertions must be done in reverse order		
		$end.insertAfter($timingResultDecl);
		$end.insertAfter(codeAfter);
	}
*/


    // Log time information
	if(this.print) {
		logger.log($timingResultDecl);
		afterJp = logger.getAfterJp();
	}
	
	this._setAfterJp(afterJp);
	
	return timeIntervalVar;

}

//C codedefs 
// Windows
codedef _timer_c_windows_declare_vars_now(timeStartVar, timeEndVar, timeFrequencyVar)%{
LARGE_INTEGER [[timeStartVar]], [[timeEndVar]], [[timeFrequencyVar]];
QueryPerformanceFrequency(&[[timeFrequencyVar]]);
QueryPerformanceCounter(&[[timeStartVar]]);
}%end

codedef _timer_c_windows_get_final_time(timeEndVar)%{
QueryPerformanceCounter(&[[timeEndVar]]);
}%end

codedef _timer_c_windows_calc_interval(timeStartVar, timeEndVar, timeFrequencyVar, factorConversion)%{
(([[timeEndVar]].QuadPart-[[timeStartVar]].QuadPart) / (double)[[timeFrequencyVar]].QuadPart) * ([[factorConversion]])
}%end

//Linux
codedef _timer_c_linux_declare_vars_now(timeStartVar, timeEndVar)%{
struct timespec [[timeStartVar]], [[timeEndVar]];
clock_gettime(CLOCK_MONOTONIC, &[[timeStartVar]]);
}%end

codedef _timer_c_linux_get_final_time(timeEndVar)%{
clock_gettime(CLOCK_MONOTONIC, &[[timeEndVar]]);
}%end

codedef _timer_c_linux_calc_interval(timeStartVar, timeEndVar, factorConversion)%{
(([[timeEndVar]].tv_sec + ((double) [[timeEndVar]].tv_nsec / 1000000000)) - ([[timeStartVar]].tv_sec + ((double) [[timeStartVar]].tv_nsec / 1000000000))) * ([[factorConversion]])
}%end

//Cpp codedefs
codedef _timer_cpp_now(timeVar)%{
std::chrono::high_resolution_clock::time_point [[timeVar]] = std::chrono::high_resolution_clock::now();
}%end

codedef _timer_cpp_calc_interval(startVar, endVar, unit)%{
std::chrono::duration_cast<std::chrono::[[unit]]>([[endVar]] - [[startVar]]).count()
}%end