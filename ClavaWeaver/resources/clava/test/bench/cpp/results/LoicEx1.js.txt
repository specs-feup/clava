 ==================================
 Declaration of the method = FIRST_DUPLICATION(int n); of the class FIRST_DUPLICATION
 Associated definition = FIRST_DUPLICATION::FIRST_DUPLICATION(int n) {
   this->sz = n;
   this->elem = new double[n];
   for(int i = 0; i < n; ++i) 
   	this->elem[i] = 0;
}

 The class of the record field is = FIRST_DUPLICATION
 ==================================
 Declaration of the method = ~FIRST_DUPLICATION() noexcept; of the class FIRST_DUPLICATION
 Associated definition = FIRST_DUPLICATION::~FIRST_DUPLICATION() noexcept {
   delete[] this->elem;
}

 The class of the record field is = FIRST_DUPLICATION
 ==================================
 Declaration of the method = void affectation(int indice, double element); of the class FIRST_DUPLICATION
 Associated definition = void FIRST_DUPLICATION::affectation(int indice, double element) {
   this->elem[indice] = element;
}

 The class of the record field is = FIRST_DUPLICATION
 ==================================
 Declaration of the method = double acces(int indice); of the class FIRST_DUPLICATION
 Associated definition = double FIRST_DUPLICATION::acces(int indice) {
   
   return this->elem[indice];
}

 The class of the record field is = FIRST_DUPLICATION
 ==================================
 Declaration of the method = int taille() const; of the class FIRST_DUPLICATION
 Associated definition = int FIRST_DUPLICATION::taille() const {
   
   return this->sz;
}

 The class of the record field is = FIRST_DUPLICATION
 ==================================
 Declaration of the method = void affichesomme(); of the class FIRST_DUPLICATION
 Associated definition = void FIRST_DUPLICATION::affichesomme() {
   int res = 0;
   for(int i = 0; i < this->sz; i++) 
   	res += this->elem[i];
   // cout<<" sum = "<< res << "\n";
}

 The class of the record field is = FIRST_DUPLICATION
 ==================================
 Declaration of the method = SECOND_DUPLICATION(int n); of the class SECOND_DUPLICATION
 Associated definition = SECOND_DUPLICATION::SECOND_DUPLICATION(int n) {
   this->sz = n;
   this->elem = new double[n];
   for(int i = 0; i < n; ++i) 
   	this->elem[i] = 0;
}

 The class of the record field is = SECOND_DUPLICATION
 ==================================
 Declaration of the method = ~SECOND_DUPLICATION() noexcept; of the class SECOND_DUPLICATION
 Associated definition = SECOND_DUPLICATION::~SECOND_DUPLICATION() noexcept {
   delete[] this->elem;
}

 The class of the record field is = SECOND_DUPLICATION
 ==================================
 Declaration of the method = void affectation(int indice, double element); of the class SECOND_DUPLICATION
 Associated definition = void SECOND_DUPLICATION::affectation(int indice, double element) {
   this->elem[indice] = element;
}

 The class of the record field is = SECOND_DUPLICATION
 ==================================
 Declaration of the method = double acces(int indice); of the class SECOND_DUPLICATION
 Associated definition = double SECOND_DUPLICATION::acces(int indice) {
   
   return this->elem[indice];
}

 The class of the record field is = SECOND_DUPLICATION
 ==================================
 Declaration of the method = int taille() const; of the class SECOND_DUPLICATION
 Associated definition = int SECOND_DUPLICATION::taille() const {
   
   return this->sz;
}

 The class of the record field is = SECOND_DUPLICATION
 ==================================
 Declaration of the method = void affichesomme(); of the class SECOND_DUPLICATION
 Associated definition = void SECOND_DUPLICATION::affichesomme() {
   int res = 0;
   for(int i = 0; i < this->sz; i++) 
   	res += this->elem[i];
   // cout<<" sum = "<< res << "\n";
}

 The class of the record field is = SECOND_DUPLICATION
 ==================================
 Declaration of the method = Vector(int n) {
   this->sz = n;
   this->elem = new double[n];
   for(int i = 0; i < n; ++i) 
   	this->elem[i] = 0;
}
 of the class Vector
 Associated definition = Vector(int n) {
   this->sz = n;
   this->elem = new double[n];
   for(int i = 0; i < n; ++i) 
   	this->elem[i] = 0;
}

 The class of the record field is = Vector
 ==================================
 Declaration of the method = ~Vector() noexcept {
   delete[] this->elem;
}
 of the class Vector
 Associated definition = ~Vector() noexcept {
   delete[] this->elem;
}

 The class of the record field is = Vector
 ==================================
 Declaration of the method = void affectation(int indice, double element) {
   this->elem[indice] = element;
}
 of the class Vector
 Associated definition = void affectation(int indice, double element) {
   this->elem[indice] = element;
}

 The class of the record field is = Vector
 ==================================
 Declaration of the method = double acces(int indice) {
   
   return this->elem[indice];
}
 of the class Vector
 Associated definition = double acces(int indice) {
   
   return this->elem[indice];
}

 The class of the record field is = Vector
 ==================================
 Declaration of the method = int taille() const {
   
   return this->sz;
}
 of the class Vector
 Associated definition = int taille() const {
   
   return this->sz;
}

 The class of the record field is = Vector
 ==================================
 Declaration of the method = void affichesomme() {
   int res = 0;
   for(int i = 0; i < this->sz; i++) 
   	res += this->elem[i];
   // cout<<" sum = "<< res << "\n";
}
 of the class Vector
 Associated definition = void affichesomme() {
   int res = 0;
   for(int i = 0; i < this->sz; i++)
   	 res += this->elem[i];
   // cout<<" sum = "<< res << "\n";
}

 The class of the record field is = Vector