import weaver.Query;

aspectdef PragmaData

	select function{"foo"}.loop end
	apply
		println("Data:");
		printObject($loop.data);
		println("");
	end

	select function{"noData"}.loop end
	apply
		println("Empty Object:");
		printlnObject($loop.data);
	end
	
	// Insert preserves pragma
	var $loopWithPragma = Query.search("function", "insertPreservesPragma").search("loop").first();
	println("Data before insert: " + $loopWithPragma.data.a);
	$loopWithPragma.insertBefore("int a;");
	println("Data after insert: " + $loopWithPragma.data.a);	
	
	// ...also before functions
	var $loopWithPragma2 = Query.search("function", "insertPreservesPragma2").first();
	println("Data before insert: " + $loopWithPragma2.data.a);
	$loopWithPragma2.insertBefore("int global_a;");
	println("Data after insert: " + $loopWithPragma2.data.a);	

	// Setting data without pragma creates a pragma
	var $loopWithoutPragma = Query.search("function", "insertWithoutPragma").first();
	$loopWithoutPragma.data.a = 42;
	$loopWithoutPragma.data.b = 43;	
	println("Loop without pragma after setting data: " + $loopWithoutPragma.pragmas.map(p => p.code));

	// Setting already existing data updates pragma
	var $loopWithUpdatedPragma = Query.search("function", "updatePragma").first();
	$loopWithUpdatedPragma.data.a = 200;
	println("Loop with updated pragma: " + $loopWithUpdatedPragma.pragmas.map(p => p.code));
	
//from nothing adds pragma; changes reflected in pragma; push/pop preserve; rebuild preserves for ones with pragma
end
