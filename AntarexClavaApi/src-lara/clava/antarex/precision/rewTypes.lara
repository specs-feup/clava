/*
   Author(s): LoÃ¯c Besnard (loic.besnard@irisa.fr). 
              IRISA-INRIA Rennes, France.
              
   This code has been developed during the ANTAREX project (http://www.antarex-project.eu).
   It is provided under the MIT license (https://opensource.org/licenses/MIT).
*/
import lara.Io;
import clava.Clava;
import clava.ClavaJoinPoints;
import lara.Strings;
import antarex.utils.messages;
import antarex.precision.rewTypesFunc;
 
/**
   Visit the application (variables, prototypes, typedefs, class)
   and substitute the type (oldType) by another one (newType).
   oldType and newType are join points.
*/
aspectdef rewType
 input
 oldType,
 newType
end
 call rewTypeVars( oldType, newType);
 call rewTypePrototypes(oldType, newType);
 call rewTypedefs(oldType, newType);
 call rewTypeClass(oldType, newType);
 call rewCasts(oldType, newType);
 call rewNewExpr(oldType, newType);
 // To be completed ...
end

/**  Replace oldType by newType in the typedefs */
aspectdef rewTypedefs
 input
  oldType,
  newType
 end
   TRACE_BEGIN_OP(" >>> rewTypedefs " + oldType.code + " to " + newType.code);
   select typedefDecl end
    apply
       if ( ! isDeclareddDontModify( $typedefDecl.name )) {
	     var $ptype = $typedefDecl.getValue("underlyingType");
         TRACE(" === typedefDecl code pre = " + $ptype.code) ;
		 var $ntype = getNewType( $ptype, oldType, newType);
     	 if ( $ptype !== $ntype) $typedefDecl.setValue("underlyingType", $ntype);
     	 TRACE(" === typedefDecl code post = " +  $ntype.code);
        }
    end
end


/** Replace oldType by newType in the fields of the classes 
	and structures of the application. */
 aspectdef rewTypeClass
 input 
   oldType,
   newType
 end
 TRACE_BEGIN_OP(" >>> rewType for Classes " + oldType.code + " to " + newType.code);
 select class end  
 apply
  var decls = $class.fields;
  for (var adecl of decls) {
    var $tt = adecl.type;
    $ntype  = getNewType( $tt, oldType, newType);
    TRACE("  rewTypeClass returns " + $ntype.code);
    if ($ntype !== $tt) adecl.setType($ntype);  // adecl.type = $ntype;
  }
 end
 
 TRACE_BEGIN_OP(" >>> rewType for Structures " + oldType.code + " to " + newType.code);
 select struct end  
 apply
  var decls = $struct.fields;
  for (var adecl of decls) {
  	var $tt = adecl.type;
    var $ntype = getNewType( $tt, oldType, newType);
    if ($ntype !== $tt) adecl.setType($ntype); 
  }
 end

end

/**  Replace oldType by newType in the prototype of a function (fname). */
aspectdef rewTypePrototype
input
 fname,
 oldType,
 newType
end
// replacing the return type. For the parameters, they are elements of vardecl.
 select function{fname} end
  apply
    var tf = $function.type;
    if (tf.astIsInstance("FunctionProtoType")) tf = tf.returnType;
	var $xx = getNewType( tf, oldType, newType);
	if ($xx !== tf) $function.setType($xx); 
  end

end

/** Replace oldType by newType in the functions. */
aspectdef rewTypePrototypes
input
 oldType,
 newType
end
   TRACE_BEGIN_OP(" >>> rewType for Prototype " + oldType.code + " to " + newType.code);
   select function end
   apply
     if ($function.name != "main")
      {
        TRACE( " rewTypePrototype for " + $function.name);
        call rewTypePrototype($function.name, oldType, newType);
        }
end	
end


/** Replace oldType by newType in the variable declaration, 
    including the parameters of the functions. */
aspectdef rewTypeVars
input
	oldType,
	newType
end

select vardecl end
apply
	TRACE(" variable = " + $vardecl.name );
	checkDefined($vardecl);
	var vardeclType = $vardecl.type;
	TRACE(" variable = " + $vardecl.name + vardeclType.code);
	var $ntype = getNewType(vardeclType, oldType, newType);
	$vardecl.setType($ntype);
	TRACE(" --End variable ");
end 
end

/** Replace oldType by newType for the 'cast' operations*/
aspectdef rewCasts
input
	oldType,
	newType
end
   select file.function.expr end
   apply
	 if ( $expr.joinPointType === 'cast') {
	 	TRACE( " CAST expression = " + $expr.code );
	 	// println(" keys = " + $expr.keys);
	 	var $vtype = $expr.type;
	 	var $ntype = getNewType($vtype, oldType, newType);
	    if ($vtype !== $ntype) $expr.setType($ntype);
	    TRACE( " --End CAST expression = " + $expr.code );
	 }
   end
end

/** Replace oldType by newType for the 'new' operations*/
aspectdef rewNewExpr
input
	oldType,
	newType
end
select newExpr end
    apply
    	TRACE(" New Expr " + $newExpr.code);
        var vtype = $newExpr.type.unwrap;  // for new t; $newExpr.type is a pointer on the type t
        var $ntype = getNewType(vtype, oldType, newType);
        $newExpr.setType($ntype);
        TRACE(" --End New Expr " + $newExpr.code);
    end
end

